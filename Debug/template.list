
template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012cfc  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a98  08012ee8  08012ee8  00013ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013980  08013980  000153c4  2**0
                  CONTENTS
  4 .ARM          00000008  08013980  08013980  00014980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013988  08013988  000153c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013988  08013988  00014988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801398c  0801398c  0001498c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003c4  20000000  08013990  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018b4  200003c4  08013d54  000153c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c78  08013d54  00015c78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000153c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022317  00000000  00000000  000153ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000652f  00000000  00000000  00037704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002018  00000000  00000000  0003dc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001896  00000000  00000000  0003fc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002254f  00000000  00000000  000414e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d54f  00000000  00000000  00063a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae663  00000000  00000000  00090f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f5e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009994  00000000  00000000  0013f62c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00148fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200003c4 	.word	0x200003c4
 8000204:	00000000 	.word	0x00000000
 8000208:	08012ecc 	.word	0x08012ecc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200003c8 	.word	0x200003c8
 8000224:	08012ecc 	.word	0x08012ecc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	@ 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000eae:	2afd      	cmp	r2, #253	@ 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	@ 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	@ 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	@ 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__aeabi_d2lz>:
 80010fc:	b538      	push	{r3, r4, r5, lr}
 80010fe:	2200      	movs	r2, #0
 8001100:	2300      	movs	r3, #0
 8001102:	4604      	mov	r4, r0
 8001104:	460d      	mov	r5, r1
 8001106:	f7ff fcc5 	bl	8000a94 <__aeabi_dcmplt>
 800110a:	b928      	cbnz	r0, 8001118 <__aeabi_d2lz+0x1c>
 800110c:	4620      	mov	r0, r4
 800110e:	4629      	mov	r1, r5
 8001110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001114:	f000 b80a 	b.w	800112c <__aeabi_d2ulz>
 8001118:	4620      	mov	r0, r4
 800111a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800111e:	f000 f805 	bl	800112c <__aeabi_d2ulz>
 8001122:	4240      	negs	r0, r0
 8001124:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001128:	bd38      	pop	{r3, r4, r5, pc}
 800112a:	bf00      	nop

0800112c <__aeabi_d2ulz>:
 800112c:	b5d0      	push	{r4, r6, r7, lr}
 800112e:	2200      	movs	r2, #0
 8001130:	4b0b      	ldr	r3, [pc, #44]	@ (8001160 <__aeabi_d2ulz+0x34>)
 8001132:	4606      	mov	r6, r0
 8001134:	460f      	mov	r7, r1
 8001136:	f7ff fa3b 	bl	80005b0 <__aeabi_dmul>
 800113a:	f7ff fd11 	bl	8000b60 <__aeabi_d2uiz>
 800113e:	4604      	mov	r4, r0
 8001140:	f7ff f9bc 	bl	80004bc <__aeabi_ui2d>
 8001144:	2200      	movs	r2, #0
 8001146:	4b07      	ldr	r3, [pc, #28]	@ (8001164 <__aeabi_d2ulz+0x38>)
 8001148:	f7ff fa32 	bl	80005b0 <__aeabi_dmul>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4630      	mov	r0, r6
 8001152:	4639      	mov	r1, r7
 8001154:	f7ff f874 	bl	8000240 <__aeabi_dsub>
 8001158:	f7ff fd02 	bl	8000b60 <__aeabi_d2uiz>
 800115c:	4621      	mov	r1, r4
 800115e:	bdd0      	pop	{r4, r6, r7, pc}
 8001160:	3df00000 	.word	0x3df00000
 8001164:	41f00000 	.word	0x41f00000

08001168 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001178:	4b28      	ldr	r3, [pc, #160]	@ (800121c <MX_ADC1_Init+0xb4>)
 800117a:	4a29      	ldr	r2, [pc, #164]	@ (8001220 <MX_ADC1_Init+0xb8>)
 800117c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800117e:	4b27      	ldr	r3, [pc, #156]	@ (800121c <MX_ADC1_Init+0xb4>)
 8001180:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001184:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001186:	4b25      	ldr	r3, [pc, #148]	@ (800121c <MX_ADC1_Init+0xb4>)
 8001188:	2200      	movs	r2, #0
 800118a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800118c:	4b23      	ldr	r3, [pc, #140]	@ (800121c <MX_ADC1_Init+0xb4>)
 800118e:	2200      	movs	r2, #0
 8001190:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001192:	4b22      	ldr	r3, [pc, #136]	@ (800121c <MX_ADC1_Init+0xb4>)
 8001194:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001198:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800119a:	4b20      	ldr	r3, [pc, #128]	@ (800121c <MX_ADC1_Init+0xb4>)
 800119c:	2200      	movs	r2, #0
 800119e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80011a0:	4b1e      	ldr	r3, [pc, #120]	@ (800121c <MX_ADC1_Init+0xb4>)
 80011a2:	2202      	movs	r2, #2
 80011a4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011a6:	481d      	ldr	r0, [pc, #116]	@ (800121c <MX_ADC1_Init+0xb4>)
 80011a8:	f001 fd62 	bl	8002c70 <HAL_ADC_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80011b2:	f000 fcf1 	bl	8001b98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011b6:	2306      	movs	r3, #6
 80011b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80011be:	2306      	movs	r3, #6
 80011c0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	4619      	mov	r1, r3
 80011c6:	4815      	ldr	r0, [pc, #84]	@ (800121c <MX_ADC1_Init+0xb4>)
 80011c8:	f001 ff2c 	bl	8003024 <HAL_ADC_ConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011d2:	f000 fce1 	bl	8001b98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011d6:	2307      	movs	r3, #7
 80011d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011da:	2302      	movs	r3, #2
 80011dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	4619      	mov	r1, r3
 80011e2:	480e      	ldr	r0, [pc, #56]	@ (800121c <MX_ADC1_Init+0xb4>)
 80011e4:	f001 ff1e 	bl	8003024 <HAL_ADC_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80011ee:	f000 fcd3 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_Delay(300);
 80011f2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011f6:	f001 fd17 	bl	8002c28 <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc1);
 80011fa:	4808      	ldr	r0, [pc, #32]	@ (800121c <MX_ADC1_Init+0xb4>)
 80011fc:	f002 f90c 	bl	8003418 <HAL_ADCEx_Calibration_Start>


	if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc1_val_buf, (ADC1_CHANNEL_CNT*ADC1_CHANNEL_FRE)) != HAL_OK)
 8001200:	2214      	movs	r2, #20
 8001202:	4908      	ldr	r1, [pc, #32]	@ (8001224 <MX_ADC1_Init+0xbc>)
 8001204:	4805      	ldr	r0, [pc, #20]	@ (800121c <MX_ADC1_Init+0xb4>)
 8001206:	f001 fe1d 	bl	8002e44 <HAL_ADC_Start_DMA>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_ADC1_Init+0xac>
	  {
	    /* Start Conversation Error */
	    Error_Handler();
 8001210:	f000 fcc2 	bl	8001b98 <Error_Handler>
	  }

  /* USER CODE END ADC1_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000418 	.word	0x20000418
 8001220:	40012400 	.word	0x40012400
 8001224:	200003e4 	.word	0x200003e4

08001228 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a28      	ldr	r2, [pc, #160]	@ (80012e4 <HAL_ADC_MspInit+0xbc>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d149      	bne.n	80012dc <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001248:	4b27      	ldr	r3, [pc, #156]	@ (80012e8 <HAL_ADC_MspInit+0xc0>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a26      	ldr	r2, [pc, #152]	@ (80012e8 <HAL_ADC_MspInit+0xc0>)
 800124e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b24      	ldr	r3, [pc, #144]	@ (80012e8 <HAL_ADC_MspInit+0xc0>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001260:	4b21      	ldr	r3, [pc, #132]	@ (80012e8 <HAL_ADC_MspInit+0xc0>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a20      	ldr	r2, [pc, #128]	@ (80012e8 <HAL_ADC_MspInit+0xc0>)
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b1e      	ldr	r3, [pc, #120]	@ (80012e8 <HAL_ADC_MspInit+0xc0>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001278:	23c0      	movs	r3, #192	@ 0xc0
 800127a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127c:	2303      	movs	r3, #3
 800127e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	4619      	mov	r1, r3
 8001286:	4819      	ldr	r0, [pc, #100]	@ (80012ec <HAL_ADC_MspInit+0xc4>)
 8001288:	f003 f8e6 	bl	8004458 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800128c:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <HAL_ADC_MspInit+0xc8>)
 800128e:	4a19      	ldr	r2, [pc, #100]	@ (80012f4 <HAL_ADC_MspInit+0xcc>)
 8001290:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001292:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <HAL_ADC_MspInit+0xc8>)
 8001294:	2200      	movs	r2, #0
 8001296:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <HAL_ADC_MspInit+0xc8>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800129e:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <HAL_ADC_MspInit+0xc8>)
 80012a0:	2280      	movs	r2, #128	@ 0x80
 80012a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <HAL_ADC_MspInit+0xc8>)
 80012a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012ac:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <HAL_ADC_MspInit+0xc8>)
 80012ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <HAL_ADC_MspInit+0xc8>)
 80012b6:	2220      	movs	r2, #32
 80012b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012ba:	4b0d      	ldr	r3, [pc, #52]	@ (80012f0 <HAL_ADC_MspInit+0xc8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012c0:	480b      	ldr	r0, [pc, #44]	@ (80012f0 <HAL_ADC_MspInit+0xc8>)
 80012c2:	f002 fc45 	bl	8003b50 <HAL_DMA_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80012cc:	f000 fc64 	bl	8001b98 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a07      	ldr	r2, [pc, #28]	@ (80012f0 <HAL_ADC_MspInit+0xc8>)
 80012d4:	621a      	str	r2, [r3, #32]
 80012d6:	4a06      	ldr	r2, [pc, #24]	@ (80012f0 <HAL_ADC_MspInit+0xc8>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012dc:	bf00      	nop
 80012de:	3720      	adds	r7, #32
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40012400 	.word	0x40012400
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40010800 	.word	0x40010800
 80012f0:	20000448 	.word	0x20000448
 80012f4:	40020008 	.word	0x40020008

080012f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
	...

0800130c <ADC_DMA_Hal_Test>:
/*
 * ADC  test A sample adc value with dma formal
 *
 */
void ADC_DMA_Hal_Test() {
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0

	HAL_ADCEx_Calibration_Start(&hadc1);    //AD  adjusting
 8001310:	4837      	ldr	r0, [pc, #220]	@ (80013f0 <ADC_DMA_Hal_Test+0xe4>)
 8001312:	f002 f881 	bl	8003418 <HAL_ADCEx_Calibration_Start>
			for(i = 0; i < ADC1_CHANNEL_CNT; i++)
 8001316:	4b37      	ldr	r3, [pc, #220]	@ (80013f4 <ADC_DMA_Hal_Test+0xe8>)
 8001318:	2200      	movs	r2, #0
 800131a:	801a      	strh	r2, [r3, #0]
 800131c:	e00c      	b.n	8001338 <ADC_DMA_Hal_Test+0x2c>
			{
				adc1_aver_val[i] = 0;
 800131e:	4b35      	ldr	r3, [pc, #212]	@ (80013f4 <ADC_DMA_Hal_Test+0xe8>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	4619      	mov	r1, r3
 8001324:	4b34      	ldr	r3, [pc, #208]	@ (80013f8 <ADC_DMA_Hal_Test+0xec>)
 8001326:	2200      	movs	r2, #0
 8001328:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			for(i = 0; i < ADC1_CHANNEL_CNT; i++)
 800132c:	4b31      	ldr	r3, [pc, #196]	@ (80013f4 <ADC_DMA_Hal_Test+0xe8>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	b29a      	uxth	r2, r3
 8001334:	4b2f      	ldr	r3, [pc, #188]	@ (80013f4 <ADC_DMA_Hal_Test+0xe8>)
 8001336:	801a      	strh	r2, [r3, #0]
 8001338:	4b2e      	ldr	r3, [pc, #184]	@ (80013f4 <ADC_DMA_Hal_Test+0xe8>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d9ee      	bls.n	800131e <ADC_DMA_Hal_Test+0x12>
			}
			/*  get sum number from the data in  adc1 sample dma array one channel by channel */
			for(i = 0; i < ADC1_CHANNEL_FRE; i++)
 8001340:	4b2c      	ldr	r3, [pc, #176]	@ (80013f4 <ADC_DMA_Hal_Test+0xe8>)
 8001342:	2200      	movs	r2, #0
 8001344:	801a      	strh	r2, [r3, #0]
 8001346:	e01c      	b.n	8001382 <ADC_DMA_Hal_Test+0x76>
			{
				adc1_aver_val[0] +=  adc1_val_buf[i*ADC1_CHANNEL_CNT+0];
 8001348:	4b2b      	ldr	r3, [pc, #172]	@ (80013f8 <ADC_DMA_Hal_Test+0xec>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a29      	ldr	r2, [pc, #164]	@ (80013f4 <ADC_DMA_Hal_Test+0xe8>)
 800134e:	8812      	ldrh	r2, [r2, #0]
 8001350:	0052      	lsls	r2, r2, #1
 8001352:	492a      	ldr	r1, [pc, #168]	@ (80013fc <ADC_DMA_Hal_Test+0xf0>)
 8001354:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001358:	4413      	add	r3, r2
 800135a:	4a27      	ldr	r2, [pc, #156]	@ (80013f8 <ADC_DMA_Hal_Test+0xec>)
 800135c:	6013      	str	r3, [r2, #0]
				adc1_aver_val[1] +=  adc1_val_buf[i*ADC1_CHANNEL_CNT+1];
 800135e:	4b26      	ldr	r3, [pc, #152]	@ (80013f8 <ADC_DMA_Hal_Test+0xec>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	4a24      	ldr	r2, [pc, #144]	@ (80013f4 <ADC_DMA_Hal_Test+0xe8>)
 8001364:	8812      	ldrh	r2, [r2, #0]
 8001366:	0052      	lsls	r2, r2, #1
 8001368:	3201      	adds	r2, #1
 800136a:	4924      	ldr	r1, [pc, #144]	@ (80013fc <ADC_DMA_Hal_Test+0xf0>)
 800136c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001370:	4413      	add	r3, r2
 8001372:	4a21      	ldr	r2, [pc, #132]	@ (80013f8 <ADC_DMA_Hal_Test+0xec>)
 8001374:	6053      	str	r3, [r2, #4]
			for(i = 0; i < ADC1_CHANNEL_FRE; i++)
 8001376:	4b1f      	ldr	r3, [pc, #124]	@ (80013f4 <ADC_DMA_Hal_Test+0xe8>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	b29a      	uxth	r2, r3
 800137e:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <ADC_DMA_Hal_Test+0xe8>)
 8001380:	801a      	strh	r2, [r3, #0]
 8001382:	4b1c      	ldr	r3, [pc, #112]	@ (80013f4 <ADC_DMA_Hal_Test+0xe8>)
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	2b09      	cmp	r3, #9
 8001388:	d9de      	bls.n	8001348 <ADC_DMA_Hal_Test+0x3c>
			}
			/* get average number from the data in  adc1 sample dma array one channel by channel */
			for(i = 0; i < ADC1_CHANNEL_CNT; i++)
 800138a:	4b1a      	ldr	r3, [pc, #104]	@ (80013f4 <ADC_DMA_Hal_Test+0xe8>)
 800138c:	2200      	movs	r2, #0
 800138e:	801a      	strh	r2, [r3, #0]
 8001390:	e016      	b.n	80013c0 <ADC_DMA_Hal_Test+0xb4>
			{
				value[i] = adc1_aver_val[i] / ADC1_CHANNEL_FRE;
 8001392:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <ADC_DMA_Hal_Test+0xe8>)
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	4b17      	ldr	r3, [pc, #92]	@ (80013f8 <ADC_DMA_Hal_Test+0xec>)
 800139a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800139e:	4a18      	ldr	r2, [pc, #96]	@ (8001400 <ADC_DMA_Hal_Test+0xf4>)
 80013a0:	fba2 2303 	umull	r2, r3, r2, r3
 80013a4:	08d9      	lsrs	r1, r3, #3
 80013a6:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <ADC_DMA_Hal_Test+0xe8>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	b289      	uxth	r1, r1
 80013ae:	4b15      	ldr	r3, [pc, #84]	@ (8001404 <ADC_DMA_Hal_Test+0xf8>)
 80013b0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for(i = 0; i < ADC1_CHANNEL_CNT; i++)
 80013b4:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <ADC_DMA_Hal_Test+0xe8>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <ADC_DMA_Hal_Test+0xe8>)
 80013be:	801a      	strh	r2, [r3, #0]
 80013c0:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <ADC_DMA_Hal_Test+0xe8>)
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d9e4      	bls.n	8001392 <ADC_DMA_Hal_Test+0x86>
			}
	printf("\n");
 80013c8:	200a      	movs	r0, #10
 80013ca:	f00e f8b7 	bl	800f53c <putchar>
	printf("sample channel 1 %d\n",value[0]);
 80013ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001404 <ADC_DMA_Hal_Test+0xf8>)
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	4619      	mov	r1, r3
 80013d4:	480c      	ldr	r0, [pc, #48]	@ (8001408 <ADC_DMA_Hal_Test+0xfc>)
 80013d6:	f00e f89f 	bl	800f518 <iprintf>
	printf("sample channel 2 %d\n",value[1]);
 80013da:	4b0a      	ldr	r3, [pc, #40]	@ (8001404 <ADC_DMA_Hal_Test+0xf8>)
 80013dc:	885b      	ldrh	r3, [r3, #2]
 80013de:	4619      	mov	r1, r3
 80013e0:	480a      	ldr	r0, [pc, #40]	@ (800140c <ADC_DMA_Hal_Test+0x100>)
 80013e2:	f00e f899 	bl	800f518 <iprintf>
	HAL_Delay(20);
 80013e6:	2014      	movs	r0, #20
 80013e8:	f001 fc1e 	bl	8002c28 <HAL_Delay>


}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000418 	.word	0x20000418
 80013f4:	200003e0 	.word	0x200003e0
 80013f8:	2000040c 	.word	0x2000040c
 80013fc:	200003e4 	.word	0x200003e4
 8001400:	cccccccd 	.word	0xcccccccd
 8001404:	20000414 	.word	0x20000414
 8001408:	08012ee8 	.word	0x08012ee8
 800140c:	08012f00 	.word	0x08012f00

08001410 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_CRC_Init+0x20>)
 8001416:	4a07      	ldr	r2, [pc, #28]	@ (8001434 <MX_CRC_Init+0x24>)
 8001418:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800141a:	4805      	ldr	r0, [pc, #20]	@ (8001430 <MX_CRC_Init+0x20>)
 800141c:	f002 f9b7 	bl	800378e <HAL_CRC_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001426:	f000 fbb7 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000048c 	.word	0x2000048c
 8001434:	40023000 	.word	0x40023000

08001438 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a09      	ldr	r2, [pc, #36]	@ (800146c <HAL_CRC_MspInit+0x34>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d10b      	bne.n	8001462 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <HAL_CRC_MspInit+0x38>)
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	4a08      	ldr	r2, [pc, #32]	@ (8001470 <HAL_CRC_MspInit+0x38>)
 8001450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001454:	6153      	str	r3, [r2, #20]
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_CRC_MspInit+0x38>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001462:	bf00      	nop
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	40023000 	.word	0x40023000
 8001470:	40021000 	.word	0x40021000

08001474 <MX_DAC_Init>:
DMA_HandleTypeDef hdma_dac_ch1;
DMA_HandleTypeDef hdma_dac_ch2;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800147a:	463b      	mov	r3, r7
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001482:	4b14      	ldr	r3, [pc, #80]	@ (80014d4 <MX_DAC_Init+0x60>)
 8001484:	4a14      	ldr	r2, [pc, #80]	@ (80014d8 <MX_DAC_Init+0x64>)
 8001486:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001488:	4812      	ldr	r0, [pc, #72]	@ (80014d4 <MX_DAC_Init+0x60>)
 800148a:	f002 f99c 	bl	80037c6 <HAL_DAC_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001494:	f000 fb80 	bl	8001b98 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001498:	2324      	movs	r3, #36	@ 0x24
 800149a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014a0:	463b      	mov	r3, r7
 80014a2:	2200      	movs	r2, #0
 80014a4:	4619      	mov	r1, r3
 80014a6:	480b      	ldr	r0, [pc, #44]	@ (80014d4 <MX_DAC_Init+0x60>)
 80014a8:	f002 fa72 	bl	8003990 <HAL_DAC_ConfigChannel>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80014b2:	f000 fb71 	bl	8001b98 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80014b6:	463b      	mov	r3, r7
 80014b8:	2210      	movs	r2, #16
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <MX_DAC_Init+0x60>)
 80014be:	f002 fa67 	bl	8003990 <HAL_DAC_ConfigChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80014c8:	f000 fb66 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000494 	.word	0x20000494
 80014d8:	40007400 	.word	0x40007400

080014dc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
  if(dacHandle->Instance==DAC)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a3c      	ldr	r2, [pc, #240]	@ (80015e8 <HAL_DAC_MspInit+0x10c>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d171      	bne.n	80015e0 <HAL_DAC_MspInit+0x104>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80014fc:	4b3b      	ldr	r3, [pc, #236]	@ (80015ec <HAL_DAC_MspInit+0x110>)
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	4a3a      	ldr	r2, [pc, #232]	@ (80015ec <HAL_DAC_MspInit+0x110>)
 8001502:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001506:	61d3      	str	r3, [r2, #28]
 8001508:	4b38      	ldr	r3, [pc, #224]	@ (80015ec <HAL_DAC_MspInit+0x110>)
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	4b35      	ldr	r3, [pc, #212]	@ (80015ec <HAL_DAC_MspInit+0x110>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a34      	ldr	r2, [pc, #208]	@ (80015ec <HAL_DAC_MspInit+0x110>)
 800151a:	f043 0304 	orr.w	r3, r3, #4
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b32      	ldr	r3, [pc, #200]	@ (80015ec <HAL_DAC_MspInit+0x110>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800152c:	2330      	movs	r3, #48	@ 0x30
 800152e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001530:	2303      	movs	r3, #3
 8001532:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	4619      	mov	r1, r3
 800153a:	482d      	ldr	r0, [pc, #180]	@ (80015f0 <HAL_DAC_MspInit+0x114>)
 800153c:	f002 ff8c 	bl	8004458 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA2_Channel3;
 8001540:	4b2c      	ldr	r3, [pc, #176]	@ (80015f4 <HAL_DAC_MspInit+0x118>)
 8001542:	4a2d      	ldr	r2, [pc, #180]	@ (80015f8 <HAL_DAC_MspInit+0x11c>)
 8001544:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001546:	4b2b      	ldr	r3, [pc, #172]	@ (80015f4 <HAL_DAC_MspInit+0x118>)
 8001548:	2210      	movs	r2, #16
 800154a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800154c:	4b29      	ldr	r3, [pc, #164]	@ (80015f4 <HAL_DAC_MspInit+0x118>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001552:	4b28      	ldr	r3, [pc, #160]	@ (80015f4 <HAL_DAC_MspInit+0x118>)
 8001554:	2280      	movs	r2, #128	@ 0x80
 8001556:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001558:	4b26      	ldr	r3, [pc, #152]	@ (80015f4 <HAL_DAC_MspInit+0x118>)
 800155a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800155e:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001560:	4b24      	ldr	r3, [pc, #144]	@ (80015f4 <HAL_DAC_MspInit+0x118>)
 8001562:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001566:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001568:	4b22      	ldr	r3, [pc, #136]	@ (80015f4 <HAL_DAC_MspInit+0x118>)
 800156a:	2220      	movs	r2, #32
 800156c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800156e:	4b21      	ldr	r3, [pc, #132]	@ (80015f4 <HAL_DAC_MspInit+0x118>)
 8001570:	2200      	movs	r2, #0
 8001572:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001574:	481f      	ldr	r0, [pc, #124]	@ (80015f4 <HAL_DAC_MspInit+0x118>)
 8001576:	f002 faeb 	bl	8003b50 <HAL_DMA_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <HAL_DAC_MspInit+0xa8>
    {
      Error_Handler();
 8001580:	f000 fb0a 	bl	8001b98 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a1b      	ldr	r2, [pc, #108]	@ (80015f4 <HAL_DAC_MspInit+0x118>)
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	4a1a      	ldr	r2, [pc, #104]	@ (80015f4 <HAL_DAC_MspInit+0x118>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA2_Channel4;
 8001590:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <HAL_DAC_MspInit+0x120>)
 8001592:	4a1b      	ldr	r2, [pc, #108]	@ (8001600 <HAL_DAC_MspInit+0x124>)
 8001594:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001596:	4b19      	ldr	r3, [pc, #100]	@ (80015fc <HAL_DAC_MspInit+0x120>)
 8001598:	2210      	movs	r2, #16
 800159a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800159c:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <HAL_DAC_MspInit+0x120>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80015a2:	4b16      	ldr	r3, [pc, #88]	@ (80015fc <HAL_DAC_MspInit+0x120>)
 80015a4:	2280      	movs	r2, #128	@ 0x80
 80015a6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015a8:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <HAL_DAC_MspInit+0x120>)
 80015aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015ae:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015b0:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <HAL_DAC_MspInit+0x120>)
 80015b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b6:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 80015b8:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <HAL_DAC_MspInit+0x120>)
 80015ba:	2220      	movs	r2, #32
 80015bc:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80015be:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <HAL_DAC_MspInit+0x120>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 80015c4:	480d      	ldr	r0, [pc, #52]	@ (80015fc <HAL_DAC_MspInit+0x120>)
 80015c6:	f002 fac3 	bl	8003b50 <HAL_DMA_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_DAC_MspInit+0xf8>
    {
      Error_Handler();
 80015d0:	f000 fae2 	bl	8001b98 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac_ch2);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a09      	ldr	r2, [pc, #36]	@ (80015fc <HAL_DAC_MspInit+0x120>)
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	4a08      	ldr	r2, [pc, #32]	@ (80015fc <HAL_DAC_MspInit+0x120>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80015e0:	bf00      	nop
 80015e2:	3720      	adds	r7, #32
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40007400 	.word	0x40007400
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40010800 	.word	0x40010800
 80015f4:	200004a8 	.word	0x200004a8
 80015f8:	40020430 	.word	0x40020430
 80015fc:	200004ec 	.word	0x200004ec
 8001600:	40020444 	.word	0x40020444

08001604 <HAL_DAC_ConvCpltCallbackCh1>:



/*DAC OUT1 DMA传输完成中断回调函数*/
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
    /*翻转RED_LED引脚状�??*/
	HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 800160c:	2120      	movs	r1, #32
 800160e:	4803      	ldr	r0, [pc, #12]	@ (800161c <HAL_DAC_ConvCpltCallbackCh1+0x18>)
 8001610:	f003 f8e5 	bl	80047de <HAL_GPIO_TogglePin>
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40011800 	.word	0x40011800

08001620 <DAC_Hal_Test>:

/*
 * DAC GPIO test A generate a sin wave by the data
 * generate a static wave by the data
 */
void DAC_Hal_Test() {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af02      	add	r7, sp, #8
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t *)Averagemax12bit_32, 32, DAC_ALIGN_12B_R);
 8001626:	2300      	movs	r3, #0
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2320      	movs	r3, #32
 800162c:	4a07      	ldr	r2, [pc, #28]	@ (800164c <DAC_Hal_Test+0x2c>)
 800162e:	2100      	movs	r1, #0
 8001630:	4807      	ldr	r0, [pc, #28]	@ (8001650 <DAC_Hal_Test+0x30>)
 8001632:	f002 f8eb 	bl	800380c <HAL_DAC_Start_DMA>
	//HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, (uint32_t *)Sine12bit_32, 32, DAC_ALIGN_12B_R);
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, (uint32_t *)Average12bit_32, 32, DAC_ALIGN_12B_R);
 8001636:	2300      	movs	r3, #0
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2320      	movs	r3, #32
 800163c:	4a05      	ldr	r2, [pc, #20]	@ (8001654 <DAC_Hal_Test+0x34>)
 800163e:	2110      	movs	r1, #16
 8001640:	4803      	ldr	r0, [pc, #12]	@ (8001650 <DAC_Hal_Test+0x30>)
 8001642:	f002 f8e3 	bl	800380c <HAL_DAC_Start_DMA>
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000040 	.word	0x20000040
 8001650:	20000494 	.word	0x20000494
 8001654:	20000000 	.word	0x20000000

08001658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800165e:	4b22      	ldr	r3, [pc, #136]	@ (80016e8 <MX_DMA_Init+0x90>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	4a21      	ldr	r2, [pc, #132]	@ (80016e8 <MX_DMA_Init+0x90>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6153      	str	r3, [r2, #20]
 800166a:	4b1f      	ldr	r3, [pc, #124]	@ (80016e8 <MX_DMA_Init+0x90>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001676:	4b1c      	ldr	r3, [pc, #112]	@ (80016e8 <MX_DMA_Init+0x90>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	4a1b      	ldr	r2, [pc, #108]	@ (80016e8 <MX_DMA_Init+0x90>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6153      	str	r3, [r2, #20]
 8001682:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <MX_DMA_Init+0x90>)
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	200b      	movs	r0, #11
 8001694:	f002 f845 	bl	8003722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001698:	200b      	movs	r0, #11
 800169a:	f002 f85e 	bl	800375a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	200e      	movs	r0, #14
 80016a4:	f002 f83d 	bl	8003722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80016a8:	200e      	movs	r0, #14
 80016aa:	f002 f856 	bl	800375a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	200f      	movs	r0, #15
 80016b4:	f002 f835 	bl	8003722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80016b8:	200f      	movs	r0, #15
 80016ba:	f002 f84e 	bl	800375a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	203a      	movs	r0, #58	@ 0x3a
 80016c4:	f002 f82d 	bl	8003722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80016c8:	203a      	movs	r0, #58	@ 0x3a
 80016ca:	f002 f846 	bl	800375a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	203b      	movs	r0, #59	@ 0x3b
 80016d4:	f002 f825 	bl	8003722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 80016d8:	203b      	movs	r0, #59	@ 0x3b
 80016da:	f002 f83e 	bl	800375a <HAL_NVIC_EnableIRQ>

}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000

080016ec <HAL_GPIO_EXTI_Callback>:
 * @brief       the callback of EXIT
 *              In hal all kind of the exit irq have to call this callback function
 * @param       GPIO_Pin:the interrupt number
 * @retval      NULL
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(20); /*delay 20ms*/
 80016f6:	2014      	movs	r0, #20
 80016f8:	f001 fa96 	bl	8002c28 <HAL_Delay>
	switch (GPIO_Pin) {
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	2b10      	cmp	r3, #16
 8001700:	d115      	bne.n	800172e <HAL_GPIO_EXTI_Callback+0x42>
	case key2_exit_Pin:
		if (HAL_GPIO_ReadPin(key2_exit_GPIO_Port, key2_exit_Pin)
 8001702:	2110      	movs	r1, #16
 8001704:	480c      	ldr	r0, [pc, #48]	@ (8001738 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001706:	f003 f83b 	bl	8004780 <HAL_GPIO_ReadPin>
 800170a:	4603      	mov	r3, r0
 800170c:	2b01      	cmp	r3, #1
 800170e:	d10d      	bne.n	800172c <HAL_GPIO_EXTI_Callback+0x40>
				== GPIO_PIN_SET) {
			HAL_Delay(20); /*delay 20ms*/
 8001710:	2014      	movs	r0, #20
 8001712:	f001 fa89 	bl	8002c28 <HAL_Delay>
			if (HAL_GPIO_ReadPin(key2_exit_GPIO_Port, key2_exit_Pin)
 8001716:	2110      	movs	r1, #16
 8001718:	4807      	ldr	r0, [pc, #28]	@ (8001738 <HAL_GPIO_EXTI_Callback+0x4c>)
 800171a:	f003 f831 	bl	8004780 <HAL_GPIO_ReadPin>
 800171e:	4603      	mov	r3, r0
 8001720:	2b01      	cmp	r3, #1
 8001722:	d103      	bne.n	800172c <HAL_GPIO_EXTI_Callback+0x40>
					== GPIO_PIN_SET) {
				HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 8001724:	2120      	movs	r1, #32
 8001726:	4805      	ldr	r0, [pc, #20]	@ (800173c <HAL_GPIO_EXTI_Callback+0x50>)
 8001728:	f003 f859 	bl	80047de <HAL_GPIO_TogglePin>
			}
		}
		break;
 800172c:	bf00      	nop
	}
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40011800 	.word	0x40011800
 800173c:	40010c00 	.word	0x40010c00

08001740 <GPIO_Hal_USB_Reset>:
 * @brief       ReEnum the usb device to prevent after the download program the usb can't be detected
 * @param       void
 * @retval      NULL
 */
void GPIO_Hal_USB_Reset(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
  	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001754:	4b16      	ldr	r3, [pc, #88]	@ (80017b0 <GPIO_Hal_USB_Reset+0x70>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	4a15      	ldr	r2, [pc, #84]	@ (80017b0 <GPIO_Hal_USB_Reset+0x70>)
 800175a:	f043 0304 	orr.w	r3, r3, #4
 800175e:	6193      	str	r3, [r2, #24]
 8001760:	4b13      	ldr	r3, [pc, #76]	@ (80017b0 <GPIO_Hal_USB_Reset+0x70>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	687b      	ldr	r3, [r7, #4]
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 800176c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001770:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001772:	2301      	movs	r3, #1
 8001774:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2302      	movs	r3, #2
 800177c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f107 0308 	add.w	r3, r7, #8
 8001782:	4619      	mov	r1, r3
 8001784:	480b      	ldr	r0, [pc, #44]	@ (80017b4 <GPIO_Hal_USB_Reset+0x74>)
 8001786:	f002 fe67 	bl	8004458 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001790:	4808      	ldr	r0, [pc, #32]	@ (80017b4 <GPIO_Hal_USB_Reset+0x74>)
 8001792:	f003 f80c 	bl	80047ae <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001796:	2064      	movs	r0, #100	@ 0x64
 8001798:	f001 fa46 	bl	8002c28 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
 800179c:	2201      	movs	r2, #1
 800179e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017a2:	4804      	ldr	r0, [pc, #16]	@ (80017b4 <GPIO_Hal_USB_Reset+0x74>)
 80017a4:	f003 f803 	bl	80047ae <HAL_GPIO_WritePin>
}
 80017a8:	bf00      	nop
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40010800 	.word	0x40010800

080017b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	@ 0x28
 80017bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017be:	f107 0318 	add.w	r3, r7, #24
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017cc:	4b53      	ldr	r3, [pc, #332]	@ (800191c <MX_GPIO_Init+0x164>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a52      	ldr	r2, [pc, #328]	@ (800191c <MX_GPIO_Init+0x164>)
 80017d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b50      	ldr	r3, [pc, #320]	@ (800191c <MX_GPIO_Init+0x164>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e4:	4b4d      	ldr	r3, [pc, #308]	@ (800191c <MX_GPIO_Init+0x164>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a4c      	ldr	r2, [pc, #304]	@ (800191c <MX_GPIO_Init+0x164>)
 80017ea:	f043 0310 	orr.w	r3, r3, #16
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b4a      	ldr	r3, [pc, #296]	@ (800191c <MX_GPIO_Init+0x164>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fc:	4b47      	ldr	r3, [pc, #284]	@ (800191c <MX_GPIO_Init+0x164>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a46      	ldr	r2, [pc, #280]	@ (800191c <MX_GPIO_Init+0x164>)
 8001802:	f043 0304 	orr.w	r3, r3, #4
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b44      	ldr	r3, [pc, #272]	@ (800191c <MX_GPIO_Init+0x164>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001814:	4b41      	ldr	r3, [pc, #260]	@ (800191c <MX_GPIO_Init+0x164>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a40      	ldr	r2, [pc, #256]	@ (800191c <MX_GPIO_Init+0x164>)
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b3e      	ldr	r3, [pc, #248]	@ (800191c <MX_GPIO_Init+0x164>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800182c:	4b3b      	ldr	r3, [pc, #236]	@ (800191c <MX_GPIO_Init+0x164>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4a3a      	ldr	r2, [pc, #232]	@ (800191c <MX_GPIO_Init+0x164>)
 8001832:	f043 0320 	orr.w	r3, r3, #32
 8001836:	6193      	str	r3, [r2, #24]
 8001838:	4b38      	ldr	r3, [pc, #224]	@ (800191c <MX_GPIO_Init+0x164>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0320 	and.w	r3, r3, #32
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8001844:	2200      	movs	r2, #0
 8001846:	2120      	movs	r1, #32
 8001848:	4835      	ldr	r0, [pc, #212]	@ (8001920 <MX_GPIO_Init+0x168>)
 800184a:	f002 ffb0 	bl	80047ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001854:	4833      	ldr	r0, [pc, #204]	@ (8001924 <MX_GPIO_Init+0x16c>)
 8001856:	f002 ffaa 	bl	80047ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 800185a:	2201      	movs	r2, #1
 800185c:	2120      	movs	r1, #32
 800185e:	4831      	ldr	r0, [pc, #196]	@ (8001924 <MX_GPIO_Init+0x16c>)
 8001860:	f002 ffa5 	bl	80047ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = key3_exit_Pin;
 8001864:	2308      	movs	r3, #8
 8001866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING_FALLING;
 8001868:	4b2f      	ldr	r3, [pc, #188]	@ (8001928 <MX_GPIO_Init+0x170>)
 800186a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(key3_exit_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 0318 	add.w	r3, r7, #24
 8001874:	4619      	mov	r1, r3
 8001876:	482a      	ldr	r0, [pc, #168]	@ (8001920 <MX_GPIO_Init+0x168>)
 8001878:	f002 fdee 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = key2_exit_Pin;
 800187c:	2310      	movs	r3, #16
 800187e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001880:	4b2a      	ldr	r3, [pc, #168]	@ (800192c <MX_GPIO_Init+0x174>)
 8001882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(key2_exit_GPIO_Port, &GPIO_InitStruct);
 8001888:	f107 0318 	add.w	r3, r7, #24
 800188c:	4619      	mov	r1, r3
 800188e:	4824      	ldr	r0, [pc, #144]	@ (8001920 <MX_GPIO_Init+0x168>)
 8001890:	f002 fde2 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led2_Pin;
 8001894:	2320      	movs	r3, #32
 8001896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2302      	movs	r3, #2
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(led2_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 0318 	add.w	r3, r7, #24
 80018a8:	4619      	mov	r1, r3
 80018aa:	481d      	ldr	r0, [pc, #116]	@ (8001920 <MX_GPIO_Init+0x168>)
 80018ac:	f002 fdd4 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = key1_Pin;
 80018b0:	2301      	movs	r3, #1
 80018b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018b8:	2302      	movs	r3, #2
 80018ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(key1_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f107 0318 	add.w	r3, r7, #24
 80018c0:	4619      	mov	r1, r3
 80018c2:	481b      	ldr	r0, [pc, #108]	@ (8001930 <MX_GPIO_Init+0x178>)
 80018c4:	f002 fdc8 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 80018c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2302      	movs	r3, #2
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 0318 	add.w	r3, r7, #24
 80018de:	4619      	mov	r1, r3
 80018e0:	4810      	ldr	r0, [pc, #64]	@ (8001924 <MX_GPIO_Init+0x16c>)
 80018e2:	f002 fdb9 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led1_Pin;
 80018e6:	2320      	movs	r3, #32
 80018e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ea:	2301      	movs	r3, #1
 80018ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ee:	2301      	movs	r3, #1
 80018f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2302      	movs	r3, #2
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(led1_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 0318 	add.w	r3, r7, #24
 80018fa:	4619      	mov	r1, r3
 80018fc:	4809      	ldr	r0, [pc, #36]	@ (8001924 <MX_GPIO_Init+0x16c>)
 80018fe:	f002 fdab 	bl	8004458 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 4, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2104      	movs	r1, #4
 8001906:	200a      	movs	r0, #10
 8001908:	f001 ff0b 	bl	8003722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800190c:	200a      	movs	r0, #10
 800190e:	f001 ff24 	bl	800375a <HAL_NVIC_EnableIRQ>

}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	@ 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	40011800 	.word	0x40011800
 8001924:	40010c00 	.word	0x40010c00
 8001928:	10320000 	.word	0x10320000
 800192c:	10110000 	.word	0x10110000
 8001930:	40010800 	.word	0x40010800

08001934 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001938:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <MX_I2C1_Init+0x50>)
 800193a:	4a13      	ldr	r2, [pc, #76]	@ (8001988 <MX_I2C1_Init+0x54>)
 800193c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800193e:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <MX_I2C1_Init+0x50>)
 8001940:	4a12      	ldr	r2, [pc, #72]	@ (800198c <MX_I2C1_Init+0x58>)
 8001942:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001944:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <MX_I2C1_Init+0x50>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800194a:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <MX_I2C1_Init+0x50>)
 800194c:	2200      	movs	r2, #0
 800194e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001950:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <MX_I2C1_Init+0x50>)
 8001952:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001956:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001958:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <MX_I2C1_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <MX_I2C1_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001964:	4b07      	ldr	r3, [pc, #28]	@ (8001984 <MX_I2C1_Init+0x50>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800196a:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <MX_I2C1_Init+0x50>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001970:	4804      	ldr	r0, [pc, #16]	@ (8001984 <MX_I2C1_Init+0x50>)
 8001972:	f002 ff65 	bl	8004840 <HAL_I2C_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800197c:	f000 f90c 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000530 	.word	0x20000530
 8001988:	40005400 	.word	0x40005400
 800198c:	000186a0 	.word	0x000186a0

08001990 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a15      	ldr	r2, [pc, #84]	@ (8001a00 <HAL_I2C_MspInit+0x70>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d123      	bne.n	80019f8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b0:	4b14      	ldr	r3, [pc, #80]	@ (8001a04 <HAL_I2C_MspInit+0x74>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	4a13      	ldr	r2, [pc, #76]	@ (8001a04 <HAL_I2C_MspInit+0x74>)
 80019b6:	f043 0308 	orr.w	r3, r3, #8
 80019ba:	6193      	str	r3, [r2, #24]
 80019bc:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <HAL_I2C_MspInit+0x74>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019c8:	23c0      	movs	r3, #192	@ 0xc0
 80019ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019cc:	2312      	movs	r3, #18
 80019ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	4619      	mov	r1, r3
 80019da:	480b      	ldr	r0, [pc, #44]	@ (8001a08 <HAL_I2C_MspInit+0x78>)
 80019dc:	f002 fd3c 	bl	8004458 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019e0:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <HAL_I2C_MspInit+0x74>)
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	4a07      	ldr	r2, [pc, #28]	@ (8001a04 <HAL_I2C_MspInit+0x74>)
 80019e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019ea:	61d3      	str	r3, [r2, #28]
 80019ec:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <HAL_I2C_MspInit+0x74>)
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80019f8:	bf00      	nop
 80019fa:	3720      	adds	r7, #32
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40005400 	.word	0x40005400
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40010c00 	.word	0x40010c00

08001a0c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001a10:	4b09      	ldr	r3, [pc, #36]	@ (8001a38 <MX_IWDG_Init+0x2c>)
 8001a12:	4a0a      	ldr	r2, [pc, #40]	@ (8001a3c <MX_IWDG_Init+0x30>)
 8001a14:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001a16:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <MX_IWDG_Init+0x2c>)
 8001a18:	2204      	movs	r2, #4
 8001a1a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1250;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <MX_IWDG_Init+0x2c>)
 8001a1e:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8001a22:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001a24:	4804      	ldr	r0, [pc, #16]	@ (8001a38 <MX_IWDG_Init+0x2c>)
 8001a26:	f003 f84f 	bl	8004ac8 <HAL_IWDG_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001a30:	f000 f8b2 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000584 	.word	0x20000584
 8001a3c:	40003000 	.word	0x40003000

08001a40 <IWDG_Hal_Test>:

/* USER CODE BEGIN 1 */

void IWDG_Hal_Test(){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0

//    printf("\n\r Refreshes the IWDG !!!\n\r");
    HAL_IWDG_Refresh(&hiwdg);
 8001a44:	4802      	ldr	r0, [pc, #8]	@ (8001a50 <IWDG_Hal_Test+0x10>)
 8001a46:	f003 f881 	bl	8004b4c <HAL_IWDG_Refresh>
//    HAL_Delay(800);

}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000584 	.word	0x20000584

08001a54 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a58:	f001 f884 	bl	8002b64 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a5c:	f000 f836 	bl	8001acc <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	GPIO_Hal_USB_Reset();
 8001a60:	f7ff fe6e 	bl	8001740 <GPIO_Hal_USB_Reset>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a64:	f7ff fea8 	bl	80017b8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001a68:	f7ff fdf6 	bl	8001658 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001a6c:	f000 ff5a 	bl	8002924 <MX_USART2_UART_Init>
	MX_USB_DEVICE_Init();
 8001a70:	f00c f9ae 	bl	800ddd0 <MX_USB_DEVICE_Init>
	MX_I2C1_Init();
 8001a74:	f7ff ff5e 	bl	8001934 <MX_I2C1_Init>
	MX_CRC_Init();
 8001a78:	f7ff fcca 	bl	8001410 <MX_CRC_Init>
	MX_SPI2_Init();
 8001a7c:	f000 f908 	bl	8001c90 <MX_SPI2_Init>
	MX_RTC_Init();
 8001a80:	f000 f890 	bl	8001ba4 <MX_RTC_Init>
	MX_DAC_Init();
 8001a84:	f7ff fcf6 	bl	8001474 <MX_DAC_Init>
	MX_TIM2_Init();
 8001a88:	f000 fb7a 	bl	8002180 <MX_TIM2_Init>
	MX_TIM4_Init();
 8001a8c:	f000 fc18 	bl	80022c0 <MX_TIM4_Init>
	MX_ADC1_Init();
 8001a90:	f7ff fb6a 	bl	8001168 <MX_ADC1_Init>
	MX_TIM3_Init();
 8001a94:	f000 fbc4 	bl	8002220 <MX_TIM3_Init>
	MX_TIM1_Init();
 8001a98:	f000 fb22 	bl	80020e0 <MX_TIM1_Init>
	MX_IWDG_Init();
 8001a9c:	f7ff ffb6 	bl	8001a0c <MX_IWDG_Init>
	MX_TIM5_Init();
 8001aa0:	f000 fca6 	bl	80023f0 <MX_TIM5_Init>
	/* USER CODE BEGIN 2 */

	printf("hello every one this is template to test!\n");
 8001aa4:	4808      	ldr	r0, [pc, #32]	@ (8001ac8 <main+0x74>)
 8001aa6:	f00d fda7 	bl	800f5f8 <puts>
	USART_Hal_Test();  //little test usart
 8001aaa:	f001 f82b 	bl	8002b04 <USART_Hal_Test>
//	I2C_Hal_Test();    //little test i2c
//	SPI_Hal_Test();    //little test spi
//	CRC_Hal_Test();    //little test crc
	DAC_Hal_Test();	   //little test dac
 8001aae:	f7ff fdb7 	bl	8001620 <DAC_Hal_Test>
	PWM_Hal_Test();
 8001ab2:	f000 fe61 	bl	8002778 <PWM_Hal_Test>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		IWDG_Hal_Test();//little test IWDG,if we don't reflash this fun in setting time ,the iwdg will reboot the sys
 8001ab6:	f7ff ffc3 	bl	8001a40 <IWDG_Hal_Test>
		//	GPIO_Hal_Test(); 	//little test the GPIO in key and led on the board
		//  USB_CDC_Hal_Test(); //little test the CDC USB
		//	RTC_Hal_Test();
		ADC_DMA_Hal_Test();
 8001aba:	f7ff fc27 	bl	800130c <ADC_DMA_Hal_Test>
		PWMCapture_DMA_Hal_Test();
 8001abe:	f000 fe6f 	bl	80027a0 <PWMCapture_DMA_Hal_Test>
		IWDG_Hal_Test();//little test IWDG,if we don't reflash this fun in setting time ,the iwdg will reboot the sys
 8001ac2:	bf00      	nop
 8001ac4:	e7f7      	b.n	8001ab6 <main+0x62>
 8001ac6:	bf00      	nop
 8001ac8:	08012f18 	.word	0x08012f18

08001acc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b096      	sub	sp, #88	@ 0x58
 8001ad0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001ad2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ad6:	2228      	movs	r2, #40	@ 0x28
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f00d fe8c 	bl	800f7f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	611a      	str	r2, [r3, #16]
 8001afe:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8001b00:	230d      	movs	r3, #13
 8001b02:	633b      	str	r3, [r7, #48]	@ 0x30
			| RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b08:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b12:	2301      	movs	r3, #1
 8001b14:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b16:	2301      	movs	r3, #1
 8001b18:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b22:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b24:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001b28:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001b2a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f004 fd94 	bl	800665c <HAL_RCC_OscConfig>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <SystemClock_Config+0x72>
		Error_Handler();
 8001b3a:	f000 f82d 	bl	8001b98 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001b3e:	230f      	movs	r3, #15
 8001b40:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b42:	2302      	movs	r3, #2
 8001b44:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	2102      	movs	r1, #2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f005 f800 	bl	8006b60 <HAL_RCC_ClockConfig>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <SystemClock_Config+0x9e>
		Error_Handler();
 8001b66:	f000 f817 	bl	8001b98 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_ADC
 8001b6a:	2313      	movs	r3, #19
 8001b6c:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_USB;
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b72:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001b74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b78:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	4618      	mov	r0, r3
 8001b82:	f005 f97b 	bl	8006e7c <HAL_RCCEx_PeriphCLKConfig>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <SystemClock_Config+0xc4>
		Error_Handler();
 8001b8c:	f000 f804 	bl	8001b98 <Error_Handler>
	}
}
 8001b90:	bf00      	nop
 8001b92:	3758      	adds	r7, #88	@ 0x58
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b9c:	b672      	cpsid	i
}
 8001b9e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <Error_Handler+0x8>

08001ba4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	2100      	movs	r1, #0
 8001bae:	460a      	mov	r2, r1
 8001bb0:	801a      	strh	r2, [r3, #0]
 8001bb2:	460a      	mov	r2, r1
 8001bb4:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bba:	4b1d      	ldr	r3, [pc, #116]	@ (8001c30 <MX_RTC_Init+0x8c>)
 8001bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c34 <MX_RTC_Init+0x90>)
 8001bbe:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c30 <MX_RTC_Init+0x8c>)
 8001bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc6:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8001bc8:	4b19      	ldr	r3, [pc, #100]	@ (8001c30 <MX_RTC_Init+0x8c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bce:	4818      	ldr	r0, [pc, #96]	@ (8001c30 <MX_RTC_Init+0x8c>)
 8001bd0:	f005 fae2 	bl	8007198 <HAL_RTC_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8001bda:	f7ff ffdd 	bl	8001b98 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x22;
 8001bde:	2322      	movs	r3, #34	@ 0x22
 8001be0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x10;
 8001be2:	2310      	movs	r3, #16
 8001be4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	2201      	movs	r2, #1
 8001bee:	4619      	mov	r1, r3
 8001bf0:	480f      	ldr	r0, [pc, #60]	@ (8001c30 <MX_RTC_Init+0x8c>)
 8001bf2:	f005 fb5d 	bl	80072b0 <HAL_RTC_SetTime>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001bfc:	f7ff ffcc 	bl	8001b98 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001c00:	2305      	movs	r3, #5
 8001c02:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_AUGUST;
 8001c04:	2308      	movs	r3, #8
 8001c06:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x16;
 8001c08:	2316      	movs	r3, #22
 8001c0a:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x24;
 8001c0c:	2324      	movs	r3, #36	@ 0x24
 8001c0e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001c10:	463b      	mov	r3, r7
 8001c12:	2201      	movs	r2, #1
 8001c14:	4619      	mov	r1, r3
 8001c16:	4806      	ldr	r0, [pc, #24]	@ (8001c30 <MX_RTC_Init+0x8c>)
 8001c18:	f005 fbe2 	bl	80073e0 <HAL_RTC_SetDate>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001c22:	f7ff ffb9 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000590 	.word	0x20000590
 8001c34:	40002800 	.word	0x40002800

08001c38 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0f      	ldr	r2, [pc, #60]	@ (8001c84 <HAL_RTC_MspInit+0x4c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d118      	bne.n	8001c7c <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001c4a:	f004 fcfb 	bl	8006644 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c88 <HAL_RTC_MspInit+0x50>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	4a0d      	ldr	r2, [pc, #52]	@ (8001c88 <HAL_RTC_MspInit+0x50>)
 8001c54:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001c58:	61d3      	str	r3, [r2, #28]
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <HAL_RTC_MspInit+0x50>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c66:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <HAL_RTC_MspInit+0x54>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2100      	movs	r1, #0
 8001c70:	2003      	movs	r0, #3
 8001c72:	f001 fd56 	bl	8003722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001c76:	2003      	movs	r0, #3
 8001c78:	f001 fd6f 	bl	800375a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40002800 	.word	0x40002800
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	4242043c 	.word	0x4242043c

08001c90 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001c94:	4b17      	ldr	r3, [pc, #92]	@ (8001cf4 <MX_SPI2_Init+0x64>)
 8001c96:	4a18      	ldr	r2, [pc, #96]	@ (8001cf8 <MX_SPI2_Init+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c9a:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <MX_SPI2_Init+0x64>)
 8001c9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ca0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ca2:	4b14      	ldr	r3, [pc, #80]	@ (8001cf4 <MX_SPI2_Init+0x64>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ca8:	4b12      	ldr	r3, [pc, #72]	@ (8001cf4 <MX_SPI2_Init+0x64>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cae:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <MX_SPI2_Init+0x64>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf4 <MX_SPI2_Init+0x64>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001cba:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf4 <MX_SPI2_Init+0x64>)
 8001cbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cc0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf4 <MX_SPI2_Init+0x64>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf4 <MX_SPI2_Init+0x64>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cce:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <MX_SPI2_Init+0x64>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cd4:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <MX_SPI2_Init+0x64>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <MX_SPI2_Init+0x64>)
 8001cdc:	220a      	movs	r2, #10
 8001cde:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ce0:	4804      	ldr	r0, [pc, #16]	@ (8001cf4 <MX_SPI2_Init+0x64>)
 8001ce2:	f005 fe26 	bl	8007932 <HAL_SPI_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001cec:	f7ff ff54 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	200005a4 	.word	0x200005a4
 8001cf8:	40003800 	.word	0x40003800

08001cfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0310 	add.w	r3, r7, #16
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1c      	ldr	r2, [pc, #112]	@ (8001d88 <HAL_SPI_MspInit+0x8c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d131      	bne.n	8001d80 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d8c <HAL_SPI_MspInit+0x90>)
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	4a1a      	ldr	r2, [pc, #104]	@ (8001d8c <HAL_SPI_MspInit+0x90>)
 8001d22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d26:	61d3      	str	r3, [r2, #28]
 8001d28:	4b18      	ldr	r3, [pc, #96]	@ (8001d8c <HAL_SPI_MspInit+0x90>)
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d34:	4b15      	ldr	r3, [pc, #84]	@ (8001d8c <HAL_SPI_MspInit+0x90>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	4a14      	ldr	r2, [pc, #80]	@ (8001d8c <HAL_SPI_MspInit+0x90>)
 8001d3a:	f043 0308 	orr.w	r3, r3, #8
 8001d3e:	6193      	str	r3, [r2, #24]
 8001d40:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <HAL_SPI_MspInit+0x90>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001d4c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001d50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5a:	f107 0310 	add.w	r3, r7, #16
 8001d5e:	4619      	mov	r1, r3
 8001d60:	480b      	ldr	r0, [pc, #44]	@ (8001d90 <HAL_SPI_MspInit+0x94>)
 8001d62:	f002 fb79 	bl	8004458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d66:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d74:	f107 0310 	add.w	r3, r7, #16
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4805      	ldr	r0, [pc, #20]	@ (8001d90 <HAL_SPI_MspInit+0x94>)
 8001d7c:	f002 fb6c 	bl	8004458 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001d80:	bf00      	nop
 8001d82:	3720      	adds	r7, #32
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40003800 	.word	0x40003800
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40010c00 	.word	0x40010c00

08001d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e0c <HAL_MspInit+0x78>)
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	4a1b      	ldr	r2, [pc, #108]	@ (8001e0c <HAL_MspInit+0x78>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6193      	str	r3, [r2, #24]
 8001da6:	4b19      	ldr	r3, [pc, #100]	@ (8001e0c <HAL_MspInit+0x78>)
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	4b16      	ldr	r3, [pc, #88]	@ (8001e0c <HAL_MspInit+0x78>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	4a15      	ldr	r2, [pc, #84]	@ (8001e0c <HAL_MspInit+0x78>)
 8001db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dbc:	61d3      	str	r3, [r2, #28]
 8001dbe:	4b13      	ldr	r3, [pc, #76]	@ (8001e0c <HAL_MspInit+0x78>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2101      	movs	r1, #1
 8001dce:	f06f 0001 	mvn.w	r0, #1
 8001dd2:	f001 fca6 	bl	8003722 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2005      	movs	r0, #5
 8001ddc:	f001 fca1 	bl	8003722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001de0:	2005      	movs	r0, #5
 8001de2:	f001 fcba 	bl	800375a <HAL_NVIC_EnableIRQ>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8001de6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <HAL_MspInit+0x7c>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	4a04      	ldr	r2, [pc, #16]	@ (8001e10 <HAL_MspInit+0x7c>)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40010000 	.word	0x40010000

08001e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <NMI_Handler+0x4>

08001e1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <HardFault_Handler+0x4>

08001e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <MemManage_Handler+0x4>

08001e2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <BusFault_Handler+0x4>

08001e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <UsageFault_Handler+0x4>

08001e3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e64:	f000 fec4 	bl	8002bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8001e70:	4802      	ldr	r0, [pc, #8]	@ (8001e7c <RTC_IRQHandler+0x10>)
 8001e72:	f005 fd15 	bl	80078a0 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000590 	.word	0x20000590

08001e80 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(key2_exit_Pin);
 8001e90:	2010      	movs	r0, #16
 8001e92:	f002 fcbd 	bl	8004810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ea0:	4802      	ldr	r0, [pc, #8]	@ (8001eac <DMA1_Channel1_IRQHandler+0x10>)
 8001ea2:	f002 f86f 	bl	8003f84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000448 	.word	0x20000448

08001eb0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8001eb4:	4802      	ldr	r0, [pc, #8]	@ (8001ec0 <DMA1_Channel4_IRQHandler+0x10>)
 8001eb6:	f002 f865 	bl	8003f84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000778 	.word	0x20000778

08001ec4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8001ec8:	4802      	ldr	r0, [pc, #8]	@ (8001ed4 <DMA1_Channel5_IRQHandler+0x10>)
 8001eca:	f002 f85b 	bl	8003f84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200007bc 	.word	0x200007bc

08001ed8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001edc:	4802      	ldr	r0, [pc, #8]	@ (8001ee8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001ede:	f002 ff69 	bl	8004db4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000161c 	.word	0x2000161c

08001eec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ef0:	4802      	ldr	r0, [pc, #8]	@ (8001efc <TIM4_IRQHandler+0x10>)
 8001ef2:	f006 f94f 	bl	8008194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200006e8 	.word	0x200006e8

08001f00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f04:	4802      	ldr	r0, [pc, #8]	@ (8001f10 <USART2_IRQHandler+0x10>)
 8001f06:	f007 faf1 	bl	80094ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000908 	.word	0x20000908

08001f14 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f18:	4802      	ldr	r0, [pc, #8]	@ (8001f24 <TIM5_IRQHandler+0x10>)
 8001f1a:	f006 f93b 	bl	8008194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000730 	.word	0x20000730

08001f28 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001f2c:	4802      	ldr	r0, [pc, #8]	@ (8001f38 <DMA2_Channel3_IRQHandler+0x10>)
 8001f2e:	f002 f829 	bl	8003f84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	200004a8 	.word	0x200004a8

08001f3c <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8001f40:	4802      	ldr	r0, [pc, #8]	@ (8001f4c <DMA2_Channel4_5_IRQHandler+0x10>)
 8001f42:	f002 f81f 	bl	8003f84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200004ec 	.word	0x200004ec

08001f50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return 1;
 8001f54:	2301      	movs	r3, #1
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr

08001f5e <_kill>:

int _kill(int pid, int sig)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f68:	f00d fc98 	bl	800f89c <__errno>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2216      	movs	r2, #22
 8001f70:	601a      	str	r2, [r3, #0]
  return -1;
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <_exit>:

void _exit (int status)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f86:	f04f 31ff 	mov.w	r1, #4294967295
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ffe7 	bl	8001f5e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f90:	bf00      	nop
 8001f92:	e7fd      	b.n	8001f90 <_exit+0x12>

08001f94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	e00a      	b.n	8001fbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fa6:	f3af 8000 	nop.w
 8001faa:	4601      	mov	r1, r0
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	60ba      	str	r2, [r7, #8]
 8001fb2:	b2ca      	uxtb	r2, r1
 8001fb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	dbf0      	blt.n	8001fa6 <_read+0x12>
  }

  return len;
 8001fc4:	687b      	ldr	r3, [r7, #4]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	e009      	b.n	8001ff4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	60ba      	str	r2, [r7, #8]
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 fc89 	bl	8002900 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	dbf1      	blt.n	8001fe0 <_write+0x12>
  }
  return len;
 8001ffc:	687b      	ldr	r3, [r7, #4]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <_close>:

int _close(int file)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800202c:	605a      	str	r2, [r3, #4]
  return 0;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr

0800203a <_isatty>:

int _isatty(int file)
{
 800203a:	b480      	push	{r7}
 800203c:	b083      	sub	sp, #12
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002042:	2301      	movs	r3, #1
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr

0800204e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800204e:	b480      	push	{r7}
 8002050:	b085      	sub	sp, #20
 8002052:	af00      	add	r7, sp, #0
 8002054:	60f8      	str	r0, [r7, #12]
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
	...

08002068 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002070:	4a14      	ldr	r2, [pc, #80]	@ (80020c4 <_sbrk+0x5c>)
 8002072:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <_sbrk+0x60>)
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800207c:	4b13      	ldr	r3, [pc, #76]	@ (80020cc <_sbrk+0x64>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d102      	bne.n	800208a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002084:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <_sbrk+0x64>)
 8002086:	4a12      	ldr	r2, [pc, #72]	@ (80020d0 <_sbrk+0x68>)
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800208a:	4b10      	ldr	r3, [pc, #64]	@ (80020cc <_sbrk+0x64>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	429a      	cmp	r2, r3
 8002096:	d207      	bcs.n	80020a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002098:	f00d fc00 	bl	800f89c <__errno>
 800209c:	4603      	mov	r3, r0
 800209e:	220c      	movs	r2, #12
 80020a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020a2:	f04f 33ff 	mov.w	r3, #4294967295
 80020a6:	e009      	b.n	80020bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a8:	4b08      	ldr	r3, [pc, #32]	@ (80020cc <_sbrk+0x64>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ae:	4b07      	ldr	r3, [pc, #28]	@ (80020cc <_sbrk+0x64>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4413      	add	r3, r2
 80020b6:	4a05      	ldr	r2, [pc, #20]	@ (80020cc <_sbrk+0x64>)
 80020b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ba:	68fb      	ldr	r3, [r7, #12]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20010000 	.word	0x20010000
 80020c8:	00000400 	.word	0x00000400
 80020cc:	200005fc 	.word	0x200005fc
 80020d0:	20001c78 	.word	0x20001c78

080020d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim4_ch2;
DMA_HandleTypeDef hdma_tim4_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020e6:	f107 0308 	add.w	r3, r7, #8
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f4:	463b      	mov	r3, r7
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002178 <MX_TIM1_Init+0x98>)
 80020fe:	4a1f      	ldr	r2, [pc, #124]	@ (800217c <MX_TIM1_Init+0x9c>)
 8002100:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002102:	4b1d      	ldr	r3, [pc, #116]	@ (8002178 <MX_TIM1_Init+0x98>)
 8002104:	2200      	movs	r2, #0
 8002106:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002108:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <MX_TIM1_Init+0x98>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800210e:	4b1a      	ldr	r3, [pc, #104]	@ (8002178 <MX_TIM1_Init+0x98>)
 8002110:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002114:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002116:	4b18      	ldr	r3, [pc, #96]	@ (8002178 <MX_TIM1_Init+0x98>)
 8002118:	2200      	movs	r2, #0
 800211a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800211c:	4b16      	ldr	r3, [pc, #88]	@ (8002178 <MX_TIM1_Init+0x98>)
 800211e:	2200      	movs	r2, #0
 8002120:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002122:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <MX_TIM1_Init+0x98>)
 8002124:	2200      	movs	r2, #0
 8002126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002128:	4813      	ldr	r0, [pc, #76]	@ (8002178 <MX_TIM1_Init+0x98>)
 800212a:	f005 fc86 	bl	8007a3a <HAL_TIM_Base_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002134:	f7ff fd30 	bl	8001b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002138:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800213c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800213e:	f107 0308 	add.w	r3, r7, #8
 8002142:	4619      	mov	r1, r3
 8002144:	480c      	ldr	r0, [pc, #48]	@ (8002178 <MX_TIM1_Init+0x98>)
 8002146:	f006 fa8b 	bl	8008660 <HAL_TIM_ConfigClockSource>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002150:	f7ff fd22 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002154:	2300      	movs	r3, #0
 8002156:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800215c:	463b      	mov	r3, r7
 800215e:	4619      	mov	r1, r3
 8002160:	4805      	ldr	r0, [pc, #20]	@ (8002178 <MX_TIM1_Init+0x98>)
 8002162:	f007 f84d 	bl	8009200 <HAL_TIMEx_MasterConfigSynchronization>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800216c:	f7ff fd14 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002170:	bf00      	nop
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000610 	.word	0x20000610
 800217c:	40012c00 	.word	0x40012c00

08002180 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002186:	f107 0308 	add.w	r3, r7, #8
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002194:	463b      	mov	r3, r7
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800219c:	4b1f      	ldr	r3, [pc, #124]	@ (800221c <MX_TIM2_Init+0x9c>)
 800219e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021a4:	4b1d      	ldr	r3, [pc, #116]	@ (800221c <MX_TIM2_Init+0x9c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021aa:	4b1c      	ldr	r3, [pc, #112]	@ (800221c <MX_TIM2_Init+0x9c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80021b0:	4b1a      	ldr	r3, [pc, #104]	@ (800221c <MX_TIM2_Init+0x9c>)
 80021b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b8:	4b18      	ldr	r3, [pc, #96]	@ (800221c <MX_TIM2_Init+0x9c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021be:	4b17      	ldr	r3, [pc, #92]	@ (800221c <MX_TIM2_Init+0x9c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021c4:	4815      	ldr	r0, [pc, #84]	@ (800221c <MX_TIM2_Init+0x9c>)
 80021c6:	f005 fc38 	bl	8007a3a <HAL_TIM_Base_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80021d0:	f7ff fce2 	bl	8001b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021da:	f107 0308 	add.w	r3, r7, #8
 80021de:	4619      	mov	r1, r3
 80021e0:	480e      	ldr	r0, [pc, #56]	@ (800221c <MX_TIM2_Init+0x9c>)
 80021e2:	f006 fa3d 	bl	8008660 <HAL_TIM_ConfigClockSource>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80021ec:	f7ff fcd4 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021f0:	2320      	movs	r3, #32
 80021f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021f8:	463b      	mov	r3, r7
 80021fa:	4619      	mov	r1, r3
 80021fc:	4807      	ldr	r0, [pc, #28]	@ (800221c <MX_TIM2_Init+0x9c>)
 80021fe:	f006 ffff 	bl	8009200 <HAL_TIMEx_MasterConfigSynchronization>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002208:	f7ff fcc6 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
	HAL_TIM_Base_Start(&htim2);
 800220c:	4803      	ldr	r0, [pc, #12]	@ (800221c <MX_TIM2_Init+0x9c>)
 800220e:	f005 fc63 	bl	8007ad8 <HAL_TIM_Base_Start>
  /* USER CODE END TIM2_Init 2 */

}
 8002212:	bf00      	nop
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000658 	.word	0x20000658

08002220 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002226:	f107 0308 	add.w	r3, r7, #8
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	609a      	str	r2, [r3, #8]
 8002232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002234:	463b      	mov	r3, r7
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800223c:	4b1e      	ldr	r3, [pc, #120]	@ (80022b8 <MX_TIM3_Init+0x98>)
 800223e:	4a1f      	ldr	r2, [pc, #124]	@ (80022bc <MX_TIM3_Init+0x9c>)
 8002240:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8002242:	4b1d      	ldr	r3, [pc, #116]	@ (80022b8 <MX_TIM3_Init+0x98>)
 8002244:	2263      	movs	r2, #99	@ 0x63
 8002246:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002248:	4b1b      	ldr	r3, [pc, #108]	@ (80022b8 <MX_TIM3_Init+0x98>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800224e:	4b1a      	ldr	r3, [pc, #104]	@ (80022b8 <MX_TIM3_Init+0x98>)
 8002250:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002254:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002256:	4b18      	ldr	r3, [pc, #96]	@ (80022b8 <MX_TIM3_Init+0x98>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800225c:	4b16      	ldr	r3, [pc, #88]	@ (80022b8 <MX_TIM3_Init+0x98>)
 800225e:	2280      	movs	r2, #128	@ 0x80
 8002260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002262:	4815      	ldr	r0, [pc, #84]	@ (80022b8 <MX_TIM3_Init+0x98>)
 8002264:	f005 fbe9 	bl	8007a3a <HAL_TIM_Base_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800226e:	f7ff fc93 	bl	8001b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002272:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002276:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002278:	f107 0308 	add.w	r3, r7, #8
 800227c:	4619      	mov	r1, r3
 800227e:	480e      	ldr	r0, [pc, #56]	@ (80022b8 <MX_TIM3_Init+0x98>)
 8002280:	f006 f9ee 	bl	8008660 <HAL_TIM_ConfigClockSource>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800228a:	f7ff fc85 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800228e:	2320      	movs	r3, #32
 8002290:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002292:	2300      	movs	r3, #0
 8002294:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002296:	463b      	mov	r3, r7
 8002298:	4619      	mov	r1, r3
 800229a:	4807      	ldr	r0, [pc, #28]	@ (80022b8 <MX_TIM3_Init+0x98>)
 800229c:	f006 ffb0 	bl	8009200 <HAL_TIMEx_MasterConfigSynchronization>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80022a6:	f7ff fc77 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
	HAL_TIM_Base_Start(&htim3);
 80022aa:	4803      	ldr	r0, [pc, #12]	@ (80022b8 <MX_TIM3_Init+0x98>)
 80022ac:	f005 fc14 	bl	8007ad8 <HAL_TIM_Base_Start>
  /* USER CODE END TIM3_Init 2 */

}
 80022b0:	bf00      	nop
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	200006a0 	.word	0x200006a0
 80022bc:	40000400 	.word	0x40000400

080022c0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	@ 0x28
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022c6:	f107 0318 	add.w	r3, r7, #24
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d4:	f107 0310 	add.w	r3, r7, #16
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022de:	463b      	mov	r3, r7
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022ea:	4b3d      	ldr	r3, [pc, #244]	@ (80023e0 <MX_TIM4_Init+0x120>)
 80022ec:	4a3d      	ldr	r2, [pc, #244]	@ (80023e4 <MX_TIM4_Init+0x124>)
 80022ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80022f0:	4b3b      	ldr	r3, [pc, #236]	@ (80023e0 <MX_TIM4_Init+0x120>)
 80022f2:	2247      	movs	r2, #71	@ 0x47
 80022f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f6:	4b3a      	ldr	r3, [pc, #232]	@ (80023e0 <MX_TIM4_Init+0x120>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80022fc:	4b38      	ldr	r3, [pc, #224]	@ (80023e0 <MX_TIM4_Init+0x120>)
 80022fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002302:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002304:	4b36      	ldr	r3, [pc, #216]	@ (80023e0 <MX_TIM4_Init+0x120>)
 8002306:	2200      	movs	r2, #0
 8002308:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800230a:	4b35      	ldr	r3, [pc, #212]	@ (80023e0 <MX_TIM4_Init+0x120>)
 800230c:	2280      	movs	r2, #128	@ 0x80
 800230e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002310:	4833      	ldr	r0, [pc, #204]	@ (80023e0 <MX_TIM4_Init+0x120>)
 8002312:	f005 fb92 	bl	8007a3a <HAL_TIM_Base_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 800231c:	f7ff fc3c 	bl	8001b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002320:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002324:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002326:	f107 0318 	add.w	r3, r7, #24
 800232a:	4619      	mov	r1, r3
 800232c:	482c      	ldr	r0, [pc, #176]	@ (80023e0 <MX_TIM4_Init+0x120>)
 800232e:	f006 f997 	bl	8008660 <HAL_TIM_ConfigClockSource>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002338:	f7ff fc2e 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800233c:	4828      	ldr	r0, [pc, #160]	@ (80023e0 <MX_TIM4_Init+0x120>)
 800233e:	f005 fd35 	bl	8007dac <HAL_TIM_IC_Init>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002348:	f7ff fc26 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800234c:	2320      	movs	r3, #32
 800234e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002354:	f107 0310 	add.w	r3, r7, #16
 8002358:	4619      	mov	r1, r3
 800235a:	4821      	ldr	r0, [pc, #132]	@ (80023e0 <MX_TIM4_Init+0x120>)
 800235c:	f006 ff50 	bl	8009200 <HAL_TIMEx_MasterConfigSynchronization>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8002366:	f7ff fc17 	bl	8001b98 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800236a:	2300      	movs	r3, #0
 800236c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800236e:	2301      	movs	r3, #1
 8002370:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 8;
 8002376:	2308      	movs	r3, #8
 8002378:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800237a:	463b      	mov	r3, r7
 800237c:	2204      	movs	r2, #4
 800237e:	4619      	mov	r1, r3
 8002380:	4817      	ldr	r0, [pc, #92]	@ (80023e0 <MX_TIM4_Init+0x120>)
 8002382:	f006 f80f 	bl	80083a4 <HAL_TIM_IC_ConfigChannel>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 800238c:	f7ff fc04 	bl	8001b98 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002390:	2302      	movs	r3, #2
 8002392:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002394:	463b      	mov	r3, r7
 8002396:	2208      	movs	r2, #8
 8002398:	4619      	mov	r1, r3
 800239a:	4811      	ldr	r0, [pc, #68]	@ (80023e0 <MX_TIM4_Init+0x120>)
 800239c:	f006 f802 	bl	80083a4 <HAL_TIM_IC_ConfigChannel>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 80023a6:	f7ff fbf7 	bl	8001b98 <Error_Handler>
  /* USER CODE BEGIN TIM4_Init 2 */

//    HAL_TIM_Base_Start_IT(&htim4);
//	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);

	if (HAL_TIM_IC_Start_DMA(&htim4, TIM_CHANNEL_2, (uint32_t*) &ICP_val_buf[0],
 80023aa:	2304      	movs	r3, #4
 80023ac:	4a0e      	ldr	r2, [pc, #56]	@ (80023e8 <MX_TIM4_Init+0x128>)
 80023ae:	2104      	movs	r1, #4
 80023b0:	480b      	ldr	r0, [pc, #44]	@ (80023e0 <MX_TIM4_Init+0x120>)
 80023b2:	f005 fd53 	bl	8007e5c <HAL_TIM_IC_Start_DMA>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM4_Init+0x100>
			ICP_BUF_SIZE) != HAL_OK)
	{
		/* Start Conversation Error */
		Error_Handler();
 80023bc:	f7ff fbec 	bl	8001b98 <Error_Handler>
	}
	if (HAL_TIM_IC_Start_DMA(&htim4, TIM_CHANNEL_3, (uint32_t*) &ICP_val_buf[1],
 80023c0:	2304      	movs	r3, #4
 80023c2:	4a0a      	ldr	r2, [pc, #40]	@ (80023ec <MX_TIM4_Init+0x12c>)
 80023c4:	2108      	movs	r1, #8
 80023c6:	4806      	ldr	r0, [pc, #24]	@ (80023e0 <MX_TIM4_Init+0x120>)
 80023c8:	f005 fd48 	bl	8007e5c <HAL_TIM_IC_Start_DMA>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_TIM4_Init+0x116>
			ICP_BUF_SIZE) != HAL_OK)
	{
		/* Start Conversation Error */
		Error_Handler();
 80023d2:	f7ff fbe1 	bl	8001b98 <Error_Handler>
	}
  /* USER CODE END TIM4_Init 2 */

}
 80023d6:	bf00      	nop
 80023d8:	3728      	adds	r7, #40	@ 0x28
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	200006e8 	.word	0x200006e8
 80023e4:	40000800 	.word	0x40000800
 80023e8:	20000600 	.word	0x20000600
 80023ec:	20000608 	.word	0x20000608

080023f0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08e      	sub	sp, #56	@ 0x38
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	605a      	str	r2, [r3, #4]
 8002400:	609a      	str	r2, [r3, #8]
 8002402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002404:	f107 0320 	add.w	r3, r7, #32
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
 800241c:	615a      	str	r2, [r3, #20]
 800241e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002420:	4b2e      	ldr	r3, [pc, #184]	@ (80024dc <MX_TIM5_Init+0xec>)
 8002422:	4a2f      	ldr	r2, [pc, #188]	@ (80024e0 <MX_TIM5_Init+0xf0>)
 8002424:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 71;
 8002426:	4b2d      	ldr	r3, [pc, #180]	@ (80024dc <MX_TIM5_Init+0xec>)
 8002428:	2247      	movs	r2, #71	@ 0x47
 800242a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242c:	4b2b      	ldr	r3, [pc, #172]	@ (80024dc <MX_TIM5_Init+0xec>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002432:	4b2a      	ldr	r3, [pc, #168]	@ (80024dc <MX_TIM5_Init+0xec>)
 8002434:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002438:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800243a:	4b28      	ldr	r3, [pc, #160]	@ (80024dc <MX_TIM5_Init+0xec>)
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002440:	4b26      	ldr	r3, [pc, #152]	@ (80024dc <MX_TIM5_Init+0xec>)
 8002442:	2200      	movs	r2, #0
 8002444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002446:	4825      	ldr	r0, [pc, #148]	@ (80024dc <MX_TIM5_Init+0xec>)
 8002448:	f005 faf7 	bl	8007a3a <HAL_TIM_Base_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8002452:	f7ff fba1 	bl	8001b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002456:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800245a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800245c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002460:	4619      	mov	r1, r3
 8002462:	481e      	ldr	r0, [pc, #120]	@ (80024dc <MX_TIM5_Init+0xec>)
 8002464:	f006 f8fc 	bl	8008660 <HAL_TIM_ConfigClockSource>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800246e:	f7ff fb93 	bl	8001b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002472:	481a      	ldr	r0, [pc, #104]	@ (80024dc <MX_TIM5_Init+0xec>)
 8002474:	f005 fb88 	bl	8007b88 <HAL_TIM_PWM_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800247e:	f7ff fb8b 	bl	8001b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800248a:	f107 0320 	add.w	r3, r7, #32
 800248e:	4619      	mov	r1, r3
 8002490:	4812      	ldr	r0, [pc, #72]	@ (80024dc <MX_TIM5_Init+0xec>)
 8002492:	f006 feb5 	bl	8009200 <HAL_TIMEx_MasterConfigSynchronization>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800249c:	f7ff fb7c 	bl	8001b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024a0:	2360      	movs	r3, #96	@ 0x60
 80024a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	2208      	movs	r2, #8
 80024b4:	4619      	mov	r1, r3
 80024b6:	4809      	ldr	r0, [pc, #36]	@ (80024dc <MX_TIM5_Init+0xec>)
 80024b8:	f006 f810 	bl	80084dc <HAL_TIM_PWM_ConfigChannel>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80024c2:	f7ff fb69 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 80024c6:	2108      	movs	r1, #8
 80024c8:	4804      	ldr	r0, [pc, #16]	@ (80024dc <MX_TIM5_Init+0xec>)
 80024ca:	f005 fbb5 	bl	8007c38 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80024ce:	4803      	ldr	r0, [pc, #12]	@ (80024dc <MX_TIM5_Init+0xec>)
 80024d0:	f000 f90e 	bl	80026f0 <HAL_TIM_MspPostInit>

}
 80024d4:	bf00      	nop
 80024d6:	3738      	adds	r7, #56	@ 0x38
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000730 	.word	0x20000730
 80024e0:	40000c00 	.word	0x40000c00

080024e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08e      	sub	sp, #56	@ 0x38
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a71      	ldr	r2, [pc, #452]	@ (80026c4 <HAL_TIM_Base_MspInit+0x1e0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d10c      	bne.n	800251e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002504:	4b70      	ldr	r3, [pc, #448]	@ (80026c8 <HAL_TIM_Base_MspInit+0x1e4>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	4a6f      	ldr	r2, [pc, #444]	@ (80026c8 <HAL_TIM_Base_MspInit+0x1e4>)
 800250a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800250e:	6193      	str	r3, [r2, #24]
 8002510:	4b6d      	ldr	r3, [pc, #436]	@ (80026c8 <HAL_TIM_Base_MspInit+0x1e4>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002518:	623b      	str	r3, [r7, #32]
 800251a:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800251c:	e0ce      	b.n	80026bc <HAL_TIM_Base_MspInit+0x1d8>
  else if(tim_baseHandle->Instance==TIM2)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002526:	d10c      	bne.n	8002542 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002528:	4b67      	ldr	r3, [pc, #412]	@ (80026c8 <HAL_TIM_Base_MspInit+0x1e4>)
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	4a66      	ldr	r2, [pc, #408]	@ (80026c8 <HAL_TIM_Base_MspInit+0x1e4>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	61d3      	str	r3, [r2, #28]
 8002534:	4b64      	ldr	r3, [pc, #400]	@ (80026c8 <HAL_TIM_Base_MspInit+0x1e4>)
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	69fb      	ldr	r3, [r7, #28]
}
 8002540:	e0bc      	b.n	80026bc <HAL_TIM_Base_MspInit+0x1d8>
  else if(tim_baseHandle->Instance==TIM3)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a61      	ldr	r2, [pc, #388]	@ (80026cc <HAL_TIM_Base_MspInit+0x1e8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d10c      	bne.n	8002566 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800254c:	4b5e      	ldr	r3, [pc, #376]	@ (80026c8 <HAL_TIM_Base_MspInit+0x1e4>)
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	4a5d      	ldr	r2, [pc, #372]	@ (80026c8 <HAL_TIM_Base_MspInit+0x1e4>)
 8002552:	f043 0302 	orr.w	r3, r3, #2
 8002556:	61d3      	str	r3, [r2, #28]
 8002558:	4b5b      	ldr	r3, [pc, #364]	@ (80026c8 <HAL_TIM_Base_MspInit+0x1e4>)
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	69bb      	ldr	r3, [r7, #24]
}
 8002564:	e0aa      	b.n	80026bc <HAL_TIM_Base_MspInit+0x1d8>
  else if(tim_baseHandle->Instance==TIM4)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a59      	ldr	r2, [pc, #356]	@ (80026d0 <HAL_TIM_Base_MspInit+0x1ec>)
 800256c:	4293      	cmp	r3, r2
 800256e:	f040 808c 	bne.w	800268a <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002572:	4b55      	ldr	r3, [pc, #340]	@ (80026c8 <HAL_TIM_Base_MspInit+0x1e4>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	4a54      	ldr	r2, [pc, #336]	@ (80026c8 <HAL_TIM_Base_MspInit+0x1e4>)
 8002578:	f043 0304 	orr.w	r3, r3, #4
 800257c:	61d3      	str	r3, [r2, #28]
 800257e:	4b52      	ldr	r3, [pc, #328]	@ (80026c8 <HAL_TIM_Base_MspInit+0x1e4>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800258a:	4b4f      	ldr	r3, [pc, #316]	@ (80026c8 <HAL_TIM_Base_MspInit+0x1e4>)
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	4a4e      	ldr	r2, [pc, #312]	@ (80026c8 <HAL_TIM_Base_MspInit+0x1e4>)
 8002590:	f043 0320 	orr.w	r3, r3, #32
 8002594:	6193      	str	r3, [r2, #24]
 8002596:	4b4c      	ldr	r3, [pc, #304]	@ (80026c8 <HAL_TIM_Base_MspInit+0x1e4>)
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	f003 0320 	and.w	r3, r3, #32
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80025a2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025a8:	2300      	movs	r3, #0
 80025aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025b4:	4619      	mov	r1, r3
 80025b6:	4847      	ldr	r0, [pc, #284]	@ (80026d4 <HAL_TIM_Base_MspInit+0x1f0>)
 80025b8:	f001 ff4e 	bl	8004458 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 80025bc:	4b46      	ldr	r3, [pc, #280]	@ (80026d8 <HAL_TIM_Base_MspInit+0x1f4>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80025c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025c4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80025c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80025ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80025d2:	4a41      	ldr	r2, [pc, #260]	@ (80026d8 <HAL_TIM_Base_MspInit+0x1f4>)
 80025d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d6:	6053      	str	r3, [r2, #4]
    hdma_tim4_ch2.Instance = DMA1_Channel4;
 80025d8:	4b40      	ldr	r3, [pc, #256]	@ (80026dc <HAL_TIM_Base_MspInit+0x1f8>)
 80025da:	4a41      	ldr	r2, [pc, #260]	@ (80026e0 <HAL_TIM_Base_MspInit+0x1fc>)
 80025dc:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025de:	4b3f      	ldr	r3, [pc, #252]	@ (80026dc <HAL_TIM_Base_MspInit+0x1f8>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80025e4:	4b3d      	ldr	r3, [pc, #244]	@ (80026dc <HAL_TIM_Base_MspInit+0x1f8>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80025ea:	4b3c      	ldr	r3, [pc, #240]	@ (80026dc <HAL_TIM_Base_MspInit+0x1f8>)
 80025ec:	2280      	movs	r2, #128	@ 0x80
 80025ee:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025f0:	4b3a      	ldr	r3, [pc, #232]	@ (80026dc <HAL_TIM_Base_MspInit+0x1f8>)
 80025f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025f6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025f8:	4b38      	ldr	r3, [pc, #224]	@ (80026dc <HAL_TIM_Base_MspInit+0x1f8>)
 80025fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025fe:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 8002600:	4b36      	ldr	r3, [pc, #216]	@ (80026dc <HAL_TIM_Base_MspInit+0x1f8>)
 8002602:	2220      	movs	r2, #32
 8002604:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002606:	4b35      	ldr	r3, [pc, #212]	@ (80026dc <HAL_TIM_Base_MspInit+0x1f8>)
 8002608:	2200      	movs	r2, #0
 800260a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 800260c:	4833      	ldr	r0, [pc, #204]	@ (80026dc <HAL_TIM_Base_MspInit+0x1f8>)
 800260e:	f001 fa9f 	bl	8003b50 <HAL_DMA_Init>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_TIM_Base_MspInit+0x138>
      Error_Handler();
 8002618:	f7ff fabe 	bl	8001b98 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a2f      	ldr	r2, [pc, #188]	@ (80026dc <HAL_TIM_Base_MspInit+0x1f8>)
 8002620:	629a      	str	r2, [r3, #40]	@ 0x28
 8002622:	4a2e      	ldr	r2, [pc, #184]	@ (80026dc <HAL_TIM_Base_MspInit+0x1f8>)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_tim4_ch3.Instance = DMA1_Channel5;
 8002628:	4b2e      	ldr	r3, [pc, #184]	@ (80026e4 <HAL_TIM_Base_MspInit+0x200>)
 800262a:	4a2f      	ldr	r2, [pc, #188]	@ (80026e8 <HAL_TIM_Base_MspInit+0x204>)
 800262c:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800262e:	4b2d      	ldr	r3, [pc, #180]	@ (80026e4 <HAL_TIM_Base_MspInit+0x200>)
 8002630:	2200      	movs	r2, #0
 8002632:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002634:	4b2b      	ldr	r3, [pc, #172]	@ (80026e4 <HAL_TIM_Base_MspInit+0x200>)
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800263a:	4b2a      	ldr	r3, [pc, #168]	@ (80026e4 <HAL_TIM_Base_MspInit+0x200>)
 800263c:	2280      	movs	r2, #128	@ 0x80
 800263e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002640:	4b28      	ldr	r3, [pc, #160]	@ (80026e4 <HAL_TIM_Base_MspInit+0x200>)
 8002642:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002646:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002648:	4b26      	ldr	r3, [pc, #152]	@ (80026e4 <HAL_TIM_Base_MspInit+0x200>)
 800264a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800264e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002650:	4b24      	ldr	r3, [pc, #144]	@ (80026e4 <HAL_TIM_Base_MspInit+0x200>)
 8002652:	2200      	movs	r2, #0
 8002654:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002656:	4b23      	ldr	r3, [pc, #140]	@ (80026e4 <HAL_TIM_Base_MspInit+0x200>)
 8002658:	2200      	movs	r2, #0
 800265a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800265c:	4821      	ldr	r0, [pc, #132]	@ (80026e4 <HAL_TIM_Base_MspInit+0x200>)
 800265e:	f001 fa77 	bl	8003b50 <HAL_DMA_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_TIM_Base_MspInit+0x188>
      Error_Handler();
 8002668:	f7ff fa96 	bl	8001b98 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a1d      	ldr	r2, [pc, #116]	@ (80026e4 <HAL_TIM_Base_MspInit+0x200>)
 8002670:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002672:	4a1c      	ldr	r2, [pc, #112]	@ (80026e4 <HAL_TIM_Base_MspInit+0x200>)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002678:	2200      	movs	r2, #0
 800267a:	2100      	movs	r1, #0
 800267c:	201e      	movs	r0, #30
 800267e:	f001 f850 	bl	8003722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002682:	201e      	movs	r0, #30
 8002684:	f001 f869 	bl	800375a <HAL_NVIC_EnableIRQ>
}
 8002688:	e018      	b.n	80026bc <HAL_TIM_Base_MspInit+0x1d8>
  else if(tim_baseHandle->Instance==TIM5)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a17      	ldr	r2, [pc, #92]	@ (80026ec <HAL_TIM_Base_MspInit+0x208>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d113      	bne.n	80026bc <HAL_TIM_Base_MspInit+0x1d8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002694:	4b0c      	ldr	r3, [pc, #48]	@ (80026c8 <HAL_TIM_Base_MspInit+0x1e4>)
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	4a0b      	ldr	r2, [pc, #44]	@ (80026c8 <HAL_TIM_Base_MspInit+0x1e4>)
 800269a:	f043 0308 	orr.w	r3, r3, #8
 800269e:	61d3      	str	r3, [r2, #28]
 80026a0:	4b09      	ldr	r3, [pc, #36]	@ (80026c8 <HAL_TIM_Base_MspInit+0x1e4>)
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80026ac:	2200      	movs	r2, #0
 80026ae:	2100      	movs	r1, #0
 80026b0:	2032      	movs	r0, #50	@ 0x32
 80026b2:	f001 f836 	bl	8003722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80026b6:	2032      	movs	r0, #50	@ 0x32
 80026b8:	f001 f84f 	bl	800375a <HAL_NVIC_EnableIRQ>
}
 80026bc:	bf00      	nop
 80026be:	3738      	adds	r7, #56	@ 0x38
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40012c00 	.word	0x40012c00
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40000400 	.word	0x40000400
 80026d0:	40000800 	.word	0x40000800
 80026d4:	40011400 	.word	0x40011400
 80026d8:	40010000 	.word	0x40010000
 80026dc:	20000778 	.word	0x20000778
 80026e0:	40020044 	.word	0x40020044
 80026e4:	200007bc 	.word	0x200007bc
 80026e8:	40020058 	.word	0x40020058
 80026ec:	40000c00 	.word	0x40000c00

080026f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f8:	f107 0310 	add.w	r3, r7, #16
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM5)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a0f      	ldr	r2, [pc, #60]	@ (8002748 <HAL_TIM_MspPostInit+0x58>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d117      	bne.n	8002740 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002710:	4b0e      	ldr	r3, [pc, #56]	@ (800274c <HAL_TIM_MspPostInit+0x5c>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	4a0d      	ldr	r2, [pc, #52]	@ (800274c <HAL_TIM_MspPostInit+0x5c>)
 8002716:	f043 0304 	orr.w	r3, r3, #4
 800271a:	6193      	str	r3, [r2, #24]
 800271c:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <HAL_TIM_MspPostInit+0x5c>)
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA2     ------> TIM5_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002728:	2304      	movs	r3, #4
 800272a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272c:	2302      	movs	r3, #2
 800272e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2302      	movs	r3, #2
 8002732:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002734:	f107 0310 	add.w	r3, r7, #16
 8002738:	4619      	mov	r1, r3
 800273a:	4805      	ldr	r0, [pc, #20]	@ (8002750 <HAL_TIM_MspPostInit+0x60>)
 800273c:	f001 fe8c 	bl	8004458 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002740:	bf00      	nop
 8002742:	3720      	adds	r7, #32
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40000c00 	.word	0x40000c00
 800274c:	40021000 	.word	0x40021000
 8002750:	40010800 	.word	0x40010800

08002754 <HAL_TIM_PeriodElapsedCallback>:
 ** bit6          捕获到高电平标志
 ** bit5~0 捕获高电平后定时器溢出的次数*/
uint8_t TIM4CH2_CAP_STA = 0;
uint16_t TIM4CH2_CAP_VAL;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]


}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
//			__HAL_TIM_ENABLE(&htim4);        //使能定时
//		}
//	}


}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <PWM_Hal_Test>:

static uint16_t pwmVal = 0;   //PWM占空set

void PWM_Hal_Test() {
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0

	pwmVal = 10000;
 800277c:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <PWM_Hal_Test+0x20>)
 800277e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002782:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SetCompare(&htim5, TIM_CHANNEL_3, 32767);
 8002784:	4b05      	ldr	r3, [pc, #20]	@ (800279c <PWM_Hal_Test+0x24>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800278c:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_Delay(200);
 800278e:	20c8      	movs	r0, #200	@ 0xc8
 8002790:	f000 fa4a 	bl	8002c28 <HAL_Delay>
}
 8002794:	bf00      	nop
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000800 	.word	0x20000800
 800279c:	20000730 	.word	0x20000730

080027a0 <PWMCapture_DMA_Hal_Test>:

void PWMCapture_DMA_Hal_Test() {
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0

	uint16_t lenPulse = 0, lenPeriod;
 80027a6:	2300      	movs	r3, #0
 80027a8:	81fb      	strh	r3, [r7, #14]
		float pr = 0;
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	60bb      	str	r3, [r7, #8]
		lenPeriod = (ICP_val_buf[0][1] > ICP_val_buf[0][0]) ?  (ICP_val_buf[0][1] - ICP_val_buf[0][0]) : (0xFFFF - ICP_val_buf[0][0] + ICP_val_buf[0][1]);
 80027b0:	4b4c      	ldr	r3, [pc, #304]	@ (80028e4 <PWMCapture_DMA_Hal_Test+0x144>)
 80027b2:	885a      	ldrh	r2, [r3, #2]
 80027b4:	4b4b      	ldr	r3, [pc, #300]	@ (80028e4 <PWMCapture_DMA_Hal_Test+0x144>)
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d906      	bls.n	80027ca <PWMCapture_DMA_Hal_Test+0x2a>
 80027bc:	4b49      	ldr	r3, [pc, #292]	@ (80028e4 <PWMCapture_DMA_Hal_Test+0x144>)
 80027be:	885a      	ldrh	r2, [r3, #2]
 80027c0:	4b48      	ldr	r3, [pc, #288]	@ (80028e4 <PWMCapture_DMA_Hal_Test+0x144>)
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	e007      	b.n	80027da <PWMCapture_DMA_Hal_Test+0x3a>
 80027ca:	4b46      	ldr	r3, [pc, #280]	@ (80028e4 <PWMCapture_DMA_Hal_Test+0x144>)
 80027cc:	885a      	ldrh	r2, [r3, #2]
 80027ce:	4b45      	ldr	r3, [pc, #276]	@ (80028e4 <PWMCapture_DMA_Hal_Test+0x144>)
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29b      	uxth	r3, r3
 80027da:	80fb      	strh	r3, [r7, #6]
		lenPulse =  (ICP_val_buf[1][0] > ICP_val_buf[0][0]) ?  (ICP_val_buf[1][0] - ICP_val_buf[0][0]) : (0xFFFF - ICP_val_buf[0][0] + ICP_val_buf[1][0]);
 80027dc:	4b41      	ldr	r3, [pc, #260]	@ (80028e4 <PWMCapture_DMA_Hal_Test+0x144>)
 80027de:	891a      	ldrh	r2, [r3, #8]
 80027e0:	4b40      	ldr	r3, [pc, #256]	@ (80028e4 <PWMCapture_DMA_Hal_Test+0x144>)
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d906      	bls.n	80027f6 <PWMCapture_DMA_Hal_Test+0x56>
 80027e8:	4b3e      	ldr	r3, [pc, #248]	@ (80028e4 <PWMCapture_DMA_Hal_Test+0x144>)
 80027ea:	891a      	ldrh	r2, [r3, #8]
 80027ec:	4b3d      	ldr	r3, [pc, #244]	@ (80028e4 <PWMCapture_DMA_Hal_Test+0x144>)
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	e007      	b.n	8002806 <PWMCapture_DMA_Hal_Test+0x66>
 80027f6:	4b3b      	ldr	r3, [pc, #236]	@ (80028e4 <PWMCapture_DMA_Hal_Test+0x144>)
 80027f8:	891a      	ldrh	r2, [r3, #8]
 80027fa:	4b3a      	ldr	r3, [pc, #232]	@ (80028e4 <PWMCapture_DMA_Hal_Test+0x144>)
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	b29b      	uxth	r3, r3
 8002802:	3b01      	subs	r3, #1
 8002804:	b29b      	uxth	r3, r3
 8002806:	81fb      	strh	r3, [r7, #14]
		if(lenPeriod != 0)
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d062      	beq.n	80028d4 <PWMCapture_DMA_Hal_Test+0x134>
		{
			if(lenPulse > lenPeriod)
 800280e:	89fa      	ldrh	r2, [r7, #14]
 8002810:	88fb      	ldrh	r3, [r7, #6]
 8002812:	429a      	cmp	r2, r3
 8002814:	d91e      	bls.n	8002854 <PWMCapture_DMA_Hal_Test+0xb4>
			{
				lenPulse = 0xFFFF - lenPulse;
 8002816:	89fb      	ldrh	r3, [r7, #14]
 8002818:	43db      	mvns	r3, r3
 800281a:	81fb      	strh	r3, [r7, #14]
				pr = 100.0f - (float)lenPulse * 100.0f / lenPeriod;
 800281c:	89fb      	ldrh	r3, [r7, #14]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fac4 	bl	8000dac <__aeabi_ui2f>
 8002824:	4603      	mov	r3, r0
 8002826:	4930      	ldr	r1, [pc, #192]	@ (80028e8 <PWMCapture_DMA_Hal_Test+0x148>)
 8002828:	4618      	mov	r0, r3
 800282a:	f7fe fb17 	bl	8000e5c <__aeabi_fmul>
 800282e:	4603      	mov	r3, r0
 8002830:	461c      	mov	r4, r3
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe fabd 	bl	8000db4 <__aeabi_i2f>
 800283a:	4603      	mov	r3, r0
 800283c:	4619      	mov	r1, r3
 800283e:	4620      	mov	r0, r4
 8002840:	f7fe fbc0 	bl	8000fc4 <__aeabi_fdiv>
 8002844:	4603      	mov	r3, r0
 8002846:	4619      	mov	r1, r3
 8002848:	4827      	ldr	r0, [pc, #156]	@ (80028e8 <PWMCapture_DMA_Hal_Test+0x148>)
 800284a:	f7fe f9fd 	bl	8000c48 <__aeabi_fsub>
 800284e:	4603      	mov	r3, r0
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	e015      	b.n	8002880 <PWMCapture_DMA_Hal_Test+0xe0>
			}
			else pr = (float)lenPulse * 100.0f / lenPeriod;
 8002854:	89fb      	ldrh	r3, [r7, #14]
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe faa8 	bl	8000dac <__aeabi_ui2f>
 800285c:	4603      	mov	r3, r0
 800285e:	4922      	ldr	r1, [pc, #136]	@ (80028e8 <PWMCapture_DMA_Hal_Test+0x148>)
 8002860:	4618      	mov	r0, r3
 8002862:	f7fe fafb 	bl	8000e5c <__aeabi_fmul>
 8002866:	4603      	mov	r3, r0
 8002868:	461c      	mov	r4, r3
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe faa1 	bl	8000db4 <__aeabi_i2f>
 8002872:	4603      	mov	r3, r0
 8002874:	4619      	mov	r1, r3
 8002876:	4620      	mov	r0, r4
 8002878:	f7fe fba4 	bl	8000fc4 <__aeabi_fdiv>
 800287c:	4603      	mov	r3, r0
 800287e:	60bb      	str	r3, [r7, #8]

			printf("Duty Ratio: %.3f\n", pr);
 8002880:	68b8      	ldr	r0, [r7, #8]
 8002882:	f7fd fe3d 	bl	8000500 <__aeabi_f2d>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4818      	ldr	r0, [pc, #96]	@ (80028ec <PWMCapture_DMA_Hal_Test+0x14c>)
 800288c:	f00c fe44 	bl	800f518 <iprintf>

			pr = (float)lenPulse / 1.0f;
 8002890:	89fb      	ldrh	r3, [r7, #14]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fa8a 	bl	8000dac <__aeabi_ui2f>
 8002898:	4603      	mov	r3, r0
 800289a:	60bb      	str	r3, [r7, #8]

			printf("Pulse width: %.3f us\n", pr);
 800289c:	68b8      	ldr	r0, [r7, #8]
 800289e:	f7fd fe2f 	bl	8000500 <__aeabi_f2d>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4812      	ldr	r0, [pc, #72]	@ (80028f0 <PWMCapture_DMA_Hal_Test+0x150>)
 80028a8:	f00c fe36 	bl	800f518 <iprintf>

			pr = 1000000.0f / lenPeriod;
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe fa80 	bl	8000db4 <__aeabi_i2f>
 80028b4:	4603      	mov	r3, r0
 80028b6:	4619      	mov	r1, r3
 80028b8:	480e      	ldr	r0, [pc, #56]	@ (80028f4 <PWMCapture_DMA_Hal_Test+0x154>)
 80028ba:	f7fe fb83 	bl	8000fc4 <__aeabi_fdiv>
 80028be:	4603      	mov	r3, r0
 80028c0:	60bb      	str	r3, [r7, #8]

			printf("Period: %.1f Hz\n\n", pr);
 80028c2:	68b8      	ldr	r0, [r7, #8]
 80028c4:	f7fd fe1c 	bl	8000500 <__aeabi_f2d>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	480a      	ldr	r0, [pc, #40]	@ (80028f8 <PWMCapture_DMA_Hal_Test+0x158>)
 80028ce:	f00c fe23 	bl	800f518 <iprintf>
		}
		else printf("Period: 0 Hz. No Input?? \n\n");

}
 80028d2:	e002      	b.n	80028da <PWMCapture_DMA_Hal_Test+0x13a>
		else printf("Period: 0 Hz. No Input?? \n\n");
 80028d4:	4809      	ldr	r0, [pc, #36]	@ (80028fc <PWMCapture_DMA_Hal_Test+0x15c>)
 80028d6:	f00c fe8f 	bl	800f5f8 <puts>
}
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd90      	pop	{r4, r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000600 	.word	0x20000600
 80028e8:	42c80000 	.word	0x42c80000
 80028ec:	08012f44 	.word	0x08012f44
 80028f0:	08012f58 	.word	0x08012f58
 80028f4:	49742400 	.word	0x49742400
 80028f8:	08012f70 	.word	0x08012f70
 80028fc:	08012f84 	.word	0x08012f84

08002900 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch,1,HAL_MAX_DELAY);
 8002908:	1d39      	adds	r1, r7, #4
 800290a:	f04f 33ff 	mov.w	r3, #4294967295
 800290e:	2201      	movs	r2, #1
 8002910:	4803      	ldr	r0, [pc, #12]	@ (8002920 <__io_putchar+0x20>)
 8002912:	f006 fd43 	bl	800939c <HAL_UART_Transmit>
    return ch;
 8002916:	687b      	ldr	r3, [r7, #4]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20000908 	.word	0x20000908

08002924 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002928:	4b13      	ldr	r3, [pc, #76]	@ (8002978 <MX_USART2_UART_Init+0x54>)
 800292a:	4a14      	ldr	r2, [pc, #80]	@ (800297c <MX_USART2_UART_Init+0x58>)
 800292c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800292e:	4b12      	ldr	r3, [pc, #72]	@ (8002978 <MX_USART2_UART_Init+0x54>)
 8002930:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002934:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002936:	4b10      	ldr	r3, [pc, #64]	@ (8002978 <MX_USART2_UART_Init+0x54>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800293c:	4b0e      	ldr	r3, [pc, #56]	@ (8002978 <MX_USART2_UART_Init+0x54>)
 800293e:	2200      	movs	r2, #0
 8002940:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002942:	4b0d      	ldr	r3, [pc, #52]	@ (8002978 <MX_USART2_UART_Init+0x54>)
 8002944:	2200      	movs	r2, #0
 8002946:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002948:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <MX_USART2_UART_Init+0x54>)
 800294a:	220c      	movs	r2, #12
 800294c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800294e:	4b0a      	ldr	r3, [pc, #40]	@ (8002978 <MX_USART2_UART_Init+0x54>)
 8002950:	2200      	movs	r2, #0
 8002952:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002954:	4b08      	ldr	r3, [pc, #32]	@ (8002978 <MX_USART2_UART_Init+0x54>)
 8002956:	2200      	movs	r2, #0
 8002958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800295a:	4807      	ldr	r0, [pc, #28]	@ (8002978 <MX_USART2_UART_Init+0x54>)
 800295c:	f006 fcce 	bl	80092fc <HAL_UART_Init>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002966:	f7ff f917 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /**/
  HAL_UART_Receive_IT(&huart2, (uint8_t *)g_usart2_rx_buf, USART2_REC_LEN);
 800296a:	2201      	movs	r2, #1
 800296c:	4904      	ldr	r1, [pc, #16]	@ (8002980 <MX_USART2_UART_Init+0x5c>)
 800296e:	4802      	ldr	r0, [pc, #8]	@ (8002978 <MX_USART2_UART_Init+0x54>)
 8002970:	f006 fd97 	bl	80094a2 <HAL_UART_Receive_IT>

  /* USER CODE END USART2_Init 2 */

}
 8002974:	bf00      	nop
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000908 	.word	0x20000908
 800297c:	40004400 	.word	0x40004400
 8002980:	20000804 	.word	0x20000804

08002984 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	@ 0x28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a26      	ldr	r2, [pc, #152]	@ (8002a38 <HAL_UART_MspInit+0xb4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d145      	bne.n	8002a30 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029a4:	4b25      	ldr	r3, [pc, #148]	@ (8002a3c <HAL_UART_MspInit+0xb8>)
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	4a24      	ldr	r2, [pc, #144]	@ (8002a3c <HAL_UART_MspInit+0xb8>)
 80029aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ae:	61d3      	str	r3, [r2, #28]
 80029b0:	4b22      	ldr	r3, [pc, #136]	@ (8002a3c <HAL_UART_MspInit+0xb8>)
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029bc:	4b1f      	ldr	r3, [pc, #124]	@ (8002a3c <HAL_UART_MspInit+0xb8>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	4a1e      	ldr	r2, [pc, #120]	@ (8002a3c <HAL_UART_MspInit+0xb8>)
 80029c2:	f043 0320 	orr.w	r3, r3, #32
 80029c6:	6193      	str	r3, [r2, #24]
 80029c8:	4b1c      	ldr	r3, [pc, #112]	@ (8002a3c <HAL_UART_MspInit+0xb8>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80029d4:	2320      	movs	r3, #32
 80029d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029dc:	2303      	movs	r3, #3
 80029de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	4619      	mov	r1, r3
 80029e6:	4816      	ldr	r0, [pc, #88]	@ (8002a40 <HAL_UART_MspInit+0xbc>)
 80029e8:	f001 fd36 	bl	8004458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029ec:	2340      	movs	r3, #64	@ 0x40
 80029ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029f8:	f107 0314 	add.w	r3, r7, #20
 80029fc:	4619      	mov	r1, r3
 80029fe:	4810      	ldr	r0, [pc, #64]	@ (8002a40 <HAL_UART_MspInit+0xbc>)
 8002a00:	f001 fd2a 	bl	8004458 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART2_ENABLE();
 8002a04:	4b0f      	ldr	r3, [pc, #60]	@ (8002a44 <HAL_UART_MspInit+0xc0>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	f043 0308 	orr.w	r3, r3, #8
 8002a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a44 <HAL_UART_MspInit+0xc0>)
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1e:	6053      	str	r3, [r2, #4]

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a20:	2200      	movs	r2, #0
 8002a22:	2100      	movs	r1, #0
 8002a24:	2026      	movs	r0, #38	@ 0x26
 8002a26:	f000 fe7c 	bl	8003722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a2a:	2026      	movs	r0, #38	@ 0x26
 8002a2c:	f000 fe95 	bl	800375a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */
//use usart2 when use usb device the usart will take the usb bus busy,
  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a30:	bf00      	nop
 8002a32:	3728      	adds	r7, #40	@ 0x28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40004400 	.word	0x40004400
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40011400 	.word	0x40011400
 8002a44:	40010000 	.word	0x40010000

08002a48 <HAL_UART_RxCpltCallback>:
                received data is handled in there
 * @param       huart: the usart handler
 * @retval      NULL
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */

	if(Uart2_Rx_Cnt >= 255)  //data overflow judge
 8002a50:	4b27      	ldr	r3, [pc, #156]	@ (8002af0 <HAL_UART_RxCpltCallback+0xa8>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2bff      	cmp	r3, #255	@ 0xff
 8002a56:	d110      	bne.n	8002a7a <HAL_UART_RxCpltCallback+0x32>
	{
		Uart2_Rx_Cnt = 0;
 8002a58:	4b25      	ldr	r3, [pc, #148]	@ (8002af0 <HAL_UART_RxCpltCallback+0xa8>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
		memset(g_rx_buffer,0x00,sizeof(g_rx_buffer));
 8002a5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a62:	2100      	movs	r1, #0
 8002a64:	4823      	ldr	r0, [pc, #140]	@ (8002af4 <HAL_UART_RxCpltCallback+0xac>)
 8002a66:	f00c fec7 	bl	800f7f8 <memset>
		HAL_UART_Transmit(&huart2, (uint8_t *)"data overflow", 10,0xFFFF);
 8002a6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a6e:	220a      	movs	r2, #10
 8002a70:	4921      	ldr	r1, [pc, #132]	@ (8002af8 <HAL_UART_RxCpltCallback+0xb0>)
 8002a72:	4822      	ldr	r0, [pc, #136]	@ (8002afc <HAL_UART_RxCpltCallback+0xb4>)
 8002a74:	f006 fc92 	bl	800939c <HAL_UART_Transmit>
 8002a78:	e031      	b.n	8002ade <HAL_UART_RxCpltCallback+0x96>

	}
	else
	{
		g_rx_buffer[Uart2_Rx_Cnt++] = g_usart2_rx_buf[0];   //save the data
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002af0 <HAL_UART_RxCpltCallback+0xa8>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	b2d1      	uxtb	r1, r2
 8002a82:	4a1b      	ldr	r2, [pc, #108]	@ (8002af0 <HAL_UART_RxCpltCallback+0xa8>)
 8002a84:	7011      	strb	r1, [r2, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	4b1d      	ldr	r3, [pc, #116]	@ (8002b00 <HAL_UART_RxCpltCallback+0xb8>)
 8002a8a:	7819      	ldrb	r1, [r3, #0]
 8002a8c:	4b19      	ldr	r3, [pc, #100]	@ (8002af4 <HAL_UART_RxCpltCallback+0xac>)
 8002a8e:	5499      	strb	r1, [r3, r2]

		if((g_rx_buffer[Uart2_Rx_Cnt-1] == 0x0A)&&(g_rx_buffer[Uart2_Rx_Cnt-2] == 0x0D)) //judge end flag
 8002a90:	4b17      	ldr	r3, [pc, #92]	@ (8002af0 <HAL_UART_RxCpltCallback+0xa8>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	3b01      	subs	r3, #1
 8002a96:	4a17      	ldr	r2, [pc, #92]	@ (8002af4 <HAL_UART_RxCpltCallback+0xac>)
 8002a98:	5cd3      	ldrb	r3, [r2, r3]
 8002a9a:	2b0a      	cmp	r3, #10
 8002a9c:	d11f      	bne.n	8002ade <HAL_UART_RxCpltCallback+0x96>
 8002a9e:	4b14      	ldr	r3, [pc, #80]	@ (8002af0 <HAL_UART_RxCpltCallback+0xa8>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	3b02      	subs	r3, #2
 8002aa4:	4a13      	ldr	r2, [pc, #76]	@ (8002af4 <HAL_UART_RxCpltCallback+0xac>)
 8002aa6:	5cd3      	ldrb	r3, [r2, r3]
 8002aa8:	2b0d      	cmp	r3, #13
 8002aaa:	d118      	bne.n	8002ade <HAL_UART_RxCpltCallback+0x96>
		{
			HAL_UART_Transmit(&huart2, (uint8_t *)&g_rx_buffer, Uart2_Rx_Cnt,0xFFFF); //send the data back
 8002aac:	4b10      	ldr	r3, [pc, #64]	@ (8002af0 <HAL_UART_RxCpltCallback+0xa8>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ab6:	490f      	ldr	r1, [pc, #60]	@ (8002af4 <HAL_UART_RxCpltCallback+0xac>)
 8002ab8:	4810      	ldr	r0, [pc, #64]	@ (8002afc <HAL_UART_RxCpltCallback+0xb4>)
 8002aba:	f006 fc6f 	bl	800939c <HAL_UART_Transmit>
            while(HAL_UART_GetState(&huart2) == HAL_UART_STATE_BUSY_TX);//check the usart2 send end
 8002abe:	bf00      	nop
 8002ac0:	480e      	ldr	r0, [pc, #56]	@ (8002afc <HAL_UART_RxCpltCallback+0xb4>)
 8002ac2:	f006 ffc2 	bl	8009a4a <HAL_UART_GetState>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b21      	cmp	r3, #33	@ 0x21
 8002aca:	d0f9      	beq.n	8002ac0 <HAL_UART_RxCpltCallback+0x78>
            Uart2_Rx_Cnt = 0;
 8002acc:	4b08      	ldr	r3, [pc, #32]	@ (8002af0 <HAL_UART_RxCpltCallback+0xa8>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
			memset(g_rx_buffer,0x00,sizeof(g_rx_buffer)); //clear the buffer
 8002ad2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4806      	ldr	r0, [pc, #24]	@ (8002af4 <HAL_UART_RxCpltCallback+0xac>)
 8002ada:	f00c fe8d 	bl	800f7f8 <memset>
		}
	}

	HAL_UART_Receive_IT(&huart2, (uint8_t *)&g_usart2_rx_buf, 1);   //restart the interrept
 8002ade:	2201      	movs	r2, #1
 8002ae0:	4907      	ldr	r1, [pc, #28]	@ (8002b00 <HAL_UART_RxCpltCallback+0xb8>)
 8002ae2:	4806      	ldr	r0, [pc, #24]	@ (8002afc <HAL_UART_RxCpltCallback+0xb4>)
 8002ae4:	f006 fcdd 	bl	80094a2 <HAL_UART_Receive_IT>
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000805 	.word	0x20000805
 8002af4:	20000808 	.word	0x20000808
 8002af8:	08012fa0 	.word	0x08012fa0
 8002afc:	20000908 	.word	0x20000908
 8002b00:	20000804 	.word	0x20000804

08002b04 <USART_Hal_Test>:

/*
 *printf in usat2 test A
*/
void USART_Hal_Test()
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
	printf("///\n\
 8002b08:	4802      	ldr	r0, [pc, #8]	@ (8002b14 <USART_Hal_Test+0x10>)
 8002b0a:	f00c fd75 	bl	800f5f8 <puts>
	//     ========`-.____`-.___\\_____/___.-`____.-'========     //\n\
	//                          `=---='                          //\n\
	//     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     //\n\
	//           GODBLESS       NOCRASH     NOBUG             //\n\
	///\n");
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	08012fb0 	.word	0x08012fb0

08002b18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b18:	f7ff fadc 	bl	80020d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b1c:	480b      	ldr	r0, [pc, #44]	@ (8002b4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b1e:	490c      	ldr	r1, [pc, #48]	@ (8002b50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b20:	4a0c      	ldr	r2, [pc, #48]	@ (8002b54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b24:	e002      	b.n	8002b2c <LoopCopyDataInit>

08002b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b2a:	3304      	adds	r3, #4

08002b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b30:	d3f9      	bcc.n	8002b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b32:	4a09      	ldr	r2, [pc, #36]	@ (8002b58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b34:	4c09      	ldr	r4, [pc, #36]	@ (8002b5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b38:	e001      	b.n	8002b3e <LoopFillZerobss>

08002b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b3c:	3204      	adds	r2, #4

08002b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b40:	d3fb      	bcc.n	8002b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b42:	f00c feb1 	bl	800f8a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b46:	f7fe ff85 	bl	8001a54 <main>
  bx lr
 8002b4a:	4770      	bx	lr
  ldr r0, =_sdata
 8002b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b50:	200003c4 	.word	0x200003c4
  ldr r2, =_sidata
 8002b54:	08013990 	.word	0x08013990
  ldr r2, =_sbss
 8002b58:	200003c4 	.word	0x200003c4
  ldr r4, =_ebss
 8002b5c:	20001c78 	.word	0x20001c78

08002b60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b60:	e7fe      	b.n	8002b60 <ADC1_2_IRQHandler>
	...

08002b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b68:	4b08      	ldr	r3, [pc, #32]	@ (8002b8c <HAL_Init+0x28>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a07      	ldr	r2, [pc, #28]	@ (8002b8c <HAL_Init+0x28>)
 8002b6e:	f043 0310 	orr.w	r3, r3, #16
 8002b72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b74:	2003      	movs	r0, #3
 8002b76:	f000 fdc9 	bl	800370c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f000 f808 	bl	8002b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b80:	f7ff f908 	bl	8001d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40022000 	.word	0x40022000

08002b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b98:	4b12      	ldr	r3, [pc, #72]	@ (8002be4 <HAL_InitTick+0x54>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	4b12      	ldr	r3, [pc, #72]	@ (8002be8 <HAL_InitTick+0x58>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fde1 	bl	8003776 <HAL_SYSTICK_Config>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e00e      	b.n	8002bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b0f      	cmp	r3, #15
 8002bc2:	d80a      	bhi.n	8002bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bcc:	f000 fda9 	bl	8003722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bd0:	4a06      	ldr	r2, [pc, #24]	@ (8002bec <HAL_InitTick+0x5c>)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e000      	b.n	8002bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20000080 	.word	0x20000080
 8002be8:	20000088 	.word	0x20000088
 8002bec:	20000084 	.word	0x20000084

08002bf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bf4:	4b05      	ldr	r3, [pc, #20]	@ (8002c0c <HAL_IncTick+0x1c>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4b05      	ldr	r3, [pc, #20]	@ (8002c10 <HAL_IncTick+0x20>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4413      	add	r3, r2
 8002c00:	4a03      	ldr	r2, [pc, #12]	@ (8002c10 <HAL_IncTick+0x20>)
 8002c02:	6013      	str	r3, [r2, #0]
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr
 8002c0c:	20000088 	.word	0x20000088
 8002c10:	20000950 	.word	0x20000950

08002c14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return uwTick;
 8002c18:	4b02      	ldr	r3, [pc, #8]	@ (8002c24 <HAL_GetTick+0x10>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr
 8002c24:	20000950 	.word	0x20000950

08002c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c30:	f7ff fff0 	bl	8002c14 <HAL_GetTick>
 8002c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d005      	beq.n	8002c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c42:	4b0a      	ldr	r3, [pc, #40]	@ (8002c6c <HAL_Delay+0x44>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c4e:	bf00      	nop
 8002c50:	f7ff ffe0 	bl	8002c14 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d8f7      	bhi.n	8002c50 <HAL_Delay+0x28>
  {
  }
}
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000088 	.word	0x20000088

08002c70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0ce      	b.n	8002e30 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d109      	bne.n	8002cb4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7fe faba 	bl	8001228 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 fb07 	bl	80032c8 <ADC_ConversionStop_Disable>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f040 80a9 	bne.w	8002e1e <HAL_ADC_Init+0x1ae>
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f040 80a5 	bne.w	8002e1e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002cdc:	f023 0302 	bic.w	r3, r3, #2
 8002ce0:	f043 0202 	orr.w	r2, r3, #2
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4951      	ldr	r1, [pc, #324]	@ (8002e38 <HAL_ADC_Init+0x1c8>)
 8002cf2:	428b      	cmp	r3, r1
 8002cf4:	d10a      	bne.n	8002d0c <HAL_ADC_Init+0x9c>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002cfe:	d002      	beq.n	8002d06 <HAL_ADC_Init+0x96>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	e004      	b.n	8002d10 <HAL_ADC_Init+0xa0>
 8002d06:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002d0a:	e001      	b.n	8002d10 <HAL_ADC_Init+0xa0>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d10:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	7b1b      	ldrb	r3, [r3, #12]
 8002d16:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d18:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d28:	d003      	beq.n	8002d32 <HAL_ADC_Init+0xc2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d102      	bne.n	8002d38 <HAL_ADC_Init+0xc8>
 8002d32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d36:	e000      	b.n	8002d3a <HAL_ADC_Init+0xca>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7d1b      	ldrb	r3, [r3, #20]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d119      	bne.n	8002d7c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	7b1b      	ldrb	r3, [r3, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d109      	bne.n	8002d64 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	3b01      	subs	r3, #1
 8002d56:	035a      	lsls	r2, r3, #13
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	e00b      	b.n	8002d7c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d68:	f043 0220 	orr.w	r2, r3, #32
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d74:	f043 0201 	orr.w	r2, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	4b29      	ldr	r3, [pc, #164]	@ (8002e3c <HAL_ADC_Init+0x1cc>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	68b9      	ldr	r1, [r7, #8]
 8002da0:	430b      	orrs	r3, r1
 8002da2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dac:	d003      	beq.n	8002db6 <HAL_ADC_Init+0x146>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d104      	bne.n	8002dc0 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	051b      	lsls	r3, r3, #20
 8002dbe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	4b19      	ldr	r3, [pc, #100]	@ (8002e40 <HAL_ADC_Init+0x1d0>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d10b      	bne.n	8002dfc <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dee:	f023 0303 	bic.w	r3, r3, #3
 8002df2:	f043 0201 	orr.w	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dfa:	e018      	b.n	8002e2e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e00:	f023 0312 	bic.w	r3, r3, #18
 8002e04:	f043 0210 	orr.w	r2, r3, #16
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e10:	f043 0201 	orr.w	r2, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e1c:	e007      	b.n	8002e2e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e22:	f043 0210 	orr.w	r2, r3, #16
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40013c00 	.word	0x40013c00
 8002e3c:	ffe1f7fd 	.word	0xffe1f7fd
 8002e40:	ff1f0efe 	.word	0xff1f0efe

08002e44 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a64      	ldr	r2, [pc, #400]	@ (8002fec <HAL_ADC_Start_DMA+0x1a8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d004      	beq.n	8002e68 <HAL_ADC_Start_DMA+0x24>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a63      	ldr	r2, [pc, #396]	@ (8002ff0 <HAL_ADC_Start_DMA+0x1ac>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d106      	bne.n	8002e76 <HAL_ADC_Start_DMA+0x32>
 8002e68:	4b60      	ldr	r3, [pc, #384]	@ (8002fec <HAL_ADC_Start_DMA+0x1a8>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f040 80b3 	bne.w	8002fdc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_ADC_Start_DMA+0x40>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e0ae      	b.n	8002fe2 <HAL_ADC_Start_DMA+0x19e>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f9c1 	bl	8003214 <ADC_Enable>
 8002e92:	4603      	mov	r3, r0
 8002e94:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e96:	7dfb      	ldrb	r3, [r7, #23]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f040 809a 	bne.w	8002fd2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a4e      	ldr	r2, [pc, #312]	@ (8002ff0 <HAL_ADC_Start_DMA+0x1ac>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d105      	bne.n	8002ec8 <HAL_ADC_Start_DMA+0x84>
 8002ebc:	4b4b      	ldr	r3, [pc, #300]	@ (8002fec <HAL_ADC_Start_DMA+0x1a8>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d115      	bne.n	8002ef4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ecc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d026      	beq.n	8002f30 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002eea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ef2:	e01d      	b.n	8002f30 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a39      	ldr	r2, [pc, #228]	@ (8002fec <HAL_ADC_Start_DMA+0x1a8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d004      	beq.n	8002f14 <HAL_ADC_Start_DMA+0xd0>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a38      	ldr	r2, [pc, #224]	@ (8002ff0 <HAL_ADC_Start_DMA+0x1ac>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d10d      	bne.n	8002f30 <HAL_ADC_Start_DMA+0xec>
 8002f14:	4b35      	ldr	r3, [pc, #212]	@ (8002fec <HAL_ADC_Start_DMA+0x1a8>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d007      	beq.n	8002f30 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f24:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f28:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d006      	beq.n	8002f4a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f40:	f023 0206 	bic.w	r2, r3, #6
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002f48:	e002      	b.n	8002f50 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4a25      	ldr	r2, [pc, #148]	@ (8002ff4 <HAL_ADC_Start_DMA+0x1b0>)
 8002f5e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	4a24      	ldr	r2, [pc, #144]	@ (8002ff8 <HAL_ADC_Start_DMA+0x1b4>)
 8002f66:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	4a23      	ldr	r2, [pc, #140]	@ (8002ffc <HAL_ADC_Start_DMA+0x1b8>)
 8002f6e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0202 	mvn.w	r2, #2
 8002f78:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f88:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a18      	ldr	r0, [r3, #32]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	334c      	adds	r3, #76	@ 0x4c
 8002f94:	4619      	mov	r1, r3
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f000 fe4f 	bl	8003c3c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002fa8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002fac:	d108      	bne.n	8002fc0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002fbc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002fbe:	e00f      	b.n	8002fe0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002fce:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002fd0:	e006      	b.n	8002fe0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8002fda:	e001      	b.n	8002fe0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40012400 	.word	0x40012400
 8002ff0:	40012800 	.word	0x40012800
 8002ff4:	0800334b 	.word	0x0800334b
 8002ff8:	080033c7 	.word	0x080033c7
 8002ffc:	080033e3 	.word	0x080033e3

08003000 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr

08003012 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x20>
 8003040:	2302      	movs	r3, #2
 8003042:	e0dc      	b.n	80031fe <HAL_ADC_ConfigChannel+0x1da>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b06      	cmp	r3, #6
 8003052:	d81c      	bhi.n	800308e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	3b05      	subs	r3, #5
 8003066:	221f      	movs	r2, #31
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	4019      	ands	r1, r3
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	3b05      	subs	r3, #5
 8003080:	fa00 f203 	lsl.w	r2, r0, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	635a      	str	r2, [r3, #52]	@ 0x34
 800308c:	e03c      	b.n	8003108 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b0c      	cmp	r3, #12
 8003094:	d81c      	bhi.n	80030d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	3b23      	subs	r3, #35	@ 0x23
 80030a8:	221f      	movs	r2, #31
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	4019      	ands	r1, r3
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	3b23      	subs	r3, #35	@ 0x23
 80030c2:	fa00 f203 	lsl.w	r2, r0, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80030ce:	e01b      	b.n	8003108 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	3b41      	subs	r3, #65	@ 0x41
 80030e2:	221f      	movs	r2, #31
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	4019      	ands	r1, r3
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	3b41      	subs	r3, #65	@ 0x41
 80030fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b09      	cmp	r3, #9
 800310e:	d91c      	bls.n	800314a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68d9      	ldr	r1, [r3, #12]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	4613      	mov	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4413      	add	r3, r2
 8003120:	3b1e      	subs	r3, #30
 8003122:	2207      	movs	r2, #7
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	4019      	ands	r1, r3
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	6898      	ldr	r0, [r3, #8]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4613      	mov	r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4413      	add	r3, r2
 800313a:	3b1e      	subs	r3, #30
 800313c:	fa00 f203 	lsl.w	r2, r0, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	60da      	str	r2, [r3, #12]
 8003148:	e019      	b.n	800317e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6919      	ldr	r1, [r3, #16]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	4613      	mov	r3, r2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	4413      	add	r3, r2
 800315a:	2207      	movs	r2, #7
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	4019      	ands	r1, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	6898      	ldr	r0, [r3, #8]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4613      	mov	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4413      	add	r3, r2
 8003172:	fa00 f203 	lsl.w	r2, r0, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b10      	cmp	r3, #16
 8003184:	d003      	beq.n	800318e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800318a:	2b11      	cmp	r3, #17
 800318c:	d132      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a1d      	ldr	r2, [pc, #116]	@ (8003208 <HAL_ADC_ConfigChannel+0x1e4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d125      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d126      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80031b4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b10      	cmp	r3, #16
 80031bc:	d11a      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031be:	4b13      	ldr	r3, [pc, #76]	@ (800320c <HAL_ADC_ConfigChannel+0x1e8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a13      	ldr	r2, [pc, #76]	@ (8003210 <HAL_ADC_ConfigChannel+0x1ec>)
 80031c4:	fba2 2303 	umull	r2, r3, r2, r3
 80031c8:	0c9a      	lsrs	r2, r3, #18
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031d4:	e002      	b.n	80031dc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	3b01      	subs	r3, #1
 80031da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f9      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x1b2>
 80031e2:	e007      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e8:	f043 0220 	orr.w	r2, r3, #32
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr
 8003208:	40012400 	.word	0x40012400
 800320c:	20000080 	.word	0x20000080
 8003210:	431bde83 	.word	0x431bde83

08003214 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b01      	cmp	r3, #1
 8003230:	d040      	beq.n	80032b4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0201 	orr.w	r2, r2, #1
 8003240:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003242:	4b1f      	ldr	r3, [pc, #124]	@ (80032c0 <ADC_Enable+0xac>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1f      	ldr	r2, [pc, #124]	@ (80032c4 <ADC_Enable+0xb0>)
 8003248:	fba2 2303 	umull	r2, r3, r2, r3
 800324c:	0c9b      	lsrs	r3, r3, #18
 800324e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003250:	e002      	b.n	8003258 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	3b01      	subs	r3, #1
 8003256:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f9      	bne.n	8003252 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800325e:	f7ff fcd9 	bl	8002c14 <HAL_GetTick>
 8003262:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003264:	e01f      	b.n	80032a6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003266:	f7ff fcd5 	bl	8002c14 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d918      	bls.n	80032a6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b01      	cmp	r3, #1
 8003280:	d011      	beq.n	80032a6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003286:	f043 0210 	orr.w	r2, r3, #16
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003292:	f043 0201 	orr.w	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e007      	b.n	80032b6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d1d8      	bne.n	8003266 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000080 	.word	0x20000080
 80032c4:	431bde83 	.word	0x431bde83

080032c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d12e      	bne.n	8003340 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0201 	bic.w	r2, r2, #1
 80032f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032f2:	f7ff fc8f 	bl	8002c14 <HAL_GetTick>
 80032f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032f8:	e01b      	b.n	8003332 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032fa:	f7ff fc8b 	bl	8002c14 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d914      	bls.n	8003332 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b01      	cmp	r3, #1
 8003314:	d10d      	bne.n	8003332 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331a:	f043 0210 	orr.w	r2, r3, #16
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003326:	f043 0201 	orr.w	r2, r3, #1
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e007      	b.n	8003342 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b01      	cmp	r3, #1
 800333e:	d0dc      	beq.n	80032fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003356:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003360:	2b00      	cmp	r3, #0
 8003362:	d127      	bne.n	80033b4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003368:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800337a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800337e:	d115      	bne.n	80033ac <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003384:	2b00      	cmp	r3, #0
 8003386:	d111      	bne.n	80033ac <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003398:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d105      	bne.n	80033ac <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a4:	f043 0201 	orr.w	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f7fd ffa3 	bl	80012f8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80033b2:	e004      	b.n	80033be <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	4798      	blx	r3
}
 80033be:	bf00      	nop
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f7ff fe13 	bl	8003000 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033da:	bf00      	nop
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ee:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003400:	f043 0204 	orr.w	r2, r3, #4
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f7ff fe02 	bl	8003012 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003418:	b590      	push	{r4, r7, lr}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_ADCEx_Calibration_Start+0x1e>
 8003432:	2302      	movs	r3, #2
 8003434:	e097      	b.n	8003566 <HAL_ADCEx_Calibration_Start+0x14e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff ff42 	bl	80032c8 <ADC_ConversionStop_Disable>
 8003444:	4603      	mov	r3, r0
 8003446:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7ff fee3 	bl	8003214 <ADC_Enable>
 800344e:	4603      	mov	r3, r0
 8003450:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003452:	7dfb      	ldrb	r3, [r7, #23]
 8003454:	2b00      	cmp	r3, #0
 8003456:	f040 8081 	bne.w	800355c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003462:	f023 0302 	bic.w	r3, r3, #2
 8003466:	f043 0202 	orr.w	r2, r3, #2
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800346e:	4b40      	ldr	r3, [pc, #256]	@ (8003570 <HAL_ADCEx_Calibration_Start+0x158>)
 8003470:	681c      	ldr	r4, [r3, #0]
 8003472:	2002      	movs	r0, #2
 8003474:	f003 fdb8 	bl	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003478:	4603      	mov	r3, r0
 800347a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800347e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003480:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003482:	e002      	b.n	800348a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	3b01      	subs	r3, #1
 8003488:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1f9      	bne.n	8003484 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0208 	orr.w	r2, r2, #8
 800349e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80034a0:	f7ff fbb8 	bl	8002c14 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80034a6:	e01b      	b.n	80034e0 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80034a8:	f7ff fbb4 	bl	8002c14 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b0a      	cmp	r3, #10
 80034b4:	d914      	bls.n	80034e0 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00d      	beq.n	80034e0 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c8:	f023 0312 	bic.w	r3, r3, #18
 80034cc:	f043 0210 	orr.w	r2, r3, #16
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e042      	b.n	8003566 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1dc      	bne.n	80034a8 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 0204 	orr.w	r2, r2, #4
 80034fc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80034fe:	f7ff fb89 	bl	8002c14 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003504:	e01b      	b.n	800353e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003506:	f7ff fb85 	bl	8002c14 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b0a      	cmp	r3, #10
 8003512:	d914      	bls.n	800353e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00d      	beq.n	800353e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003526:	f023 0312 	bic.w	r3, r3, #18
 800352a:	f043 0210 	orr.w	r2, r3, #16
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e013      	b.n	8003566 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1dc      	bne.n	8003506 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003550:	f023 0303 	bic.w	r3, r3, #3
 8003554:	f043 0201 	orr.w	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003564:	7dfb      	ldrb	r3, [r7, #23]
}
 8003566:	4618      	mov	r0, r3
 8003568:	371c      	adds	r7, #28
 800356a:	46bd      	mov	sp, r7
 800356c:	bd90      	pop	{r4, r7, pc}
 800356e:	bf00      	nop
 8003570:	20000080 	.word	0x20000080

08003574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003584:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003590:	4013      	ands	r3, r2
 8003592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800359c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035a6:	4a04      	ldr	r2, [pc, #16]	@ (80035b8 <__NVIC_SetPriorityGrouping+0x44>)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	60d3      	str	r3, [r2, #12]
}
 80035ac:	bf00      	nop
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c0:	4b04      	ldr	r3, [pc, #16]	@ (80035d4 <__NVIC_GetPriorityGrouping+0x18>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	f003 0307 	and.w	r3, r3, #7
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	db0b      	blt.n	8003602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	f003 021f 	and.w	r2, r3, #31
 80035f0:	4906      	ldr	r1, [pc, #24]	@ (800360c <__NVIC_EnableIRQ+0x34>)
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2001      	movs	r0, #1
 80035fa:	fa00 f202 	lsl.w	r2, r0, r2
 80035fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr
 800360c:	e000e100 	.word	0xe000e100

08003610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	6039      	str	r1, [r7, #0]
 800361a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800361c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003620:	2b00      	cmp	r3, #0
 8003622:	db0a      	blt.n	800363a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	b2da      	uxtb	r2, r3
 8003628:	490c      	ldr	r1, [pc, #48]	@ (800365c <__NVIC_SetPriority+0x4c>)
 800362a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362e:	0112      	lsls	r2, r2, #4
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	440b      	add	r3, r1
 8003634:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003638:	e00a      	b.n	8003650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	b2da      	uxtb	r2, r3
 800363e:	4908      	ldr	r1, [pc, #32]	@ (8003660 <__NVIC_SetPriority+0x50>)
 8003640:	79fb      	ldrb	r3, [r7, #7]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	3b04      	subs	r3, #4
 8003648:	0112      	lsls	r2, r2, #4
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	440b      	add	r3, r1
 800364e:	761a      	strb	r2, [r3, #24]
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	e000e100 	.word	0xe000e100
 8003660:	e000ed00 	.word	0xe000ed00

08003664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003664:	b480      	push	{r7}
 8003666:	b089      	sub	sp, #36	@ 0x24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f1c3 0307 	rsb	r3, r3, #7
 800367e:	2b04      	cmp	r3, #4
 8003680:	bf28      	it	cs
 8003682:	2304      	movcs	r3, #4
 8003684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	3304      	adds	r3, #4
 800368a:	2b06      	cmp	r3, #6
 800368c:	d902      	bls.n	8003694 <NVIC_EncodePriority+0x30>
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	3b03      	subs	r3, #3
 8003692:	e000      	b.n	8003696 <NVIC_EncodePriority+0x32>
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003698:	f04f 32ff 	mov.w	r2, #4294967295
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43da      	mvns	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	401a      	ands	r2, r3
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036ac:	f04f 31ff 	mov.w	r1, #4294967295
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	fa01 f303 	lsl.w	r3, r1, r3
 80036b6:	43d9      	mvns	r1, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036bc:	4313      	orrs	r3, r2
         );
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3724      	adds	r7, #36	@ 0x24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr

080036c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036d8:	d301      	bcc.n	80036de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036da:	2301      	movs	r3, #1
 80036dc:	e00f      	b.n	80036fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036de:	4a0a      	ldr	r2, [pc, #40]	@ (8003708 <SysTick_Config+0x40>)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036e6:	210f      	movs	r1, #15
 80036e8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ec:	f7ff ff90 	bl	8003610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f0:	4b05      	ldr	r3, [pc, #20]	@ (8003708 <SysTick_Config+0x40>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036f6:	4b04      	ldr	r3, [pc, #16]	@ (8003708 <SysTick_Config+0x40>)
 80036f8:	2207      	movs	r2, #7
 80036fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	e000e010 	.word	0xe000e010

0800370c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff ff2d 	bl	8003574 <__NVIC_SetPriorityGrouping>
}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003722:	b580      	push	{r7, lr}
 8003724:	b086      	sub	sp, #24
 8003726:	af00      	add	r7, sp, #0
 8003728:	4603      	mov	r3, r0
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	607a      	str	r2, [r7, #4]
 800372e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003734:	f7ff ff42 	bl	80035bc <__NVIC_GetPriorityGrouping>
 8003738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	6978      	ldr	r0, [r7, #20]
 8003740:	f7ff ff90 	bl	8003664 <NVIC_EncodePriority>
 8003744:	4602      	mov	r2, r0
 8003746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800374a:	4611      	mov	r1, r2
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff ff5f 	bl	8003610 <__NVIC_SetPriority>
}
 8003752:	bf00      	nop
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	4603      	mov	r3, r0
 8003762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff ff35 	bl	80035d8 <__NVIC_EnableIRQ>
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff ffa2 	bl	80036c8 <SysTick_Config>
 8003784:	4603      	mov	r3, r0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e00e      	b.n	80037be <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	795b      	ldrb	r3, [r3, #5]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d105      	bne.n	80037b6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7fd fe41 	bl	8001438 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e014      	b.n	8003802 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	791b      	ldrb	r3, [r3, #4]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d105      	bne.n	80037ee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fd fe77 	bl	80014dc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2202      	movs	r2, #2
 80037f2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e092      	b.n	800394a <HAL_DAC_Start_DMA+0x13e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	795b      	ldrb	r3, [r3, #5]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_DAC_Start_DMA+0x24>
 800382c:	2302      	movs	r3, #2
 800382e:	e08c      	b.n	800394a <HAL_DAC_Start_DMA+0x13e>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2201      	movs	r2, #1
 8003834:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2202      	movs	r2, #2
 800383a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d129      	bne.n	8003896 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	4a43      	ldr	r2, [pc, #268]	@ (8003954 <HAL_DAC_Start_DMA+0x148>)
 8003848:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	4a42      	ldr	r2, [pc, #264]	@ (8003958 <HAL_DAC_Start_DMA+0x14c>)
 8003850:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	4a41      	ldr	r2, [pc, #260]	@ (800395c <HAL_DAC_Start_DMA+0x150>)
 8003858:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003868:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_DAC_Start_DMA+0x6c>
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	2b04      	cmp	r3, #4
 8003874:	d005      	beq.n	8003882 <HAL_DAC_Start_DMA+0x76>
 8003876:	e009      	b.n	800388c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3308      	adds	r3, #8
 800387e:	613b      	str	r3, [r7, #16]
        break;
 8003880:	e033      	b.n	80038ea <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	330c      	adds	r3, #12
 8003888:	613b      	str	r3, [r7, #16]
        break;
 800388a:	e02e      	b.n	80038ea <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3310      	adds	r3, #16
 8003892:	613b      	str	r3, [r7, #16]
        break;
 8003894:	e029      	b.n	80038ea <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	4a31      	ldr	r2, [pc, #196]	@ (8003960 <HAL_DAC_Start_DMA+0x154>)
 800389c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	4a30      	ldr	r2, [pc, #192]	@ (8003964 <HAL_DAC_Start_DMA+0x158>)
 80038a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	4a2f      	ldr	r2, [pc, #188]	@ (8003968 <HAL_DAC_Start_DMA+0x15c>)
 80038ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80038bc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_DAC_Start_DMA+0xc0>
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d005      	beq.n	80038d6 <HAL_DAC_Start_DMA+0xca>
 80038ca:	e009      	b.n	80038e0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3314      	adds	r3, #20
 80038d2:	613b      	str	r3, [r7, #16]
        break;
 80038d4:	e009      	b.n	80038ea <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3318      	adds	r3, #24
 80038dc:	613b      	str	r3, [r7, #16]
        break;
 80038de:	e004      	b.n	80038ea <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	331c      	adds	r3, #28
 80038e6:	613b      	str	r3, [r7, #16]
        break;
 80038e8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d109      	bne.n	8003904 <HAL_DAC_Start_DMA+0xf8>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* DAC_CR_DMAUDRIE1 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6898      	ldr	r0, [r3, #8]
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	f000 f99f 	bl	8003c3c <HAL_DMA_Start_IT>
 80038fe:	4603      	mov	r3, r0
 8003900:	75fb      	strb	r3, [r7, #23]
 8003902:	e008      	b.n	8003916 <HAL_DAC_Start_DMA+0x10a>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
#endif /* DAC_CR_DMAUDRIE2 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	68d8      	ldr	r0, [r3, #12]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	f000 f995 	bl	8003c3c <HAL_DMA_Start_IT>
 8003912:	4603      	mov	r3, r0
 8003914:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800391c:	7dfb      	ldrb	r3, [r7, #23]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10c      	bne.n	800393c <HAL_DAC_Start_DMA+0x130>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6819      	ldr	r1, [r3, #0]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2201      	movs	r2, #1
 8003930:	409a      	lsls	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	e005      	b.n	8003948 <HAL_DAC_Start_DMA+0x13c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	f043 0204 	orr.w	r2, r3, #4
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003948:	7dfb      	ldrb	r3, [r7, #23]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	08003a41 	.word	0x08003a41
 8003958:	08003a63 	.word	0x08003a63
 800395c:	08003a7f 	.word	0x08003a7f
 8003960:	08003ae3 	.word	0x08003ae3
 8003964:	08003b05 	.word	0x08003b05
 8003968:	08003b21 	.word	0x08003b21

0800396c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr

0800397e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr

08003990 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003990:	b480      	push	{r7}
 8003992:	b089      	sub	sp, #36	@ 0x24
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HAL_DAC_ConfigChannel+0x1c>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e042      	b.n	8003a36 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	795b      	ldrb	r3, [r3, #5]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_DAC_ConfigChannel+0x2c>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e03c      	b.n	8003a36 <HAL_DAC_ConfigChannel+0xa6>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2201      	movs	r2, #1
 80039c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2202      	movs	r2, #2
 80039c6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6819      	ldr	r1, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f003 0310 	and.w	r3, r3, #16
 8003a18:	22c0      	movs	r2, #192	@ 0xc0
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43da      	mvns	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	400a      	ands	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003a34:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3724      	adds	r7, #36	@ 0x24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr

08003a40 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f7fd fdd8 	bl	8001604 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2201      	movs	r2, #1
 8003a58:	711a      	strb	r2, [r3, #4]
}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f7ff ff7b 	bl	800396c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003a76:	bf00      	nop
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b084      	sub	sp, #16
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	f043 0204 	orr.w	r2, r3, #4
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f7ff ff70 	bl	800397e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	711a      	strb	r2, [r3, #4]
}
 8003aa4:	bf00      	nop
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr

08003abe <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr

08003ad0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr

08003ae2 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aee:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f7ff ffdb 	bl	8003aac <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2201      	movs	r2, #1
 8003afa:	711a      	strb	r2, [r3, #4]
}
 8003afc:	bf00      	nop
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f7ff ffd3 	bl	8003abe <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003b18:	bf00      	nop
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f043 0204 	orr.w	r2, r3, #4
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f7ff ffc8 	bl	8003ad0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2201      	movs	r2, #1
 8003b44:	711a      	strb	r2, [r3, #4]
}
 8003b46:	bf00      	nop
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e059      	b.n	8003c1a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	4b2d      	ldr	r3, [pc, #180]	@ (8003c24 <HAL_DMA_Init+0xd4>)
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d80f      	bhi.n	8003b92 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	4b2b      	ldr	r3, [pc, #172]	@ (8003c28 <HAL_DMA_Init+0xd8>)
 8003b7a:	4413      	add	r3, r2
 8003b7c:	4a2b      	ldr	r2, [pc, #172]	@ (8003c2c <HAL_DMA_Init+0xdc>)
 8003b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b82:	091b      	lsrs	r3, r3, #4
 8003b84:	009a      	lsls	r2, r3, #2
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a28      	ldr	r2, [pc, #160]	@ (8003c30 <HAL_DMA_Init+0xe0>)
 8003b8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003b90:	e00e      	b.n	8003bb0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	4b26      	ldr	r3, [pc, #152]	@ (8003c34 <HAL_DMA_Init+0xe4>)
 8003b9a:	4413      	add	r3, r2
 8003b9c:	4a23      	ldr	r2, [pc, #140]	@ (8003c2c <HAL_DMA_Init+0xdc>)
 8003b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba2:	091b      	lsrs	r3, r3, #4
 8003ba4:	009a      	lsls	r2, r3, #2
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a22      	ldr	r2, [pc, #136]	@ (8003c38 <HAL_DMA_Init+0xe8>)
 8003bae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003bc6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003bca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003be0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr
 8003c24:	40020407 	.word	0x40020407
 8003c28:	bffdfff8 	.word	0xbffdfff8
 8003c2c:	cccccccd 	.word	0xcccccccd
 8003c30:	40020000 	.word	0x40020000
 8003c34:	bffdfbf8 	.word	0xbffdfbf8
 8003c38:	40020400 	.word	0x40020400

08003c3c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_DMA_Start_IT+0x20>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e04b      	b.n	8003cf4 <HAL_DMA_Start_IT+0xb8>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d13a      	bne.n	8003ce6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0201 	bic.w	r2, r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 fbb1 	bl	80043fc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d008      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f042 020e 	orr.w	r2, r2, #14
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	e00f      	b.n	8003cd4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0204 	bic.w	r2, r2, #4
 8003cc2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 020a 	orr.w	r2, r2, #10
 8003cd2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e005      	b.n	8003cf2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d008      	beq.n	8003d26 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2204      	movs	r2, #4
 8003d18:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e020      	b.n	8003d68 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 020e 	bic.w	r2, r2, #14
 8003d34:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0201 	bic.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d4e:	2101      	movs	r1, #1
 8003d50:	fa01 f202 	lsl.w	r2, r1, r2
 8003d54:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr
	...

08003d74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d005      	beq.n	8003d98 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2204      	movs	r2, #4
 8003d90:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	73fb      	strb	r3, [r7, #15]
 8003d96:	e0d6      	b.n	8003f46 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 020e 	bic.w	r2, r2, #14
 8003da6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0201 	bic.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4b64      	ldr	r3, [pc, #400]	@ (8003f50 <HAL_DMA_Abort_IT+0x1dc>)
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d958      	bls.n	8003e76 <HAL_DMA_Abort_IT+0x102>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a62      	ldr	r2, [pc, #392]	@ (8003f54 <HAL_DMA_Abort_IT+0x1e0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d04f      	beq.n	8003e6e <HAL_DMA_Abort_IT+0xfa>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a61      	ldr	r2, [pc, #388]	@ (8003f58 <HAL_DMA_Abort_IT+0x1e4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d048      	beq.n	8003e6a <HAL_DMA_Abort_IT+0xf6>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a5f      	ldr	r2, [pc, #380]	@ (8003f5c <HAL_DMA_Abort_IT+0x1e8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d040      	beq.n	8003e64 <HAL_DMA_Abort_IT+0xf0>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a5e      	ldr	r2, [pc, #376]	@ (8003f60 <HAL_DMA_Abort_IT+0x1ec>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d038      	beq.n	8003e5e <HAL_DMA_Abort_IT+0xea>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a5c      	ldr	r2, [pc, #368]	@ (8003f64 <HAL_DMA_Abort_IT+0x1f0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d030      	beq.n	8003e58 <HAL_DMA_Abort_IT+0xe4>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a5b      	ldr	r2, [pc, #364]	@ (8003f68 <HAL_DMA_Abort_IT+0x1f4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d028      	beq.n	8003e52 <HAL_DMA_Abort_IT+0xde>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a52      	ldr	r2, [pc, #328]	@ (8003f50 <HAL_DMA_Abort_IT+0x1dc>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d020      	beq.n	8003e4c <HAL_DMA_Abort_IT+0xd8>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a57      	ldr	r2, [pc, #348]	@ (8003f6c <HAL_DMA_Abort_IT+0x1f8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d019      	beq.n	8003e48 <HAL_DMA_Abort_IT+0xd4>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a55      	ldr	r2, [pc, #340]	@ (8003f70 <HAL_DMA_Abort_IT+0x1fc>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d012      	beq.n	8003e44 <HAL_DMA_Abort_IT+0xd0>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a54      	ldr	r2, [pc, #336]	@ (8003f74 <HAL_DMA_Abort_IT+0x200>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d00a      	beq.n	8003e3e <HAL_DMA_Abort_IT+0xca>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a52      	ldr	r2, [pc, #328]	@ (8003f78 <HAL_DMA_Abort_IT+0x204>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d102      	bne.n	8003e38 <HAL_DMA_Abort_IT+0xc4>
 8003e32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e36:	e01b      	b.n	8003e70 <HAL_DMA_Abort_IT+0xfc>
 8003e38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e3c:	e018      	b.n	8003e70 <HAL_DMA_Abort_IT+0xfc>
 8003e3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e42:	e015      	b.n	8003e70 <HAL_DMA_Abort_IT+0xfc>
 8003e44:	2310      	movs	r3, #16
 8003e46:	e013      	b.n	8003e70 <HAL_DMA_Abort_IT+0xfc>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e011      	b.n	8003e70 <HAL_DMA_Abort_IT+0xfc>
 8003e4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e50:	e00e      	b.n	8003e70 <HAL_DMA_Abort_IT+0xfc>
 8003e52:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003e56:	e00b      	b.n	8003e70 <HAL_DMA_Abort_IT+0xfc>
 8003e58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e5c:	e008      	b.n	8003e70 <HAL_DMA_Abort_IT+0xfc>
 8003e5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e62:	e005      	b.n	8003e70 <HAL_DMA_Abort_IT+0xfc>
 8003e64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e68:	e002      	b.n	8003e70 <HAL_DMA_Abort_IT+0xfc>
 8003e6a:	2310      	movs	r3, #16
 8003e6c:	e000      	b.n	8003e70 <HAL_DMA_Abort_IT+0xfc>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	4a42      	ldr	r2, [pc, #264]	@ (8003f7c <HAL_DMA_Abort_IT+0x208>)
 8003e72:	6053      	str	r3, [r2, #4]
 8003e74:	e057      	b.n	8003f26 <HAL_DMA_Abort_IT+0x1b2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a36      	ldr	r2, [pc, #216]	@ (8003f54 <HAL_DMA_Abort_IT+0x1e0>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d04f      	beq.n	8003f20 <HAL_DMA_Abort_IT+0x1ac>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a34      	ldr	r2, [pc, #208]	@ (8003f58 <HAL_DMA_Abort_IT+0x1e4>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d048      	beq.n	8003f1c <HAL_DMA_Abort_IT+0x1a8>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a33      	ldr	r2, [pc, #204]	@ (8003f5c <HAL_DMA_Abort_IT+0x1e8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d040      	beq.n	8003f16 <HAL_DMA_Abort_IT+0x1a2>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a31      	ldr	r2, [pc, #196]	@ (8003f60 <HAL_DMA_Abort_IT+0x1ec>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d038      	beq.n	8003f10 <HAL_DMA_Abort_IT+0x19c>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a30      	ldr	r2, [pc, #192]	@ (8003f64 <HAL_DMA_Abort_IT+0x1f0>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d030      	beq.n	8003f0a <HAL_DMA_Abort_IT+0x196>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a2e      	ldr	r2, [pc, #184]	@ (8003f68 <HAL_DMA_Abort_IT+0x1f4>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d028      	beq.n	8003f04 <HAL_DMA_Abort_IT+0x190>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a26      	ldr	r2, [pc, #152]	@ (8003f50 <HAL_DMA_Abort_IT+0x1dc>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d020      	beq.n	8003efe <HAL_DMA_Abort_IT+0x18a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a2a      	ldr	r2, [pc, #168]	@ (8003f6c <HAL_DMA_Abort_IT+0x1f8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d019      	beq.n	8003efa <HAL_DMA_Abort_IT+0x186>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a29      	ldr	r2, [pc, #164]	@ (8003f70 <HAL_DMA_Abort_IT+0x1fc>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d012      	beq.n	8003ef6 <HAL_DMA_Abort_IT+0x182>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a27      	ldr	r2, [pc, #156]	@ (8003f74 <HAL_DMA_Abort_IT+0x200>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_DMA_Abort_IT+0x17c>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a26      	ldr	r2, [pc, #152]	@ (8003f78 <HAL_DMA_Abort_IT+0x204>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d102      	bne.n	8003eea <HAL_DMA_Abort_IT+0x176>
 8003ee4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ee8:	e01b      	b.n	8003f22 <HAL_DMA_Abort_IT+0x1ae>
 8003eea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003eee:	e018      	b.n	8003f22 <HAL_DMA_Abort_IT+0x1ae>
 8003ef0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ef4:	e015      	b.n	8003f22 <HAL_DMA_Abort_IT+0x1ae>
 8003ef6:	2310      	movs	r3, #16
 8003ef8:	e013      	b.n	8003f22 <HAL_DMA_Abort_IT+0x1ae>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e011      	b.n	8003f22 <HAL_DMA_Abort_IT+0x1ae>
 8003efe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f02:	e00e      	b.n	8003f22 <HAL_DMA_Abort_IT+0x1ae>
 8003f04:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003f08:	e00b      	b.n	8003f22 <HAL_DMA_Abort_IT+0x1ae>
 8003f0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003f0e:	e008      	b.n	8003f22 <HAL_DMA_Abort_IT+0x1ae>
 8003f10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f14:	e005      	b.n	8003f22 <HAL_DMA_Abort_IT+0x1ae>
 8003f16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f1a:	e002      	b.n	8003f22 <HAL_DMA_Abort_IT+0x1ae>
 8003f1c:	2310      	movs	r3, #16
 8003f1e:	e000      	b.n	8003f22 <HAL_DMA_Abort_IT+0x1ae>
 8003f20:	2301      	movs	r3, #1
 8003f22:	4a17      	ldr	r2, [pc, #92]	@ (8003f80 <HAL_DMA_Abort_IT+0x20c>)
 8003f24:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	4798      	blx	r3
    } 
  }
  return status;
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40020080 	.word	0x40020080
 8003f54:	40020008 	.word	0x40020008
 8003f58:	4002001c 	.word	0x4002001c
 8003f5c:	40020030 	.word	0x40020030
 8003f60:	40020044 	.word	0x40020044
 8003f64:	40020058 	.word	0x40020058
 8003f68:	4002006c 	.word	0x4002006c
 8003f6c:	40020408 	.word	0x40020408
 8003f70:	4002041c 	.word	0x4002041c
 8003f74:	40020430 	.word	0x40020430
 8003f78:	40020444 	.word	0x40020444
 8003f7c:	40020400 	.word	0x40020400
 8003f80:	40020000 	.word	0x40020000

08003f84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	409a      	lsls	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80f1 	beq.w	8004190 <HAL_DMA_IRQHandler+0x20c>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 80eb 	beq.w	8004190 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d107      	bne.n	8003fd8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0204 	bic.w	r2, r2, #4
 8003fd6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4b5f      	ldr	r3, [pc, #380]	@ (800415c <HAL_DMA_IRQHandler+0x1d8>)
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d958      	bls.n	8004096 <HAL_DMA_IRQHandler+0x112>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a5d      	ldr	r2, [pc, #372]	@ (8004160 <HAL_DMA_IRQHandler+0x1dc>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d04f      	beq.n	800408e <HAL_DMA_IRQHandler+0x10a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a5c      	ldr	r2, [pc, #368]	@ (8004164 <HAL_DMA_IRQHandler+0x1e0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d048      	beq.n	800408a <HAL_DMA_IRQHandler+0x106>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a5a      	ldr	r2, [pc, #360]	@ (8004168 <HAL_DMA_IRQHandler+0x1e4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d040      	beq.n	8004084 <HAL_DMA_IRQHandler+0x100>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a59      	ldr	r2, [pc, #356]	@ (800416c <HAL_DMA_IRQHandler+0x1e8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d038      	beq.n	800407e <HAL_DMA_IRQHandler+0xfa>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a57      	ldr	r2, [pc, #348]	@ (8004170 <HAL_DMA_IRQHandler+0x1ec>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d030      	beq.n	8004078 <HAL_DMA_IRQHandler+0xf4>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a56      	ldr	r2, [pc, #344]	@ (8004174 <HAL_DMA_IRQHandler+0x1f0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d028      	beq.n	8004072 <HAL_DMA_IRQHandler+0xee>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a4d      	ldr	r2, [pc, #308]	@ (800415c <HAL_DMA_IRQHandler+0x1d8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d020      	beq.n	800406c <HAL_DMA_IRQHandler+0xe8>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a52      	ldr	r2, [pc, #328]	@ (8004178 <HAL_DMA_IRQHandler+0x1f4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d019      	beq.n	8004068 <HAL_DMA_IRQHandler+0xe4>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a50      	ldr	r2, [pc, #320]	@ (800417c <HAL_DMA_IRQHandler+0x1f8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d012      	beq.n	8004064 <HAL_DMA_IRQHandler+0xe0>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a4f      	ldr	r2, [pc, #316]	@ (8004180 <HAL_DMA_IRQHandler+0x1fc>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00a      	beq.n	800405e <HAL_DMA_IRQHandler+0xda>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a4d      	ldr	r2, [pc, #308]	@ (8004184 <HAL_DMA_IRQHandler+0x200>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d102      	bne.n	8004058 <HAL_DMA_IRQHandler+0xd4>
 8004052:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004056:	e01b      	b.n	8004090 <HAL_DMA_IRQHandler+0x10c>
 8004058:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800405c:	e018      	b.n	8004090 <HAL_DMA_IRQHandler+0x10c>
 800405e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004062:	e015      	b.n	8004090 <HAL_DMA_IRQHandler+0x10c>
 8004064:	2340      	movs	r3, #64	@ 0x40
 8004066:	e013      	b.n	8004090 <HAL_DMA_IRQHandler+0x10c>
 8004068:	2304      	movs	r3, #4
 800406a:	e011      	b.n	8004090 <HAL_DMA_IRQHandler+0x10c>
 800406c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004070:	e00e      	b.n	8004090 <HAL_DMA_IRQHandler+0x10c>
 8004072:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004076:	e00b      	b.n	8004090 <HAL_DMA_IRQHandler+0x10c>
 8004078:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800407c:	e008      	b.n	8004090 <HAL_DMA_IRQHandler+0x10c>
 800407e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004082:	e005      	b.n	8004090 <HAL_DMA_IRQHandler+0x10c>
 8004084:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004088:	e002      	b.n	8004090 <HAL_DMA_IRQHandler+0x10c>
 800408a:	2340      	movs	r3, #64	@ 0x40
 800408c:	e000      	b.n	8004090 <HAL_DMA_IRQHandler+0x10c>
 800408e:	2304      	movs	r3, #4
 8004090:	4a3d      	ldr	r2, [pc, #244]	@ (8004188 <HAL_DMA_IRQHandler+0x204>)
 8004092:	6053      	str	r3, [r2, #4]
 8004094:	e057      	b.n	8004146 <HAL_DMA_IRQHandler+0x1c2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a31      	ldr	r2, [pc, #196]	@ (8004160 <HAL_DMA_IRQHandler+0x1dc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d04f      	beq.n	8004140 <HAL_DMA_IRQHandler+0x1bc>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a2f      	ldr	r2, [pc, #188]	@ (8004164 <HAL_DMA_IRQHandler+0x1e0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d048      	beq.n	800413c <HAL_DMA_IRQHandler+0x1b8>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a2e      	ldr	r2, [pc, #184]	@ (8004168 <HAL_DMA_IRQHandler+0x1e4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d040      	beq.n	8004136 <HAL_DMA_IRQHandler+0x1b2>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a2c      	ldr	r2, [pc, #176]	@ (800416c <HAL_DMA_IRQHandler+0x1e8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d038      	beq.n	8004130 <HAL_DMA_IRQHandler+0x1ac>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004170 <HAL_DMA_IRQHandler+0x1ec>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d030      	beq.n	800412a <HAL_DMA_IRQHandler+0x1a6>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a29      	ldr	r2, [pc, #164]	@ (8004174 <HAL_DMA_IRQHandler+0x1f0>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d028      	beq.n	8004124 <HAL_DMA_IRQHandler+0x1a0>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a21      	ldr	r2, [pc, #132]	@ (800415c <HAL_DMA_IRQHandler+0x1d8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d020      	beq.n	800411e <HAL_DMA_IRQHandler+0x19a>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a25      	ldr	r2, [pc, #148]	@ (8004178 <HAL_DMA_IRQHandler+0x1f4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d019      	beq.n	800411a <HAL_DMA_IRQHandler+0x196>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a24      	ldr	r2, [pc, #144]	@ (800417c <HAL_DMA_IRQHandler+0x1f8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d012      	beq.n	8004116 <HAL_DMA_IRQHandler+0x192>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a22      	ldr	r2, [pc, #136]	@ (8004180 <HAL_DMA_IRQHandler+0x1fc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00a      	beq.n	8004110 <HAL_DMA_IRQHandler+0x18c>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a21      	ldr	r2, [pc, #132]	@ (8004184 <HAL_DMA_IRQHandler+0x200>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d102      	bne.n	800410a <HAL_DMA_IRQHandler+0x186>
 8004104:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004108:	e01b      	b.n	8004142 <HAL_DMA_IRQHandler+0x1be>
 800410a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800410e:	e018      	b.n	8004142 <HAL_DMA_IRQHandler+0x1be>
 8004110:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004114:	e015      	b.n	8004142 <HAL_DMA_IRQHandler+0x1be>
 8004116:	2340      	movs	r3, #64	@ 0x40
 8004118:	e013      	b.n	8004142 <HAL_DMA_IRQHandler+0x1be>
 800411a:	2304      	movs	r3, #4
 800411c:	e011      	b.n	8004142 <HAL_DMA_IRQHandler+0x1be>
 800411e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004122:	e00e      	b.n	8004142 <HAL_DMA_IRQHandler+0x1be>
 8004124:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004128:	e00b      	b.n	8004142 <HAL_DMA_IRQHandler+0x1be>
 800412a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800412e:	e008      	b.n	8004142 <HAL_DMA_IRQHandler+0x1be>
 8004130:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004134:	e005      	b.n	8004142 <HAL_DMA_IRQHandler+0x1be>
 8004136:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800413a:	e002      	b.n	8004142 <HAL_DMA_IRQHandler+0x1be>
 800413c:	2340      	movs	r3, #64	@ 0x40
 800413e:	e000      	b.n	8004142 <HAL_DMA_IRQHandler+0x1be>
 8004140:	2304      	movs	r3, #4
 8004142:	4a12      	ldr	r2, [pc, #72]	@ (800418c <HAL_DMA_IRQHandler+0x208>)
 8004144:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 8136 	beq.w	80043bc <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004158:	e130      	b.n	80043bc <HAL_DMA_IRQHandler+0x438>
 800415a:	bf00      	nop
 800415c:	40020080 	.word	0x40020080
 8004160:	40020008 	.word	0x40020008
 8004164:	4002001c 	.word	0x4002001c
 8004168:	40020030 	.word	0x40020030
 800416c:	40020044 	.word	0x40020044
 8004170:	40020058 	.word	0x40020058
 8004174:	4002006c 	.word	0x4002006c
 8004178:	40020408 	.word	0x40020408
 800417c:	4002041c 	.word	0x4002041c
 8004180:	40020430 	.word	0x40020430
 8004184:	40020444 	.word	0x40020444
 8004188:	40020400 	.word	0x40020400
 800418c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004194:	2202      	movs	r2, #2
 8004196:	409a      	lsls	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4013      	ands	r3, r2
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 80dd 	beq.w	800435c <HAL_DMA_IRQHandler+0x3d8>
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 80d7 	beq.w	800435c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10b      	bne.n	80041d4 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 020a 	bic.w	r2, r2, #10
 80041ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	4b7b      	ldr	r3, [pc, #492]	@ (80043c8 <HAL_DMA_IRQHandler+0x444>)
 80041dc:	429a      	cmp	r2, r3
 80041de:	d958      	bls.n	8004292 <HAL_DMA_IRQHandler+0x30e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a79      	ldr	r2, [pc, #484]	@ (80043cc <HAL_DMA_IRQHandler+0x448>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d04f      	beq.n	800428a <HAL_DMA_IRQHandler+0x306>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a78      	ldr	r2, [pc, #480]	@ (80043d0 <HAL_DMA_IRQHandler+0x44c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d048      	beq.n	8004286 <HAL_DMA_IRQHandler+0x302>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a76      	ldr	r2, [pc, #472]	@ (80043d4 <HAL_DMA_IRQHandler+0x450>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d040      	beq.n	8004280 <HAL_DMA_IRQHandler+0x2fc>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a75      	ldr	r2, [pc, #468]	@ (80043d8 <HAL_DMA_IRQHandler+0x454>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d038      	beq.n	800427a <HAL_DMA_IRQHandler+0x2f6>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a73      	ldr	r2, [pc, #460]	@ (80043dc <HAL_DMA_IRQHandler+0x458>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d030      	beq.n	8004274 <HAL_DMA_IRQHandler+0x2f0>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a72      	ldr	r2, [pc, #456]	@ (80043e0 <HAL_DMA_IRQHandler+0x45c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d028      	beq.n	800426e <HAL_DMA_IRQHandler+0x2ea>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a69      	ldr	r2, [pc, #420]	@ (80043c8 <HAL_DMA_IRQHandler+0x444>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d020      	beq.n	8004268 <HAL_DMA_IRQHandler+0x2e4>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a6e      	ldr	r2, [pc, #440]	@ (80043e4 <HAL_DMA_IRQHandler+0x460>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d019      	beq.n	8004264 <HAL_DMA_IRQHandler+0x2e0>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a6c      	ldr	r2, [pc, #432]	@ (80043e8 <HAL_DMA_IRQHandler+0x464>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d012      	beq.n	8004260 <HAL_DMA_IRQHandler+0x2dc>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a6b      	ldr	r2, [pc, #428]	@ (80043ec <HAL_DMA_IRQHandler+0x468>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00a      	beq.n	800425a <HAL_DMA_IRQHandler+0x2d6>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a69      	ldr	r2, [pc, #420]	@ (80043f0 <HAL_DMA_IRQHandler+0x46c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d102      	bne.n	8004254 <HAL_DMA_IRQHandler+0x2d0>
 800424e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004252:	e01b      	b.n	800428c <HAL_DMA_IRQHandler+0x308>
 8004254:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004258:	e018      	b.n	800428c <HAL_DMA_IRQHandler+0x308>
 800425a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800425e:	e015      	b.n	800428c <HAL_DMA_IRQHandler+0x308>
 8004260:	2320      	movs	r3, #32
 8004262:	e013      	b.n	800428c <HAL_DMA_IRQHandler+0x308>
 8004264:	2302      	movs	r3, #2
 8004266:	e011      	b.n	800428c <HAL_DMA_IRQHandler+0x308>
 8004268:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800426c:	e00e      	b.n	800428c <HAL_DMA_IRQHandler+0x308>
 800426e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004272:	e00b      	b.n	800428c <HAL_DMA_IRQHandler+0x308>
 8004274:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004278:	e008      	b.n	800428c <HAL_DMA_IRQHandler+0x308>
 800427a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800427e:	e005      	b.n	800428c <HAL_DMA_IRQHandler+0x308>
 8004280:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004284:	e002      	b.n	800428c <HAL_DMA_IRQHandler+0x308>
 8004286:	2320      	movs	r3, #32
 8004288:	e000      	b.n	800428c <HAL_DMA_IRQHandler+0x308>
 800428a:	2302      	movs	r3, #2
 800428c:	4a59      	ldr	r2, [pc, #356]	@ (80043f4 <HAL_DMA_IRQHandler+0x470>)
 800428e:	6053      	str	r3, [r2, #4]
 8004290:	e057      	b.n	8004342 <HAL_DMA_IRQHandler+0x3be>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a4d      	ldr	r2, [pc, #308]	@ (80043cc <HAL_DMA_IRQHandler+0x448>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d04f      	beq.n	800433c <HAL_DMA_IRQHandler+0x3b8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a4b      	ldr	r2, [pc, #300]	@ (80043d0 <HAL_DMA_IRQHandler+0x44c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d048      	beq.n	8004338 <HAL_DMA_IRQHandler+0x3b4>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a4a      	ldr	r2, [pc, #296]	@ (80043d4 <HAL_DMA_IRQHandler+0x450>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d040      	beq.n	8004332 <HAL_DMA_IRQHandler+0x3ae>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a48      	ldr	r2, [pc, #288]	@ (80043d8 <HAL_DMA_IRQHandler+0x454>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d038      	beq.n	800432c <HAL_DMA_IRQHandler+0x3a8>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a47      	ldr	r2, [pc, #284]	@ (80043dc <HAL_DMA_IRQHandler+0x458>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d030      	beq.n	8004326 <HAL_DMA_IRQHandler+0x3a2>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a45      	ldr	r2, [pc, #276]	@ (80043e0 <HAL_DMA_IRQHandler+0x45c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d028      	beq.n	8004320 <HAL_DMA_IRQHandler+0x39c>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a3d      	ldr	r2, [pc, #244]	@ (80043c8 <HAL_DMA_IRQHandler+0x444>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d020      	beq.n	800431a <HAL_DMA_IRQHandler+0x396>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a41      	ldr	r2, [pc, #260]	@ (80043e4 <HAL_DMA_IRQHandler+0x460>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d019      	beq.n	8004316 <HAL_DMA_IRQHandler+0x392>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a40      	ldr	r2, [pc, #256]	@ (80043e8 <HAL_DMA_IRQHandler+0x464>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d012      	beq.n	8004312 <HAL_DMA_IRQHandler+0x38e>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a3e      	ldr	r2, [pc, #248]	@ (80043ec <HAL_DMA_IRQHandler+0x468>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00a      	beq.n	800430c <HAL_DMA_IRQHandler+0x388>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a3d      	ldr	r2, [pc, #244]	@ (80043f0 <HAL_DMA_IRQHandler+0x46c>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d102      	bne.n	8004306 <HAL_DMA_IRQHandler+0x382>
 8004300:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004304:	e01b      	b.n	800433e <HAL_DMA_IRQHandler+0x3ba>
 8004306:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800430a:	e018      	b.n	800433e <HAL_DMA_IRQHandler+0x3ba>
 800430c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004310:	e015      	b.n	800433e <HAL_DMA_IRQHandler+0x3ba>
 8004312:	2320      	movs	r3, #32
 8004314:	e013      	b.n	800433e <HAL_DMA_IRQHandler+0x3ba>
 8004316:	2302      	movs	r3, #2
 8004318:	e011      	b.n	800433e <HAL_DMA_IRQHandler+0x3ba>
 800431a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800431e:	e00e      	b.n	800433e <HAL_DMA_IRQHandler+0x3ba>
 8004320:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004324:	e00b      	b.n	800433e <HAL_DMA_IRQHandler+0x3ba>
 8004326:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800432a:	e008      	b.n	800433e <HAL_DMA_IRQHandler+0x3ba>
 800432c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004330:	e005      	b.n	800433e <HAL_DMA_IRQHandler+0x3ba>
 8004332:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004336:	e002      	b.n	800433e <HAL_DMA_IRQHandler+0x3ba>
 8004338:	2320      	movs	r3, #32
 800433a:	e000      	b.n	800433e <HAL_DMA_IRQHandler+0x3ba>
 800433c:	2302      	movs	r3, #2
 800433e:	4a2e      	ldr	r2, [pc, #184]	@ (80043f8 <HAL_DMA_IRQHandler+0x474>)
 8004340:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434e:	2b00      	cmp	r3, #0
 8004350:	d034      	beq.n	80043bc <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800435a:	e02f      	b.n	80043bc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004360:	2208      	movs	r2, #8
 8004362:	409a      	lsls	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4013      	ands	r3, r2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d028      	beq.n	80043be <HAL_DMA_IRQHandler+0x43a>
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b00      	cmp	r3, #0
 8004374:	d023      	beq.n	80043be <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 020e 	bic.w	r2, r2, #14
 8004384:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800438e:	2101      	movs	r1, #1
 8004390:	fa01 f202 	lsl.w	r2, r1, r2
 8004394:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d004      	beq.n	80043be <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	4798      	blx	r3
    }
  }
  return;
 80043bc:	bf00      	nop
 80043be:	bf00      	nop
}
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40020080 	.word	0x40020080
 80043cc:	40020008 	.word	0x40020008
 80043d0:	4002001c 	.word	0x4002001c
 80043d4:	40020030 	.word	0x40020030
 80043d8:	40020044 	.word	0x40020044
 80043dc:	40020058 	.word	0x40020058
 80043e0:	4002006c 	.word	0x4002006c
 80043e4:	40020408 	.word	0x40020408
 80043e8:	4002041c 	.word	0x4002041c
 80043ec:	40020430 	.word	0x40020430
 80043f0:	40020444 	.word	0x40020444
 80043f4:	40020400 	.word	0x40020400
 80043f8:	40020000 	.word	0x40020000

080043fc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004412:	2101      	movs	r1, #1
 8004414:	fa01 f202 	lsl.w	r2, r1, r2
 8004418:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	683a      	ldr	r2, [r7, #0]
 8004420:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b10      	cmp	r3, #16
 8004428:	d108      	bne.n	800443c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800443a:	e007      	b.n	800444c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	60da      	str	r2, [r3, #12]
}
 800444c:	bf00      	nop
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr
	...

08004458 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004458:	b480      	push	{r7}
 800445a:	b08b      	sub	sp, #44	@ 0x2c
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004462:	2300      	movs	r3, #0
 8004464:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004466:	2300      	movs	r3, #0
 8004468:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800446a:	e179      	b.n	8004760 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800446c:	2201      	movs	r2, #1
 800446e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	4013      	ands	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	429a      	cmp	r2, r3
 8004486:	f040 8168 	bne.w	800475a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	4a96      	ldr	r2, [pc, #600]	@ (80046e8 <HAL_GPIO_Init+0x290>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d05e      	beq.n	8004552 <HAL_GPIO_Init+0xfa>
 8004494:	4a94      	ldr	r2, [pc, #592]	@ (80046e8 <HAL_GPIO_Init+0x290>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d875      	bhi.n	8004586 <HAL_GPIO_Init+0x12e>
 800449a:	4a94      	ldr	r2, [pc, #592]	@ (80046ec <HAL_GPIO_Init+0x294>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d058      	beq.n	8004552 <HAL_GPIO_Init+0xfa>
 80044a0:	4a92      	ldr	r2, [pc, #584]	@ (80046ec <HAL_GPIO_Init+0x294>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d86f      	bhi.n	8004586 <HAL_GPIO_Init+0x12e>
 80044a6:	4a92      	ldr	r2, [pc, #584]	@ (80046f0 <HAL_GPIO_Init+0x298>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d052      	beq.n	8004552 <HAL_GPIO_Init+0xfa>
 80044ac:	4a90      	ldr	r2, [pc, #576]	@ (80046f0 <HAL_GPIO_Init+0x298>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d869      	bhi.n	8004586 <HAL_GPIO_Init+0x12e>
 80044b2:	4a90      	ldr	r2, [pc, #576]	@ (80046f4 <HAL_GPIO_Init+0x29c>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d04c      	beq.n	8004552 <HAL_GPIO_Init+0xfa>
 80044b8:	4a8e      	ldr	r2, [pc, #568]	@ (80046f4 <HAL_GPIO_Init+0x29c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d863      	bhi.n	8004586 <HAL_GPIO_Init+0x12e>
 80044be:	4a8e      	ldr	r2, [pc, #568]	@ (80046f8 <HAL_GPIO_Init+0x2a0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d046      	beq.n	8004552 <HAL_GPIO_Init+0xfa>
 80044c4:	4a8c      	ldr	r2, [pc, #560]	@ (80046f8 <HAL_GPIO_Init+0x2a0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d85d      	bhi.n	8004586 <HAL_GPIO_Init+0x12e>
 80044ca:	2b12      	cmp	r3, #18
 80044cc:	d82a      	bhi.n	8004524 <HAL_GPIO_Init+0xcc>
 80044ce:	2b12      	cmp	r3, #18
 80044d0:	d859      	bhi.n	8004586 <HAL_GPIO_Init+0x12e>
 80044d2:	a201      	add	r2, pc, #4	@ (adr r2, 80044d8 <HAL_GPIO_Init+0x80>)
 80044d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d8:	08004553 	.word	0x08004553
 80044dc:	0800452d 	.word	0x0800452d
 80044e0:	0800453f 	.word	0x0800453f
 80044e4:	08004581 	.word	0x08004581
 80044e8:	08004587 	.word	0x08004587
 80044ec:	08004587 	.word	0x08004587
 80044f0:	08004587 	.word	0x08004587
 80044f4:	08004587 	.word	0x08004587
 80044f8:	08004587 	.word	0x08004587
 80044fc:	08004587 	.word	0x08004587
 8004500:	08004587 	.word	0x08004587
 8004504:	08004587 	.word	0x08004587
 8004508:	08004587 	.word	0x08004587
 800450c:	08004587 	.word	0x08004587
 8004510:	08004587 	.word	0x08004587
 8004514:	08004587 	.word	0x08004587
 8004518:	08004587 	.word	0x08004587
 800451c:	08004535 	.word	0x08004535
 8004520:	08004549 	.word	0x08004549
 8004524:	4a75      	ldr	r2, [pc, #468]	@ (80046fc <HAL_GPIO_Init+0x2a4>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d013      	beq.n	8004552 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800452a:	e02c      	b.n	8004586 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	623b      	str	r3, [r7, #32]
          break;
 8004532:	e029      	b.n	8004588 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	3304      	adds	r3, #4
 800453a:	623b      	str	r3, [r7, #32]
          break;
 800453c:	e024      	b.n	8004588 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	3308      	adds	r3, #8
 8004544:	623b      	str	r3, [r7, #32]
          break;
 8004546:	e01f      	b.n	8004588 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	330c      	adds	r3, #12
 800454e:	623b      	str	r3, [r7, #32]
          break;
 8004550:	e01a      	b.n	8004588 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d102      	bne.n	8004560 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800455a:	2304      	movs	r3, #4
 800455c:	623b      	str	r3, [r7, #32]
          break;
 800455e:	e013      	b.n	8004588 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d105      	bne.n	8004574 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004568:	2308      	movs	r3, #8
 800456a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	611a      	str	r2, [r3, #16]
          break;
 8004572:	e009      	b.n	8004588 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004574:	2308      	movs	r3, #8
 8004576:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	615a      	str	r2, [r3, #20]
          break;
 800457e:	e003      	b.n	8004588 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004580:	2300      	movs	r3, #0
 8004582:	623b      	str	r3, [r7, #32]
          break;
 8004584:	e000      	b.n	8004588 <HAL_GPIO_Init+0x130>
          break;
 8004586:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	2bff      	cmp	r3, #255	@ 0xff
 800458c:	d801      	bhi.n	8004592 <HAL_GPIO_Init+0x13a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	e001      	b.n	8004596 <HAL_GPIO_Init+0x13e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3304      	adds	r3, #4
 8004596:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	2bff      	cmp	r3, #255	@ 0xff
 800459c:	d802      	bhi.n	80045a4 <HAL_GPIO_Init+0x14c>
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	e002      	b.n	80045aa <HAL_GPIO_Init+0x152>
 80045a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a6:	3b08      	subs	r3, #8
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	210f      	movs	r1, #15
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	fa01 f303 	lsl.w	r3, r1, r3
 80045b8:	43db      	mvns	r3, r3
 80045ba:	401a      	ands	r2, r3
 80045bc:	6a39      	ldr	r1, [r7, #32]
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	fa01 f303 	lsl.w	r3, r1, r3
 80045c4:	431a      	orrs	r2, r3
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 80c1 	beq.w	800475a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80045d8:	4b49      	ldr	r3, [pc, #292]	@ (8004700 <HAL_GPIO_Init+0x2a8>)
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	4a48      	ldr	r2, [pc, #288]	@ (8004700 <HAL_GPIO_Init+0x2a8>)
 80045de:	f043 0301 	orr.w	r3, r3, #1
 80045e2:	6193      	str	r3, [r2, #24]
 80045e4:	4b46      	ldr	r3, [pc, #280]	@ (8004700 <HAL_GPIO_Init+0x2a8>)
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80045f0:	4a44      	ldr	r2, [pc, #272]	@ (8004704 <HAL_GPIO_Init+0x2ac>)
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	089b      	lsrs	r3, r3, #2
 80045f6:	3302      	adds	r3, #2
 80045f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80045fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004600:	f003 0303 	and.w	r3, r3, #3
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	220f      	movs	r2, #15
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	43db      	mvns	r3, r3
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4013      	ands	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a3c      	ldr	r2, [pc, #240]	@ (8004708 <HAL_GPIO_Init+0x2b0>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d01f      	beq.n	800465c <HAL_GPIO_Init+0x204>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a3b      	ldr	r2, [pc, #236]	@ (800470c <HAL_GPIO_Init+0x2b4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d019      	beq.n	8004658 <HAL_GPIO_Init+0x200>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a3a      	ldr	r2, [pc, #232]	@ (8004710 <HAL_GPIO_Init+0x2b8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d013      	beq.n	8004654 <HAL_GPIO_Init+0x1fc>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a39      	ldr	r2, [pc, #228]	@ (8004714 <HAL_GPIO_Init+0x2bc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00d      	beq.n	8004650 <HAL_GPIO_Init+0x1f8>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a38      	ldr	r2, [pc, #224]	@ (8004718 <HAL_GPIO_Init+0x2c0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d007      	beq.n	800464c <HAL_GPIO_Init+0x1f4>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a37      	ldr	r2, [pc, #220]	@ (800471c <HAL_GPIO_Init+0x2c4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d101      	bne.n	8004648 <HAL_GPIO_Init+0x1f0>
 8004644:	2305      	movs	r3, #5
 8004646:	e00a      	b.n	800465e <HAL_GPIO_Init+0x206>
 8004648:	2306      	movs	r3, #6
 800464a:	e008      	b.n	800465e <HAL_GPIO_Init+0x206>
 800464c:	2304      	movs	r3, #4
 800464e:	e006      	b.n	800465e <HAL_GPIO_Init+0x206>
 8004650:	2303      	movs	r3, #3
 8004652:	e004      	b.n	800465e <HAL_GPIO_Init+0x206>
 8004654:	2302      	movs	r3, #2
 8004656:	e002      	b.n	800465e <HAL_GPIO_Init+0x206>
 8004658:	2301      	movs	r3, #1
 800465a:	e000      	b.n	800465e <HAL_GPIO_Init+0x206>
 800465c:	2300      	movs	r3, #0
 800465e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004660:	f002 0203 	and.w	r2, r2, #3
 8004664:	0092      	lsls	r2, r2, #2
 8004666:	4093      	lsls	r3, r2
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800466e:	4925      	ldr	r1, [pc, #148]	@ (8004704 <HAL_GPIO_Init+0x2ac>)
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	089b      	lsrs	r3, r3, #2
 8004674:	3302      	adds	r3, #2
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d006      	beq.n	8004696 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004688:	4b25      	ldr	r3, [pc, #148]	@ (8004720 <HAL_GPIO_Init+0x2c8>)
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	4924      	ldr	r1, [pc, #144]	@ (8004720 <HAL_GPIO_Init+0x2c8>)
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	4313      	orrs	r3, r2
 8004692:	608b      	str	r3, [r1, #8]
 8004694:	e006      	b.n	80046a4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004696:	4b22      	ldr	r3, [pc, #136]	@ (8004720 <HAL_GPIO_Init+0x2c8>)
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	43db      	mvns	r3, r3
 800469e:	4920      	ldr	r1, [pc, #128]	@ (8004720 <HAL_GPIO_Init+0x2c8>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d006      	beq.n	80046be <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80046b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004720 <HAL_GPIO_Init+0x2c8>)
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	491a      	ldr	r1, [pc, #104]	@ (8004720 <HAL_GPIO_Init+0x2c8>)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60cb      	str	r3, [r1, #12]
 80046bc:	e006      	b.n	80046cc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80046be:	4b18      	ldr	r3, [pc, #96]	@ (8004720 <HAL_GPIO_Init+0x2c8>)
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	43db      	mvns	r3, r3
 80046c6:	4916      	ldr	r1, [pc, #88]	@ (8004720 <HAL_GPIO_Init+0x2c8>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d025      	beq.n	8004724 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80046d8:	4b11      	ldr	r3, [pc, #68]	@ (8004720 <HAL_GPIO_Init+0x2c8>)
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	4910      	ldr	r1, [pc, #64]	@ (8004720 <HAL_GPIO_Init+0x2c8>)
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	604b      	str	r3, [r1, #4]
 80046e4:	e025      	b.n	8004732 <HAL_GPIO_Init+0x2da>
 80046e6:	bf00      	nop
 80046e8:	10320000 	.word	0x10320000
 80046ec:	10310000 	.word	0x10310000
 80046f0:	10220000 	.word	0x10220000
 80046f4:	10210000 	.word	0x10210000
 80046f8:	10120000 	.word	0x10120000
 80046fc:	10110000 	.word	0x10110000
 8004700:	40021000 	.word	0x40021000
 8004704:	40010000 	.word	0x40010000
 8004708:	40010800 	.word	0x40010800
 800470c:	40010c00 	.word	0x40010c00
 8004710:	40011000 	.word	0x40011000
 8004714:	40011400 	.word	0x40011400
 8004718:	40011800 	.word	0x40011800
 800471c:	40011c00 	.word	0x40011c00
 8004720:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004724:	4b15      	ldr	r3, [pc, #84]	@ (800477c <HAL_GPIO_Init+0x324>)
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	43db      	mvns	r3, r3
 800472c:	4913      	ldr	r1, [pc, #76]	@ (800477c <HAL_GPIO_Init+0x324>)
 800472e:	4013      	ands	r3, r2
 8004730:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d006      	beq.n	800474c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800473e:	4b0f      	ldr	r3, [pc, #60]	@ (800477c <HAL_GPIO_Init+0x324>)
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	490e      	ldr	r1, [pc, #56]	@ (800477c <HAL_GPIO_Init+0x324>)
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	4313      	orrs	r3, r2
 8004748:	600b      	str	r3, [r1, #0]
 800474a:	e006      	b.n	800475a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800474c:	4b0b      	ldr	r3, [pc, #44]	@ (800477c <HAL_GPIO_Init+0x324>)
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	43db      	mvns	r3, r3
 8004754:	4909      	ldr	r1, [pc, #36]	@ (800477c <HAL_GPIO_Init+0x324>)
 8004756:	4013      	ands	r3, r2
 8004758:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	3301      	adds	r3, #1
 800475e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004766:	fa22 f303 	lsr.w	r3, r2, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	f47f ae7e 	bne.w	800446c <HAL_GPIO_Init+0x14>
  }
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	372c      	adds	r7, #44	@ 0x2c
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr
 800477c:	40010400 	.word	0x40010400

08004780 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	887b      	ldrh	r3, [r7, #2]
 8004792:	4013      	ands	r3, r2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
 800479c:	e001      	b.n	80047a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800479e:	2300      	movs	r3, #0
 80047a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr

080047ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	460b      	mov	r3, r1
 80047b8:	807b      	strh	r3, [r7, #2]
 80047ba:	4613      	mov	r3, r2
 80047bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047be:	787b      	ldrb	r3, [r7, #1]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047c4:	887a      	ldrh	r2, [r7, #2]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80047ca:	e003      	b.n	80047d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80047cc:	887b      	ldrh	r3, [r7, #2]
 80047ce:	041a      	lsls	r2, r3, #16
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	611a      	str	r2, [r3, #16]
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr

080047de <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047de:	b480      	push	{r7}
 80047e0:	b085      	sub	sp, #20
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	460b      	mov	r3, r1
 80047e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047f0:	887a      	ldrh	r2, [r7, #2]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4013      	ands	r3, r2
 80047f6:	041a      	lsls	r2, r3, #16
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	43d9      	mvns	r1, r3
 80047fc:	887b      	ldrh	r3, [r7, #2]
 80047fe:	400b      	ands	r3, r1
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	611a      	str	r2, [r3, #16]
}
 8004806:	bf00      	nop
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr

08004810 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	4603      	mov	r3, r0
 8004818:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800481a:	4b08      	ldr	r3, [pc, #32]	@ (800483c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	88fb      	ldrh	r3, [r7, #6]
 8004820:	4013      	ands	r3, r2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d006      	beq.n	8004834 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004826:	4a05      	ldr	r2, [pc, #20]	@ (800483c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004828:	88fb      	ldrh	r3, [r7, #6]
 800482a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800482c:	88fb      	ldrh	r3, [r7, #6]
 800482e:	4618      	mov	r0, r3
 8004830:	f7fc ff5c 	bl	80016ec <HAL_GPIO_EXTI_Callback>
  }
}
 8004834:	bf00      	nop
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40010400 	.word	0x40010400

08004840 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e12b      	b.n	8004aaa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fd f892 	bl	8001990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2224      	movs	r2, #36	@ 0x24
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0201 	bic.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004892:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048a4:	f002 faa4 	bl	8006df0 <HAL_RCC_GetPCLK1Freq>
 80048a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	4a81      	ldr	r2, [pc, #516]	@ (8004ab4 <HAL_I2C_Init+0x274>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d807      	bhi.n	80048c4 <HAL_I2C_Init+0x84>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a80      	ldr	r2, [pc, #512]	@ (8004ab8 <HAL_I2C_Init+0x278>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	bf94      	ite	ls
 80048bc:	2301      	movls	r3, #1
 80048be:	2300      	movhi	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	e006      	b.n	80048d2 <HAL_I2C_Init+0x92>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4a7d      	ldr	r2, [pc, #500]	@ (8004abc <HAL_I2C_Init+0x27c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	bf94      	ite	ls
 80048cc:	2301      	movls	r3, #1
 80048ce:	2300      	movhi	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e0e7      	b.n	8004aaa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4a78      	ldr	r2, [pc, #480]	@ (8004ac0 <HAL_I2C_Init+0x280>)
 80048de:	fba2 2303 	umull	r2, r3, r2, r3
 80048e2:	0c9b      	lsrs	r3, r3, #18
 80048e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	4a6a      	ldr	r2, [pc, #424]	@ (8004ab4 <HAL_I2C_Init+0x274>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d802      	bhi.n	8004914 <HAL_I2C_Init+0xd4>
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	3301      	adds	r3, #1
 8004912:	e009      	b.n	8004928 <HAL_I2C_Init+0xe8>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800491a:	fb02 f303 	mul.w	r3, r2, r3
 800491e:	4a69      	ldr	r2, [pc, #420]	@ (8004ac4 <HAL_I2C_Init+0x284>)
 8004920:	fba2 2303 	umull	r2, r3, r2, r3
 8004924:	099b      	lsrs	r3, r3, #6
 8004926:	3301      	adds	r3, #1
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6812      	ldr	r2, [r2, #0]
 800492c:	430b      	orrs	r3, r1
 800492e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800493a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	495c      	ldr	r1, [pc, #368]	@ (8004ab4 <HAL_I2C_Init+0x274>)
 8004944:	428b      	cmp	r3, r1
 8004946:	d819      	bhi.n	800497c <HAL_I2C_Init+0x13c>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	1e59      	subs	r1, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	fbb1 f3f3 	udiv	r3, r1, r3
 8004956:	1c59      	adds	r1, r3, #1
 8004958:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800495c:	400b      	ands	r3, r1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <HAL_I2C_Init+0x138>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1e59      	subs	r1, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004970:	3301      	adds	r3, #1
 8004972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004976:	e051      	b.n	8004a1c <HAL_I2C_Init+0x1dc>
 8004978:	2304      	movs	r3, #4
 800497a:	e04f      	b.n	8004a1c <HAL_I2C_Init+0x1dc>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d111      	bne.n	80049a8 <HAL_I2C_Init+0x168>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	1e58      	subs	r0, r3, #1
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6859      	ldr	r1, [r3, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	440b      	add	r3, r1
 8004992:	fbb0 f3f3 	udiv	r3, r0, r3
 8004996:	3301      	adds	r3, #1
 8004998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800499c:	2b00      	cmp	r3, #0
 800499e:	bf0c      	ite	eq
 80049a0:	2301      	moveq	r3, #1
 80049a2:	2300      	movne	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	e012      	b.n	80049ce <HAL_I2C_Init+0x18e>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	1e58      	subs	r0, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6859      	ldr	r1, [r3, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	440b      	add	r3, r1
 80049b6:	0099      	lsls	r1, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80049be:	3301      	adds	r3, #1
 80049c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	bf0c      	ite	eq
 80049c8:	2301      	moveq	r3, #1
 80049ca:	2300      	movne	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_I2C_Init+0x196>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e022      	b.n	8004a1c <HAL_I2C_Init+0x1dc>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10e      	bne.n	80049fc <HAL_I2C_Init+0x1bc>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1e58      	subs	r0, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6859      	ldr	r1, [r3, #4]
 80049e6:	460b      	mov	r3, r1
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	440b      	add	r3, r1
 80049ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80049f0:	3301      	adds	r3, #1
 80049f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049fa:	e00f      	b.n	8004a1c <HAL_I2C_Init+0x1dc>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	1e58      	subs	r0, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6859      	ldr	r1, [r3, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	0099      	lsls	r1, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a12:	3301      	adds	r3, #1
 8004a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	6809      	ldr	r1, [r1, #0]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69da      	ldr	r2, [r3, #28]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004a4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6911      	ldr	r1, [r2, #16]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	68d2      	ldr	r2, [r2, #12]
 8004a56:	4311      	orrs	r1, r2
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695a      	ldr	r2, [r3, #20]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0201 	orr.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	000186a0 	.word	0x000186a0
 8004ab8:	001e847f 	.word	0x001e847f
 8004abc:	003d08ff 	.word	0x003d08ff
 8004ac0:	431bde83 	.word	0x431bde83
 8004ac4:	10624dd3 	.word	0x10624dd3

08004ac8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e034      	b.n	8004b44 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8004ae2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f245 5255 	movw	r2, #21845	@ 0x5555
 8004aec:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6852      	ldr	r2, [r2, #4]
 8004af6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6892      	ldr	r2, [r2, #8]
 8004b00:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004b02:	f7fe f887 	bl	8002c14 <HAL_GetTick>
 8004b06:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004b08:	e00f      	b.n	8004b2a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004b0a:	f7fe f883 	bl	8002c14 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b27      	cmp	r3, #39	@ 0x27
 8004b16:	d908      	bls.n	8004b2a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e00c      	b.n	8004b44 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f003 0303 	and.w	r3, r3, #3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e8      	bne.n	8004b0a <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004b40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004b5c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	4770      	bx	lr

08004b6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b6c:	b08b      	sub	sp, #44	@ 0x2c
 8004b6e:	af06      	add	r7, sp, #24
 8004b70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e0f1      	b.n	8004d60 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d106      	bne.n	8004b96 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f009 fae9 	bl	800e168 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2203      	movs	r2, #3
 8004b9a:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f005 fa64 	bl	800a070 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	603b      	str	r3, [r7, #0]
 8004bae:	687e      	ldr	r6, [r7, #4]
 8004bb0:	466d      	mov	r5, sp
 8004bb2:	f106 0410 	add.w	r4, r6, #16
 8004bb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	602b      	str	r3, [r5, #0]
 8004bbe:	1d33      	adds	r3, r6, #4
 8004bc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bc2:	6838      	ldr	r0, [r7, #0]
 8004bc4:	f005 fa2e 	bl	800a024 <USB_CoreInit>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d005      	beq.n	8004bda <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e0c2      	b.n	8004d60 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2100      	movs	r1, #0
 8004be0:	4618      	mov	r0, r3
 8004be2:	f005 fa5f 	bl	800a0a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004be6:	2300      	movs	r3, #0
 8004be8:	73fb      	strb	r3, [r7, #15]
 8004bea:	e040      	b.n	8004c6e <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	440b      	add	r3, r1
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	2201      	movs	r2, #1
 8004c00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c02:	7bfb      	ldrb	r3, [r7, #15]
 8004c04:	6879      	ldr	r1, [r7, #4]
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	4613      	mov	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	440b      	add	r3, r1
 8004c12:	7bfa      	ldrb	r2, [r7, #15]
 8004c14:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	440b      	add	r3, r1
 8004c26:	3303      	adds	r3, #3
 8004c28:	2200      	movs	r2, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c2c:	7bfa      	ldrb	r2, [r7, #15]
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	440b      	add	r3, r1
 8004c3a:	3338      	adds	r3, #56	@ 0x38
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c40:	7bfa      	ldrb	r2, [r7, #15]
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	440b      	add	r3, r1
 8004c4e:	333c      	adds	r3, #60	@ 0x3c
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c54:	7bfa      	ldrb	r2, [r7, #15]
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	440b      	add	r3, r1
 8004c62:	3340      	adds	r3, #64	@ 0x40
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	73fb      	strb	r3, [r7, #15]
 8004c6e:	7bfa      	ldrb	r2, [r7, #15]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d3b9      	bcc.n	8004bec <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c78:	2300      	movs	r3, #0
 8004c7a:	73fb      	strb	r3, [r7, #15]
 8004c7c:	e044      	b.n	8004d08 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c7e:	7bfa      	ldrb	r2, [r7, #15]
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	440b      	add	r3, r1
 8004c8c:	f203 1369 	addw	r3, r3, #361	@ 0x169
 8004c90:	2200      	movs	r2, #0
 8004c92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c94:	7bfa      	ldrb	r2, [r7, #15]
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	440b      	add	r3, r1
 8004ca2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004ca6:	7bfa      	ldrb	r2, [r7, #15]
 8004ca8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004caa:	7bfa      	ldrb	r2, [r7, #15]
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	440b      	add	r3, r1
 8004cb8:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004cc0:	7bfa      	ldrb	r2, [r7, #15]
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	440b      	add	r3, r1
 8004cce:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004cd6:	7bfa      	ldrb	r2, [r7, #15]
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	440b      	add	r3, r1
 8004ce4:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cec:	7bfa      	ldrb	r2, [r7, #15]
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	440b      	add	r3, r1
 8004cfa:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
 8004d04:	3301      	adds	r3, #1
 8004d06:	73fb      	strb	r3, [r7, #15]
 8004d08:	7bfa      	ldrb	r2, [r7, #15]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d3b5      	bcc.n	8004c7e <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	687e      	ldr	r6, [r7, #4]
 8004d1a:	466d      	mov	r5, sp
 8004d1c:	f106 0410 	add.w	r4, r6, #16
 8004d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	602b      	str	r3, [r5, #0]
 8004d28:	1d33      	adds	r3, r6, #4
 8004d2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d2c:	6838      	ldr	r0, [r7, #0]
 8004d2e:	f005 f9c5 	bl	800a0bc <USB_DevInit>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e00d      	b.n	8004d60 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f007 fc46 	bl	800c5ea <USB_DevDisconnect>

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d68 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d101      	bne.n	8004d7e <HAL_PCD_Start+0x16>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e016      	b.n	8004dac <HAL_PCD_Start+0x44>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f005 f95a 	bl	800a044 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004d90:	2101      	movs	r1, #1
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f009 fc5b 	bl	800e64e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f007 fc1a 	bl	800c5d6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b088      	sub	sp, #32
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f007 fc1c 	bl	800c5fe <USB_ReadInterrupts>
 8004dc6:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fb1b 	bl	800540e <PCD_EP_ISR_Handler>

    return;
 8004dd8:	e119      	b.n	800500e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d013      	beq.n	8004e0c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004df6:	b292      	uxth	r2, r2
 8004df8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f009 fa2e 	bl	800e25e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004e02:	2100      	movs	r1, #0
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f905 	bl	8005014 <HAL_PCD_SetAddress>

    return;
 8004e0a:	e100      	b.n	800500e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00c      	beq.n	8004e30 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004e28:	b292      	uxth	r2, r2
 8004e2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004e2e:	e0ee      	b.n	800500e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00c      	beq.n	8004e54 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e4c:	b292      	uxth	r2, r2
 8004e4e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004e52:	e0dc      	b.n	800500e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d027      	beq.n	8004eae <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0204 	bic.w	r2, r2, #4
 8004e70:	b292      	uxth	r2, r2
 8004e72:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0208 	bic.w	r2, r2, #8
 8004e88:	b292      	uxth	r2, r2
 8004e8a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f009 fa1e 	bl	800e2d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ea6:	b292      	uxth	r2, r2
 8004ea8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004eac:	e0af      	b.n	800500e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 8083 	beq.w	8004fc0 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8004eba:	2300      	movs	r3, #0
 8004ebc:	77fb      	strb	r3, [r7, #31]
 8004ebe:	e010      	b.n	8004ee2 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	7ffb      	ldrb	r3, [r7, #31]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	441a      	add	r2, r3
 8004ecc:	7ffb      	ldrb	r3, [r7, #31]
 8004ece:	8812      	ldrh	r2, [r2, #0]
 8004ed0:	b292      	uxth	r2, r2
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	3320      	adds	r3, #32
 8004ed6:	443b      	add	r3, r7
 8004ed8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8004edc:	7ffb      	ldrb	r3, [r7, #31]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	77fb      	strb	r3, [r7, #31]
 8004ee2:	7ffb      	ldrb	r3, [r7, #31]
 8004ee4:	2b07      	cmp	r3, #7
 8004ee6:	d9eb      	bls.n	8004ec0 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0201 	orr.w	r2, r2, #1
 8004efa:	b292      	uxth	r2, r2
 8004efc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0201 	bic.w	r2, r2, #1
 8004f12:	b292      	uxth	r2, r2
 8004f14:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004f18:	bf00      	nop
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f6      	beq.n	8004f1a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f3e:	b292      	uxth	r2, r2
 8004f40:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004f44:	2300      	movs	r3, #0
 8004f46:	77fb      	strb	r3, [r7, #31]
 8004f48:	e00f      	b.n	8004f6a <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004f4a:	7ffb      	ldrb	r3, [r7, #31]
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6812      	ldr	r2, [r2, #0]
 8004f50:	4611      	mov	r1, r2
 8004f52:	7ffa      	ldrb	r2, [r7, #31]
 8004f54:	0092      	lsls	r2, r2, #2
 8004f56:	440a      	add	r2, r1
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	3320      	adds	r3, #32
 8004f5c:	443b      	add	r3, r7
 8004f5e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004f62:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004f64:	7ffb      	ldrb	r3, [r7, #31]
 8004f66:	3301      	adds	r3, #1
 8004f68:	77fb      	strb	r3, [r7, #31]
 8004f6a:	7ffb      	ldrb	r3, [r7, #31]
 8004f6c:	2b07      	cmp	r3, #7
 8004f6e:	d9ec      	bls.n	8004f4a <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0208 	orr.w	r2, r2, #8
 8004f82:	b292      	uxth	r2, r2
 8004f84:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f9a:	b292      	uxth	r2, r2
 8004f9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0204 	orr.w	r2, r2, #4
 8004fb2:	b292      	uxth	r2, r2
 8004fb4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f009 f96f 	bl	800e29c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004fbe:	e026      	b.n	800500e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00f      	beq.n	8004fea <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004fdc:	b292      	uxth	r2, r2
 8004fde:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f009 f92d 	bl	800e242 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004fe8:	e011      	b.n	800500e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00c      	beq.n	800500e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005006:	b292      	uxth	r2, r2
 8005008:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800500c:	bf00      	nop
  }
}
 800500e:	3720      	adds	r7, #32
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <HAL_PCD_SetAddress+0x1a>
 800502a:	2302      	movs	r3, #2
 800502c:	e013      	b.n	8005056 <HAL_PCD_SetAddress+0x42>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	78fa      	ldrb	r2, [r7, #3]
 800503a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	78fa      	ldrb	r2, [r7, #3]
 8005044:	4611      	mov	r1, r2
 8005046:	4618      	mov	r0, r3
 8005048:	f007 fab2 	bl	800c5b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	4608      	mov	r0, r1
 8005068:	4611      	mov	r1, r2
 800506a:	461a      	mov	r2, r3
 800506c:	4603      	mov	r3, r0
 800506e:	70fb      	strb	r3, [r7, #3]
 8005070:	460b      	mov	r3, r1
 8005072:	803b      	strh	r3, [r7, #0]
 8005074:	4613      	mov	r3, r2
 8005076:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800507c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005080:	2b00      	cmp	r3, #0
 8005082:	da0e      	bge.n	80050a2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	4613      	mov	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	4413      	add	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2201      	movs	r2, #1
 800509e:	705a      	strb	r2, [r3, #1]
 80050a0:	e00e      	b.n	80050c0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050a2:	78fb      	ldrb	r3, [r7, #3]
 80050a4:	f003 0207 	and.w	r2, r3, #7
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	4413      	add	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80050cc:	883a      	ldrh	r2, [r7, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	78ba      	ldrb	r2, [r7, #2]
 80050d6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80050d8:	78bb      	ldrb	r3, [r7, #2]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d102      	bne.n	80050e4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <HAL_PCD_EP_Open+0x94>
 80050ee:	2302      	movs	r3, #2
 80050f0:	e00e      	b.n	8005110 <HAL_PCD_EP_Open+0xb2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68f9      	ldr	r1, [r7, #12]
 8005100:	4618      	mov	r0, r3
 8005102:	f004 fffb 	bl	800a0fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 800510e:	7afb      	ldrb	r3, [r7, #11]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005124:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005128:	2b00      	cmp	r3, #0
 800512a:	da0e      	bge.n	800514a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800512c:	78fb      	ldrb	r3, [r7, #3]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	1c5a      	adds	r2, r3, #1
 8005134:	4613      	mov	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	4413      	add	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	705a      	strb	r2, [r3, #1]
 8005148:	e00e      	b.n	8005168 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	f003 0207 	and.w	r2, r3, #7
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	4413      	add	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005168:	78fb      	ldrb	r3, [r7, #3]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	b2da      	uxtb	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800517a:	2b01      	cmp	r3, #1
 800517c:	d101      	bne.n	8005182 <HAL_PCD_EP_Close+0x6a>
 800517e:	2302      	movs	r3, #2
 8005180:	e00e      	b.n	80051a0 <HAL_PCD_EP_Close+0x88>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68f9      	ldr	r1, [r7, #12]
 8005190:	4618      	mov	r0, r3
 8005192:	f005 fb73 	bl	800a87c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	607a      	str	r2, [r7, #4]
 80051b2:	603b      	str	r3, [r7, #0]
 80051b4:	460b      	mov	r3, r1
 80051b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051b8:	7afb      	ldrb	r3, [r7, #11]
 80051ba:	f003 0207 	and.w	r2, r3, #7
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4413      	add	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2200      	movs	r2, #0
 80051e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2200      	movs	r2, #0
 80051e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051e8:	7afb      	ldrb	r3, [r7, #11]
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6979      	ldr	r1, [r7, #20]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f005 fd2a 	bl	800ac54 <USB_EPStartXfer>

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
 8005212:	460b      	mov	r3, r1
 8005214:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005216:	78fb      	ldrb	r3, [r7, #3]
 8005218:	f003 0207 	and.w	r2, r3, #7
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	440b      	add	r3, r1
 8005228:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800522c:	681b      	ldr	r3, [r3, #0]
}
 800522e:	4618      	mov	r0, r3
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr

08005238 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	607a      	str	r2, [r7, #4]
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	460b      	mov	r3, r1
 8005246:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005248:	7afb      	ldrb	r3, [r7, #11]
 800524a:	f003 0307 	and.w	r3, r3, #7
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4413      	add	r3, r2
 800525c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2200      	movs	r2, #0
 800527c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2201      	movs	r2, #1
 8005282:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005284:	7afb      	ldrb	r3, [r7, #11]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	b2da      	uxtb	r2, r3
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6979      	ldr	r1, [r7, #20]
 8005296:	4618      	mov	r0, r3
 8005298:	f005 fcdc 	bl	800ac54 <USB_EPStartXfer>

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b084      	sub	sp, #16
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	460b      	mov	r3, r1
 80052b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80052b2:	78fb      	ldrb	r3, [r7, #3]
 80052b4:	f003 0207 	and.w	r2, r3, #7
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d901      	bls.n	80052c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e04c      	b.n	800535e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	da0e      	bge.n	80052ea <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	4613      	mov	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	4413      	add	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2201      	movs	r2, #1
 80052e6:	705a      	strb	r2, [r3, #1]
 80052e8:	e00c      	b.n	8005304 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80052ea:	78fa      	ldrb	r2, [r7, #3]
 80052ec:	4613      	mov	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	4413      	add	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2201      	movs	r2, #1
 8005308:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800530a:	78fb      	ldrb	r3, [r7, #3]
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	b2da      	uxtb	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800531c:	2b01      	cmp	r3, #1
 800531e:	d101      	bne.n	8005324 <HAL_PCD_EP_SetStall+0x7e>
 8005320:	2302      	movs	r3, #2
 8005322:	e01c      	b.n	800535e <HAL_PCD_EP_SetStall+0xb8>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68f9      	ldr	r1, [r7, #12]
 8005332:	4618      	mov	r0, r3
 8005334:	f007 f83f 	bl	800c3b6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	2b00      	cmp	r3, #0
 8005340:	d108      	bne.n	8005354 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800534c:	4619      	mov	r1, r3
 800534e:	4610      	mov	r0, r2
 8005350:	f007 f964 	bl	800c61c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	460b      	mov	r3, r1
 8005370:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005372:	78fb      	ldrb	r3, [r7, #3]
 8005374:	f003 020f 	and.w	r2, r3, #15
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	429a      	cmp	r2, r3
 800537e:	d901      	bls.n	8005384 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e040      	b.n	8005406 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005388:	2b00      	cmp	r3, #0
 800538a:	da0e      	bge.n	80053aa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	4413      	add	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2201      	movs	r2, #1
 80053a6:	705a      	strb	r2, [r3, #1]
 80053a8:	e00e      	b.n	80053c8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053aa:	78fb      	ldrb	r3, [r7, #3]
 80053ac:	f003 0207 	and.w	r2, r3, #7
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	4413      	add	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053ce:	78fb      	ldrb	r3, [r7, #3]
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d101      	bne.n	80053e8 <HAL_PCD_EP_ClrStall+0x82>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e00e      	b.n	8005406 <HAL_PCD_EP_ClrStall+0xa0>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68f9      	ldr	r1, [r7, #12]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f007 f82d 	bl	800c456 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b096      	sub	sp, #88	@ 0x58
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005416:	e3be      	b.n	8005b96 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005420:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005424:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005428:	b2db      	uxtb	r3, r3
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8005432:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005436:	2b00      	cmp	r3, #0
 8005438:	f040 8178 	bne.w	800572c <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800543c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005440:	f003 0310 	and.w	r3, r3, #16
 8005444:	2b00      	cmp	r3, #0
 8005446:	d151      	bne.n	80054ec <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	b29b      	uxth	r3, r3
 8005450:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005454:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005458:	81fb      	strh	r3, [r7, #14]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	89fb      	ldrh	r3, [r7, #14]
 8005460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005468:	b29b      	uxth	r3, r3
 800546a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3328      	adds	r3, #40	@ 0x28
 8005470:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800547a:	b29b      	uxth	r3, r3
 800547c:	461a      	mov	r2, r3
 800547e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	4413      	add	r3, r2
 8005486:	3302      	adds	r3, #2
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6812      	ldr	r2, [r2, #0]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800549a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800549c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800549e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054a0:	695a      	ldr	r2, [r3, #20]
 80054a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	441a      	add	r2, r3
 80054a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054aa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80054ac:	2100      	movs	r1, #0
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f008 fead 	bl	800e20e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 836a 	beq.w	8005b96 <PCD_EP_ISR_Handler+0x788>
 80054c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f040 8365 	bne.w	8005b96 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80054ea:	e354      	b.n	8005b96 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80054f2:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80054fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005502:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005506:	2b00      	cmp	r3, #0
 8005508:	d034      	beq.n	8005574 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005512:	b29b      	uxth	r3, r3
 8005514:	461a      	mov	r2, r3
 8005516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	4413      	add	r3, r2
 800551e:	3306      	adds	r3, #6
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005534:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8005540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005542:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005546:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005548:	b29b      	uxth	r3, r3
 800554a:	f007 f8b7 	bl	800c6bc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	881b      	ldrh	r3, [r3, #0]
 8005554:	b29a      	uxth	r2, r3
 8005556:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800555a:	4013      	ands	r3, r2
 800555c:	823b      	strh	r3, [r7, #16]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	8a3a      	ldrh	r2, [r7, #16]
 8005564:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005568:	b292      	uxth	r2, r2
 800556a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f008 fe21 	bl	800e1b4 <HAL_PCD_SetupStageCallback>
 8005572:	e310      	b.n	8005b96 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005574:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005578:	2b00      	cmp	r3, #0
 800557a:	f280 830c 	bge.w	8005b96 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	b29a      	uxth	r2, r3
 8005586:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800558a:	4013      	ands	r3, r2
 800558c:	83fb      	strh	r3, [r7, #30]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	8bfa      	ldrh	r2, [r7, #30]
 8005594:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005598:	b292      	uxth	r2, r2
 800559a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	461a      	mov	r2, r3
 80055a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	00db      	lsls	r3, r3, #3
 80055ae:	4413      	add	r3, r2
 80055b0:	3306      	adds	r3, #6
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80055c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055c6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80055c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d019      	beq.n	8005604 <PCD_EP_ISR_Handler+0x1f6>
 80055d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d015      	beq.n	8005604 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6818      	ldr	r0, [r3, #0]
 80055dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055de:	6959      	ldr	r1, [r3, #20]
 80055e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055e2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80055e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055e6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	f007 f867 	bl	800c6bc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80055ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f0:	695a      	ldr	r2, [r3, #20]
 80055f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	441a      	add	r2, r3
 80055f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055fa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80055fc:	2100      	movs	r1, #0
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f008 fdea 	bl	800e1d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800560e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005612:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005616:	2b00      	cmp	r3, #0
 8005618:	f040 82bd 	bne.w	8005b96 <PCD_EP_ISR_Handler+0x788>
 800561c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005620:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005624:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005628:	f000 82b5 	beq.w	8005b96 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	61bb      	str	r3, [r7, #24]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800563a:	b29b      	uxth	r3, r3
 800563c:	461a      	mov	r2, r3
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	4413      	add	r3, r2
 8005642:	61bb      	str	r3, [r7, #24]
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005656:	b29a      	uxth	r2, r3
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	801a      	strh	r2, [r3, #0]
 800565c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	2b3e      	cmp	r3, #62	@ 0x3e
 8005662:	d91d      	bls.n	80056a0 <PCD_EP_ISR_Handler+0x292>
 8005664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	095b      	lsrs	r3, r3, #5
 800566a:	647b      	str	r3, [r7, #68]	@ 0x44
 800566c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f003 031f 	and.w	r3, r3, #31
 8005674:	2b00      	cmp	r3, #0
 8005676:	d102      	bne.n	800567e <PCD_EP_ISR_Handler+0x270>
 8005678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800567a:	3b01      	subs	r3, #1
 800567c:	647b      	str	r3, [r7, #68]	@ 0x44
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	b29a      	uxth	r2, r3
 8005684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005686:	b29b      	uxth	r3, r3
 8005688:	029b      	lsls	r3, r3, #10
 800568a:	b29b      	uxth	r3, r3
 800568c:	4313      	orrs	r3, r2
 800568e:	b29b      	uxth	r3, r3
 8005690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005698:	b29a      	uxth	r2, r3
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	801a      	strh	r2, [r3, #0]
 800569e:	e026      	b.n	80056ee <PCD_EP_ISR_Handler+0x2e0>
 80056a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <PCD_EP_ISR_Handler+0x2b0>
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	801a      	strh	r2, [r3, #0]
 80056bc:	e017      	b.n	80056ee <PCD_EP_ISR_Handler+0x2e0>
 80056be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80056c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <PCD_EP_ISR_Handler+0x2ca>
 80056d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056d4:	3301      	adds	r3, #1
 80056d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	b29a      	uxth	r2, r3
 80056de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	029b      	lsls	r3, r3, #10
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	4313      	orrs	r3, r2
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056fe:	827b      	strh	r3, [r7, #18]
 8005700:	8a7b      	ldrh	r3, [r7, #18]
 8005702:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005706:	827b      	strh	r3, [r7, #18]
 8005708:	8a7b      	ldrh	r3, [r7, #18]
 800570a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800570e:	827b      	strh	r3, [r7, #18]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	8a7b      	ldrh	r3, [r7, #18]
 8005716:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800571a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800571e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005726:	b29b      	uxth	r3, r3
 8005728:	8013      	strh	r3, [r2, #0]
 800572a:	e234      	b.n	8005b96 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	461a      	mov	r2, r3
 8005732:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005740:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005744:	2b00      	cmp	r3, #0
 8005746:	f280 80fc 	bge.w	8005942 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	461a      	mov	r2, r3
 8005750:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	b29a      	uxth	r2, r3
 800575c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005760:	4013      	ands	r3, r2
 8005762:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8005778:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800577c:	b292      	uxth	r2, r2
 800577e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005780:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	4413      	add	r3, r2
 8005794:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005798:	7b1b      	ldrb	r3, [r3, #12]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d125      	bne.n	80057ea <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	461a      	mov	r2, r3
 80057aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	4413      	add	r3, r2
 80057b2:	3306      	adds	r3, #6
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6812      	ldr	r2, [r2, #0]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057c6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80057ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 8092 	beq.w	80058f8 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6818      	ldr	r0, [r3, #0]
 80057d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057da:	6959      	ldr	r1, [r3, #20]
 80057dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057de:	88da      	ldrh	r2, [r3, #6]
 80057e0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80057e4:	f006 ff6a 	bl	800c6bc <USB_ReadPMA>
 80057e8:	e086      	b.n	80058f8 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80057ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ec:	78db      	ldrb	r3, [r3, #3]
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d10a      	bne.n	8005808 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80057f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80057f6:	461a      	mov	r2, r3
 80057f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f9d9 	bl	8005bb2 <HAL_PCD_EP_DB_Receive>
 8005800:	4603      	mov	r3, r0
 8005802:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8005806:	e077      	b.n	80058f8 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	461a      	mov	r2, r3
 800580e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	b29b      	uxth	r3, r3
 800581a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800581e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005822:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	461a      	mov	r2, r3
 800582c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	441a      	add	r2, r3
 8005834:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005838:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800583c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005840:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005844:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005848:	b29b      	uxth	r3, r3
 800584a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	461a      	mov	r2, r3
 8005852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	b29b      	uxth	r3, r3
 800585e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d024      	beq.n	80058b0 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800586e:	b29b      	uxth	r3, r3
 8005870:	461a      	mov	r2, r3
 8005872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	4413      	add	r3, r2
 800587a:	3302      	adds	r3, #2
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6812      	ldr	r2, [r2, #0]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800588e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005892:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005896:	2b00      	cmp	r3, #0
 8005898:	d02e      	beq.n	80058f8 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058a0:	6959      	ldr	r1, [r3, #20]
 80058a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058a4:	891a      	ldrh	r2, [r3, #8]
 80058a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80058aa:	f006 ff07 	bl	800c6bc <USB_ReadPMA>
 80058ae:	e023      	b.n	80058f8 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	461a      	mov	r2, r3
 80058bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	4413      	add	r3, r2
 80058c4:	3306      	adds	r3, #6
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058d8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80058dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d009      	beq.n	80058f8 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6818      	ldr	r0, [r3, #0]
 80058e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ea:	6959      	ldr	r1, [r3, #20]
 80058ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ee:	895a      	ldrh	r2, [r3, #10]
 80058f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80058f4:	f006 fee2 	bl	800c6bc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80058f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058fa:	69da      	ldr	r2, [r3, #28]
 80058fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005900:	441a      	add	r2, r3
 8005902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005904:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005908:	695a      	ldr	r2, [r3, #20]
 800590a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800590e:	441a      	add	r2, r3
 8005910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005912:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d005      	beq.n	8005928 <PCD_EP_ISR_Handler+0x51a>
 800591c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8005920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	429a      	cmp	r2, r3
 8005926:	d206      	bcs.n	8005936 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	4619      	mov	r1, r3
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f008 fc52 	bl	800e1d8 <HAL_PCD_DataOutStageCallback>
 8005934:	e005      	b.n	8005942 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800593c:	4618      	mov	r0, r3
 800593e:	f005 f989 	bl	800ac54 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005942:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 8123 	beq.w	8005b96 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8005950:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005954:	1c5a      	adds	r2, r3, #1
 8005956:	4613      	mov	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	4413      	add	r3, r2
 8005962:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	461a      	mov	r2, r3
 800596a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	b29b      	uxth	r3, r3
 8005976:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800597a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800597e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	441a      	add	r2, r3
 8005990:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800599c:	b29b      	uxth	r3, r3
 800599e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80059a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059a2:	78db      	ldrb	r3, [r3, #3]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	f040 80a2 	bne.w	8005aee <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 80059aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059ac:	2200      	movs	r2, #0
 80059ae:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80059b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059b2:	7b1b      	ldrb	r3, [r3, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 8093 	beq.w	8005ae0 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80059ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80059be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d046      	beq.n	8005a54 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059c8:	785b      	ldrb	r3, [r3, #1]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d126      	bne.n	8005a1c <PCD_EP_ISR_Handler+0x60e>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059dc:	b29b      	uxth	r3, r3
 80059de:	461a      	mov	r2, r3
 80059e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e2:	4413      	add	r3, r2
 80059e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80059e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	011a      	lsls	r2, r3, #4
 80059ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ee:	4413      	add	r3, r2
 80059f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80059f4:	623b      	str	r3, [r7, #32]
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	801a      	strh	r2, [r3, #0]
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	801a      	strh	r2, [r3, #0]
 8005a1a:	e061      	b.n	8005ae0 <PCD_EP_ISR_Handler+0x6d2>
 8005a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a1e:	785b      	ldrb	r3, [r3, #1]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d15d      	bne.n	8005ae0 <PCD_EP_ISR_Handler+0x6d2>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a38:	4413      	add	r3, r2
 8005a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	011a      	lsls	r2, r3, #4
 8005a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a44:	4413      	add	r3, r2
 8005a46:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4e:	2200      	movs	r2, #0
 8005a50:	801a      	strh	r2, [r3, #0]
 8005a52:	e045      	b.n	8005ae0 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a5c:	785b      	ldrb	r3, [r3, #1]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d126      	bne.n	8005ab0 <PCD_EP_ISR_Handler+0x6a2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	461a      	mov	r2, r3
 8005a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a76:	4413      	add	r3, r2
 8005a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	011a      	lsls	r2, r3, #4
 8005a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a82:	4413      	add	r3, r2
 8005a84:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a88:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a98:	801a      	strh	r2, [r3, #0]
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aac:	801a      	strh	r2, [r3, #0]
 8005aae:	e017      	b.n	8005ae0 <PCD_EP_ISR_Handler+0x6d2>
 8005ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ab2:	785b      	ldrb	r3, [r3, #1]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d113      	bne.n	8005ae0 <PCD_EP_ISR_Handler+0x6d2>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ac6:	4413      	add	r3, r2
 8005ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	011a      	lsls	r2, r3, #4
 8005ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005adc:	2200      	movs	r2, #0
 8005ade:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f008 fb91 	bl	800e20e <HAL_PCD_DataInStageCallback>
 8005aec:	e053      	b.n	8005b96 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005aee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d146      	bne.n	8005b88 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	4413      	add	r3, r2
 8005b0e:	3302      	adds	r3, #2
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	6812      	ldr	r2, [r2, #0]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b22:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8005b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b28:	699a      	ldr	r2, [r3, #24]
 8005b2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d907      	bls.n	8005b42 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8005b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b34:	699a      	ldr	r2, [r3, #24]
 8005b36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005b3a:	1ad2      	subs	r2, r2, r3
 8005b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b3e:	619a      	str	r2, [r3, #24]
 8005b40:	e002      	b.n	8005b48 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b44:	2200      	movs	r2, #0
 8005b46:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d106      	bne.n	8005b5e <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	4619      	mov	r1, r3
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f008 fb59 	bl	800e20e <HAL_PCD_DataInStageCallback>
 8005b5c:	e01b      	b.n	8005b96 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b60:	695a      	ldr	r2, [r3, #20]
 8005b62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005b66:	441a      	add	r2, r3
 8005b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b6a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b6e:	69da      	ldr	r2, [r3, #28]
 8005b70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005b74:	441a      	add	r2, r3
 8005b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b78:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b80:	4618      	mov	r0, r3
 8005b82:	f005 f867 	bl	800ac54 <USB_EPStartXfer>
 8005b86:	e006      	b.n	8005b96 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005b88:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f91b 	bl	8005dcc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	b21b      	sxth	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f6ff ac38 	blt.w	8005418 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3758      	adds	r7, #88	@ 0x58
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b088      	sub	sp, #32
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005bc0:	88fb      	ldrh	r3, [r7, #6]
 8005bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d07e      	beq.n	8005cc8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	4413      	add	r3, r2
 8005bde:	3302      	adds	r3, #2
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	6812      	ldr	r2, [r2, #0]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bf2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	699a      	ldr	r2, [r3, #24]
 8005bf8:	8b7b      	ldrh	r3, [r7, #26]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d306      	bcc.n	8005c0c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	699a      	ldr	r2, [r3, #24]
 8005c02:	8b7b      	ldrh	r3, [r7, #26]
 8005c04:	1ad2      	subs	r2, r2, r3
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	619a      	str	r2, [r3, #24]
 8005c0a:	e002      	b.n	8005c12 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d123      	bne.n	8005c62 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c34:	833b      	strh	r3, [r7, #24]
 8005c36:	8b3b      	ldrh	r3, [r7, #24]
 8005c38:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005c3c:	833b      	strh	r3, [r7, #24]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	441a      	add	r2, r3
 8005c4c:	8b3b      	ldrh	r3, [r7, #24]
 8005c4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005c62:	88fb      	ldrh	r3, [r7, #6]
 8005c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d01f      	beq.n	8005cac <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	461a      	mov	r2, r3
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c86:	82fb      	strh	r3, [r7, #22]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	441a      	add	r2, r3
 8005c96:	8afb      	ldrh	r3, [r7, #22]
 8005c98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ca0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ca4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005cac:	8b7b      	ldrh	r3, [r7, #26]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 8087 	beq.w	8005dc2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6818      	ldr	r0, [r3, #0]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	6959      	ldr	r1, [r3, #20]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	891a      	ldrh	r2, [r3, #8]
 8005cc0:	8b7b      	ldrh	r3, [r7, #26]
 8005cc2:	f006 fcfb 	bl	800c6bc <USB_ReadPMA>
 8005cc6:	e07c      	b.n	8005dc2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	4413      	add	r3, r2
 8005cdc:	3306      	adds	r3, #6
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	6812      	ldr	r2, [r2, #0]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cf0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	699a      	ldr	r2, [r3, #24]
 8005cf6:	8b7b      	ldrh	r3, [r7, #26]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d306      	bcc.n	8005d0a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	699a      	ldr	r2, [r3, #24]
 8005d00:	8b7b      	ldrh	r3, [r7, #26]
 8005d02:	1ad2      	subs	r2, r2, r3
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	619a      	str	r2, [r3, #24]
 8005d08:	e002      	b.n	8005d10 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d123      	bne.n	8005d60 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d32:	83fb      	strh	r3, [r7, #30]
 8005d34:	8bfb      	ldrh	r3, [r7, #30]
 8005d36:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005d3a:	83fb      	strh	r3, [r7, #30]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	461a      	mov	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	441a      	add	r2, r3
 8005d4a:	8bfb      	ldrh	r3, [r7, #30]
 8005d4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d11f      	bne.n	8005daa <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d84:	83bb      	strh	r3, [r7, #28]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	441a      	add	r2, r3
 8005d94:	8bbb      	ldrh	r3, [r7, #28]
 8005d96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005da2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005daa:	8b7b      	ldrh	r3, [r7, #26]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d008      	beq.n	8005dc2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6818      	ldr	r0, [r3, #0]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	6959      	ldr	r1, [r3, #20]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	895a      	ldrh	r2, [r3, #10]
 8005dbc:	8b7b      	ldrh	r3, [r7, #26]
 8005dbe:	f006 fc7d 	bl	800c6bc <USB_ReadPMA>
    }
  }

  return count;
 8005dc2:	8b7b      	ldrh	r3, [r7, #26]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3720      	adds	r7, #32
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b0a4      	sub	sp, #144	@ 0x90
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005dda:	88fb      	ldrh	r3, [r7, #6]
 8005ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 81dd 	beq.w	80061a0 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	461a      	mov	r2, r3
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	4413      	add	r3, r2
 8005dfa:	3302      	adds	r3, #2
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	6812      	ldr	r2, [r2, #0]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e0e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d907      	bls.n	8005e2e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	699a      	ldr	r2, [r3, #24]
 8005e22:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005e26:	1ad2      	subs	r2, r2, r3
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	619a      	str	r2, [r3, #24]
 8005e2c:	e002      	b.n	8005e34 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2200      	movs	r2, #0
 8005e32:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f040 80b9 	bne.w	8005fb0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	785b      	ldrb	r3, [r3, #1]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d126      	bne.n	8005e94 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	461a      	mov	r2, r3
 8005e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5a:	4413      	add	r3, r2
 8005e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	011a      	lsls	r2, r3, #4
 8005e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e66:	4413      	add	r3, r2
 8005e68:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7c:	801a      	strh	r2, [r3, #0]
 8005e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e90:	801a      	strh	r2, [r3, #0]
 8005e92:	e01a      	b.n	8005eca <HAL_PCD_EP_DB_Transmit+0xfe>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	785b      	ldrb	r3, [r3, #1]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d116      	bne.n	8005eca <HAL_PCD_EP_DB_Transmit+0xfe>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb0:	4413      	add	r3, r2
 8005eb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	011a      	lsls	r2, r3, #4
 8005eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ec2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	785b      	ldrb	r3, [r3, #1]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d126      	bne.n	8005f26 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	61fb      	str	r3, [r7, #28]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	461a      	mov	r2, r3
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	4413      	add	r3, r2
 8005eee:	61fb      	str	r3, [r7, #28]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	011a      	lsls	r2, r3, #4
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005efe:	61bb      	str	r3, [r7, #24]
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	801a      	strh	r2, [r3, #0]
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	801a      	strh	r2, [r3, #0]
 8005f24:	e017      	b.n	8005f56 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	785b      	ldrb	r3, [r3, #1]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d113      	bne.n	8005f56 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3c:	4413      	add	r3, r2
 8005f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	011a      	lsls	r2, r3, #4
 8005f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f48:	4413      	add	r3, r2
 8005f4a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f4e:	623b      	str	r3, [r7, #32]
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	2200      	movs	r2, #0
 8005f54:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f008 f956 	bl	800e20e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005f62:	88fb      	ldrh	r3, [r7, #6]
 8005f64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 82fc 	beq.w	8006566 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	461a      	mov	r2, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f88:	82fb      	strh	r3, [r7, #22]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	441a      	add	r2, r3
 8005f98:	8afb      	ldrh	r3, [r7, #22]
 8005f9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fa2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	8013      	strh	r3, [r2, #0]
 8005fae:	e2da      	b.n	8006566 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005fb0:	88fb      	ldrh	r3, [r7, #6]
 8005fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d021      	beq.n	8005ffe <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fd4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	441a      	add	r2, r3
 8005fe6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005fea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ff2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006004:	2b01      	cmp	r3, #1
 8006006:	f040 82ae 	bne.w	8006566 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	695a      	ldr	r2, [r3, #20]
 800600e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006012:	441a      	add	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	69da      	ldr	r2, [r3, #28]
 800601c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006020:	441a      	add	r2, r3
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	6a1a      	ldr	r2, [r3, #32]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	429a      	cmp	r2, r3
 8006030:	d30b      	bcc.n	800604a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	6a1a      	ldr	r2, [r3, #32]
 800603e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006042:	1ad2      	subs	r2, r2, r3
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	621a      	str	r2, [r3, #32]
 8006048:	e017      	b.n	800607a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d108      	bne.n	8006064 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8006052:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006056:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006062:	e00a      	b.n	800607a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2200      	movs	r2, #0
 8006078:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	785b      	ldrb	r3, [r3, #1]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d165      	bne.n	800614e <HAL_PCD_EP_DB_Transmit+0x382>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006090:	b29b      	uxth	r3, r3
 8006092:	461a      	mov	r2, r3
 8006094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006096:	4413      	add	r3, r2
 8006098:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	011a      	lsls	r2, r3, #4
 80060a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060a2:	4413      	add	r3, r2
 80060a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b8:	801a      	strh	r2, [r3, #0]
 80060ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060be:	2b3e      	cmp	r3, #62	@ 0x3e
 80060c0:	d91d      	bls.n	80060fe <HAL_PCD_EP_DB_Transmit+0x332>
 80060c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060c6:	095b      	lsrs	r3, r3, #5
 80060c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060ce:	f003 031f 	and.w	r3, r3, #31
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d102      	bne.n	80060dc <HAL_PCD_EP_DB_Transmit+0x310>
 80060d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060d8:	3b01      	subs	r3, #1
 80060da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	029b      	lsls	r3, r3, #10
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	4313      	orrs	r3, r2
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060fa:	801a      	strh	r2, [r3, #0]
 80060fc:	e044      	b.n	8006188 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80060fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10a      	bne.n	800611c <HAL_PCD_EP_DB_Transmit+0x350>
 8006106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006114:	b29a      	uxth	r2, r3
 8006116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006118:	801a      	strh	r2, [r3, #0]
 800611a:	e035      	b.n	8006188 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800611c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006120:	085b      	lsrs	r3, r3, #1
 8006122:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006124:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <HAL_PCD_EP_DB_Transmit+0x36a>
 8006130:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006132:	3301      	adds	r3, #1
 8006134:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	b29a      	uxth	r2, r3
 800613c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800613e:	b29b      	uxth	r3, r3
 8006140:	029b      	lsls	r3, r3, #10
 8006142:	b29b      	uxth	r3, r3
 8006144:	4313      	orrs	r3, r2
 8006146:	b29a      	uxth	r2, r3
 8006148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614a:	801a      	strh	r2, [r3, #0]
 800614c:	e01c      	b.n	8006188 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	785b      	ldrb	r3, [r3, #1]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d118      	bne.n	8006188 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	647b      	str	r3, [r7, #68]	@ 0x44
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006164:	b29b      	uxth	r3, r3
 8006166:	461a      	mov	r2, r3
 8006168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800616a:	4413      	add	r3, r2
 800616c:	647b      	str	r3, [r7, #68]	@ 0x44
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	011a      	lsls	r2, r3, #4
 8006174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006176:	4413      	add	r3, r2
 8006178:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800617c:	643b      	str	r3, [r7, #64]	@ 0x40
 800617e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006182:	b29a      	uxth	r2, r3
 8006184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006186:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6818      	ldr	r0, [r3, #0]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	6959      	ldr	r1, [r3, #20]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	891a      	ldrh	r2, [r3, #8]
 8006194:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006198:	b29b      	uxth	r3, r3
 800619a:	f006 fa4a 	bl	800c632 <USB_WritePMA>
 800619e:	e1e2      	b.n	8006566 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	461a      	mov	r2, r3
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	4413      	add	r3, r2
 80061b4:	3306      	adds	r3, #6
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	6812      	ldr	r2, [r2, #0]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061c8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	699a      	ldr	r2, [r3, #24]
 80061d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d307      	bcc.n	80061e8 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	699a      	ldr	r2, [r3, #24]
 80061dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80061e0:	1ad2      	subs	r2, r2, r3
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	619a      	str	r2, [r3, #24]
 80061e6:	e002      	b.n	80061ee <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2200      	movs	r2, #0
 80061ec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f040 80c0 	bne.w	8006378 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	785b      	ldrb	r3, [r3, #1]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d126      	bne.n	800624e <HAL_PCD_EP_DB_Transmit+0x482>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800620e:	b29b      	uxth	r3, r3
 8006210:	461a      	mov	r2, r3
 8006212:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006214:	4413      	add	r3, r2
 8006216:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	011a      	lsls	r2, r3, #4
 800621e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006220:	4413      	add	r3, r2
 8006222:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006226:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006228:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	b29b      	uxth	r3, r3
 800622e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006232:	b29a      	uxth	r2, r3
 8006234:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006236:	801a      	strh	r2, [r3, #0]
 8006238:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	b29b      	uxth	r3, r3
 800623e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006246:	b29a      	uxth	r2, r3
 8006248:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800624a:	801a      	strh	r2, [r3, #0]
 800624c:	e01a      	b.n	8006284 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	785b      	ldrb	r3, [r3, #1]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d116      	bne.n	8006284 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	667b      	str	r3, [r7, #100]	@ 0x64
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006264:	b29b      	uxth	r3, r3
 8006266:	461a      	mov	r2, r3
 8006268:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800626a:	4413      	add	r3, r2
 800626c:	667b      	str	r3, [r7, #100]	@ 0x64
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	011a      	lsls	r2, r3, #4
 8006274:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006276:	4413      	add	r3, r2
 8006278:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800627c:	663b      	str	r3, [r7, #96]	@ 0x60
 800627e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006280:	2200      	movs	r2, #0
 8006282:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	677b      	str	r3, [r7, #116]	@ 0x74
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	785b      	ldrb	r3, [r3, #1]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d12b      	bne.n	80062ea <HAL_PCD_EP_DB_Transmit+0x51e>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	461a      	mov	r2, r3
 80062a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062a6:	4413      	add	r3, r2
 80062a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	011a      	lsls	r2, r3, #4
 80062b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062b2:	4413      	add	r3, r2
 80062b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80062bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80062ce:	801a      	strh	r2, [r3, #0]
 80062d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80062e6:	801a      	strh	r2, [r3, #0]
 80062e8:	e017      	b.n	800631a <HAL_PCD_EP_DB_Transmit+0x54e>
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	785b      	ldrb	r3, [r3, #1]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d113      	bne.n	800631a <HAL_PCD_EP_DB_Transmit+0x54e>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	461a      	mov	r2, r3
 80062fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006300:	4413      	add	r3, r2
 8006302:	677b      	str	r3, [r7, #116]	@ 0x74
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	011a      	lsls	r2, r3, #4
 800630a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800630c:	4413      	add	r3, r2
 800630e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006312:	673b      	str	r3, [r7, #112]	@ 0x70
 8006314:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006316:	2200      	movs	r2, #0
 8006318:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	4619      	mov	r1, r3
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f007 ff74 	bl	800e20e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006326:	88fb      	ldrh	r3, [r7, #6]
 8006328:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800632c:	2b00      	cmp	r3, #0
 800632e:	f040 811a 	bne.w	8006566 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	b29b      	uxth	r3, r3
 8006344:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006348:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800634c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	461a      	mov	r2, r3
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	441a      	add	r2, r3
 800635e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006362:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006366:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800636a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800636e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006372:	b29b      	uxth	r3, r3
 8006374:	8013      	strh	r3, [r2, #0]
 8006376:	e0f6      	b.n	8006566 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006378:	88fb      	ldrh	r3, [r7, #6]
 800637a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d121      	bne.n	80063c6 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	b29b      	uxth	r3, r3
 8006394:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006398:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800639c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	461a      	mov	r2, r3
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	441a      	add	r2, r3
 80063ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80063b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	f040 80ca 	bne.w	8006566 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	695a      	ldr	r2, [r3, #20]
 80063d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80063da:	441a      	add	r2, r3
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	69da      	ldr	r2, [r3, #28]
 80063e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80063e8:	441a      	add	r2, r3
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	6a1a      	ldr	r2, [r3, #32]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d30b      	bcc.n	8006412 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	6a1a      	ldr	r2, [r3, #32]
 8006406:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800640a:	1ad2      	subs	r2, r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	621a      	str	r2, [r3, #32]
 8006410:	e017      	b.n	8006442 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d108      	bne.n	800642c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800641a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800641e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800642a:	e00a      	b.n	8006442 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2200      	movs	r2, #0
 8006438:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	657b      	str	r3, [r7, #84]	@ 0x54
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	785b      	ldrb	r3, [r3, #1]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d165      	bne.n	800651c <HAL_PCD_EP_DB_Transmit+0x750>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800645e:	b29b      	uxth	r3, r3
 8006460:	461a      	mov	r2, r3
 8006462:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006464:	4413      	add	r3, r2
 8006466:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	011a      	lsls	r2, r3, #4
 800646e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006470:	4413      	add	r3, r2
 8006472:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006476:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006478:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	b29b      	uxth	r3, r3
 800647e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006482:	b29a      	uxth	r2, r3
 8006484:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006486:	801a      	strh	r2, [r3, #0]
 8006488:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800648c:	2b3e      	cmp	r3, #62	@ 0x3e
 800648e:	d91d      	bls.n	80064cc <HAL_PCD_EP_DB_Transmit+0x700>
 8006490:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006494:	095b      	lsrs	r3, r3, #5
 8006496:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006498:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800649c:	f003 031f 	and.w	r3, r3, #31
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d102      	bne.n	80064aa <HAL_PCD_EP_DB_Transmit+0x6de>
 80064a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064a6:	3b01      	subs	r3, #1
 80064a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	029b      	lsls	r3, r3, #10
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	4313      	orrs	r3, r2
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	e041      	b.n	8006550 <HAL_PCD_EP_DB_Transmit+0x784>
 80064cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <HAL_PCD_EP_DB_Transmit+0x71e>
 80064d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	b29b      	uxth	r3, r3
 80064da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064e6:	801a      	strh	r2, [r3, #0]
 80064e8:	e032      	b.n	8006550 <HAL_PCD_EP_DB_Transmit+0x784>
 80064ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064ee:	085b      	lsrs	r3, r3, #1
 80064f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <HAL_PCD_EP_DB_Transmit+0x738>
 80064fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006500:	3301      	adds	r3, #1
 8006502:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006504:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	b29a      	uxth	r2, r3
 800650a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800650c:	b29b      	uxth	r3, r3
 800650e:	029b      	lsls	r3, r3, #10
 8006510:	b29b      	uxth	r3, r3
 8006512:	4313      	orrs	r3, r2
 8006514:	b29a      	uxth	r2, r3
 8006516:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006518:	801a      	strh	r2, [r3, #0]
 800651a:	e019      	b.n	8006550 <HAL_PCD_EP_DB_Transmit+0x784>
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	785b      	ldrb	r3, [r3, #1]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d115      	bne.n	8006550 <HAL_PCD_EP_DB_Transmit+0x784>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800652c:	b29b      	uxth	r3, r3
 800652e:	461a      	mov	r2, r3
 8006530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006532:	4413      	add	r3, r2
 8006534:	657b      	str	r3, [r7, #84]	@ 0x54
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	011a      	lsls	r2, r3, #4
 800653c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800653e:	4413      	add	r3, r2
 8006540:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006544:	653b      	str	r3, [r7, #80]	@ 0x50
 8006546:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800654a:	b29a      	uxth	r2, r3
 800654c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800654e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6818      	ldr	r0, [r3, #0]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	6959      	ldr	r1, [r3, #20]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	895a      	ldrh	r2, [r3, #10]
 800655c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006560:	b29b      	uxth	r3, r3
 8006562:	f006 f866 	bl	800c632 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	461a      	mov	r2, r3
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	b29b      	uxth	r3, r3
 8006578:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800657c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006580:	82bb      	strh	r3, [r7, #20]
 8006582:	8abb      	ldrh	r3, [r7, #20]
 8006584:	f083 0310 	eor.w	r3, r3, #16
 8006588:	82bb      	strh	r3, [r7, #20]
 800658a:	8abb      	ldrh	r3, [r7, #20]
 800658c:	f083 0320 	eor.w	r3, r3, #32
 8006590:	82bb      	strh	r3, [r7, #20]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	441a      	add	r2, r3
 80065a0:	8abb      	ldrh	r3, [r7, #20]
 80065a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3790      	adds	r7, #144	@ 0x90
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	607b      	str	r3, [r7, #4]
 80065ca:	460b      	mov	r3, r1
 80065cc:	817b      	strh	r3, [r7, #10]
 80065ce:	4613      	mov	r3, r2
 80065d0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80065d2:	897b      	ldrh	r3, [r7, #10]
 80065d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d8:	b29b      	uxth	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00b      	beq.n	80065f6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065de:	897b      	ldrh	r3, [r7, #10]
 80065e0:	f003 0307 	and.w	r3, r3, #7
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	4613      	mov	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	00db      	lsls	r3, r3, #3
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4413      	add	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	e009      	b.n	800660a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80065f6:	897a      	ldrh	r2, [r7, #10]
 80065f8:	4613      	mov	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800660a:	893b      	ldrh	r3, [r7, #8]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d107      	bne.n	8006620 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2200      	movs	r2, #0
 8006614:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	b29a      	uxth	r2, r3
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	80da      	strh	r2, [r3, #6]
 800661e:	e00b      	b.n	8006638 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	2201      	movs	r2, #1
 8006624:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	b29a      	uxth	r2, r3
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	0c1b      	lsrs	r3, r3, #16
 8006632:	b29a      	uxth	r2, r3
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	371c      	adds	r7, #28
 800663e:	46bd      	mov	sp, r7
 8006640:	bc80      	pop	{r7}
 8006642:	4770      	bx	lr

08006644 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006648:	4b03      	ldr	r3, [pc, #12]	@ (8006658 <HAL_PWR_EnableBkUpAccess+0x14>)
 800664a:	2201      	movs	r2, #1
 800664c:	601a      	str	r2, [r3, #0]
}
 800664e:	bf00      	nop
 8006650:	46bd      	mov	sp, r7
 8006652:	bc80      	pop	{r7}
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	420e0020 	.word	0x420e0020

0800665c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e272      	b.n	8006b54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 8087 	beq.w	800678a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800667c:	4b92      	ldr	r3, [pc, #584]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f003 030c 	and.w	r3, r3, #12
 8006684:	2b04      	cmp	r3, #4
 8006686:	d00c      	beq.n	80066a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006688:	4b8f      	ldr	r3, [pc, #572]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f003 030c 	and.w	r3, r3, #12
 8006690:	2b08      	cmp	r3, #8
 8006692:	d112      	bne.n	80066ba <HAL_RCC_OscConfig+0x5e>
 8006694:	4b8c      	ldr	r3, [pc, #560]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800669c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066a0:	d10b      	bne.n	80066ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066a2:	4b89      	ldr	r3, [pc, #548]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d06c      	beq.n	8006788 <HAL_RCC_OscConfig+0x12c>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d168      	bne.n	8006788 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e24c      	b.n	8006b54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066c2:	d106      	bne.n	80066d2 <HAL_RCC_OscConfig+0x76>
 80066c4:	4b80      	ldr	r3, [pc, #512]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a7f      	ldr	r2, [pc, #508]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 80066ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066ce:	6013      	str	r3, [r2, #0]
 80066d0:	e02e      	b.n	8006730 <HAL_RCC_OscConfig+0xd4>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10c      	bne.n	80066f4 <HAL_RCC_OscConfig+0x98>
 80066da:	4b7b      	ldr	r3, [pc, #492]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a7a      	ldr	r2, [pc, #488]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 80066e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066e4:	6013      	str	r3, [r2, #0]
 80066e6:	4b78      	ldr	r3, [pc, #480]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a77      	ldr	r2, [pc, #476]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 80066ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	e01d      	b.n	8006730 <HAL_RCC_OscConfig+0xd4>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066fc:	d10c      	bne.n	8006718 <HAL_RCC_OscConfig+0xbc>
 80066fe:	4b72      	ldr	r3, [pc, #456]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a71      	ldr	r2, [pc, #452]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 8006704:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	4b6f      	ldr	r3, [pc, #444]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a6e      	ldr	r2, [pc, #440]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 8006710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006714:	6013      	str	r3, [r2, #0]
 8006716:	e00b      	b.n	8006730 <HAL_RCC_OscConfig+0xd4>
 8006718:	4b6b      	ldr	r3, [pc, #428]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a6a      	ldr	r2, [pc, #424]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 800671e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006722:	6013      	str	r3, [r2, #0]
 8006724:	4b68      	ldr	r3, [pc, #416]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a67      	ldr	r2, [pc, #412]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 800672a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800672e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d013      	beq.n	8006760 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006738:	f7fc fa6c 	bl	8002c14 <HAL_GetTick>
 800673c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800673e:	e008      	b.n	8006752 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006740:	f7fc fa68 	bl	8002c14 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b64      	cmp	r3, #100	@ 0x64
 800674c:	d901      	bls.n	8006752 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e200      	b.n	8006b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006752:	4b5d      	ldr	r3, [pc, #372]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d0f0      	beq.n	8006740 <HAL_RCC_OscConfig+0xe4>
 800675e:	e014      	b.n	800678a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006760:	f7fc fa58 	bl	8002c14 <HAL_GetTick>
 8006764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006766:	e008      	b.n	800677a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006768:	f7fc fa54 	bl	8002c14 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b64      	cmp	r3, #100	@ 0x64
 8006774:	d901      	bls.n	800677a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e1ec      	b.n	8006b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800677a:	4b53      	ldr	r3, [pc, #332]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1f0      	bne.n	8006768 <HAL_RCC_OscConfig+0x10c>
 8006786:	e000      	b.n	800678a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d063      	beq.n	800685e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006796:	4b4c      	ldr	r3, [pc, #304]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f003 030c 	and.w	r3, r3, #12
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00b      	beq.n	80067ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80067a2:	4b49      	ldr	r3, [pc, #292]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f003 030c 	and.w	r3, r3, #12
 80067aa:	2b08      	cmp	r3, #8
 80067ac:	d11c      	bne.n	80067e8 <HAL_RCC_OscConfig+0x18c>
 80067ae:	4b46      	ldr	r3, [pc, #280]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d116      	bne.n	80067e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067ba:	4b43      	ldr	r3, [pc, #268]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d005      	beq.n	80067d2 <HAL_RCC_OscConfig+0x176>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d001      	beq.n	80067d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e1c0      	b.n	8006b54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067d2:	4b3d      	ldr	r3, [pc, #244]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	4939      	ldr	r1, [pc, #228]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067e6:	e03a      	b.n	800685e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d020      	beq.n	8006832 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067f0:	4b36      	ldr	r3, [pc, #216]	@ (80068cc <HAL_RCC_OscConfig+0x270>)
 80067f2:	2201      	movs	r2, #1
 80067f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f6:	f7fc fa0d 	bl	8002c14 <HAL_GetTick>
 80067fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067fc:	e008      	b.n	8006810 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067fe:	f7fc fa09 	bl	8002c14 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2b02      	cmp	r3, #2
 800680a:	d901      	bls.n	8006810 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e1a1      	b.n	8006b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006810:	4b2d      	ldr	r3, [pc, #180]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d0f0      	beq.n	80067fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800681c:	4b2a      	ldr	r3, [pc, #168]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	00db      	lsls	r3, r3, #3
 800682a:	4927      	ldr	r1, [pc, #156]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 800682c:	4313      	orrs	r3, r2
 800682e:	600b      	str	r3, [r1, #0]
 8006830:	e015      	b.n	800685e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006832:	4b26      	ldr	r3, [pc, #152]	@ (80068cc <HAL_RCC_OscConfig+0x270>)
 8006834:	2200      	movs	r2, #0
 8006836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006838:	f7fc f9ec 	bl	8002c14 <HAL_GetTick>
 800683c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006840:	f7fc f9e8 	bl	8002c14 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e180      	b.n	8006b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006852:	4b1d      	ldr	r3, [pc, #116]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1f0      	bne.n	8006840 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0308 	and.w	r3, r3, #8
 8006866:	2b00      	cmp	r3, #0
 8006868:	d03a      	beq.n	80068e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d019      	beq.n	80068a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006872:	4b17      	ldr	r3, [pc, #92]	@ (80068d0 <HAL_RCC_OscConfig+0x274>)
 8006874:	2201      	movs	r2, #1
 8006876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006878:	f7fc f9cc 	bl	8002c14 <HAL_GetTick>
 800687c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006880:	f7fc f9c8 	bl	8002c14 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e160      	b.n	8006b54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006892:	4b0d      	ldr	r3, [pc, #52]	@ (80068c8 <HAL_RCC_OscConfig+0x26c>)
 8006894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0f0      	beq.n	8006880 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800689e:	2001      	movs	r0, #1
 80068a0:	f000 face 	bl	8006e40 <RCC_Delay>
 80068a4:	e01c      	b.n	80068e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068a6:	4b0a      	ldr	r3, [pc, #40]	@ (80068d0 <HAL_RCC_OscConfig+0x274>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068ac:	f7fc f9b2 	bl	8002c14 <HAL_GetTick>
 80068b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068b2:	e00f      	b.n	80068d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068b4:	f7fc f9ae 	bl	8002c14 <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d908      	bls.n	80068d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e146      	b.n	8006b54 <HAL_RCC_OscConfig+0x4f8>
 80068c6:	bf00      	nop
 80068c8:	40021000 	.word	0x40021000
 80068cc:	42420000 	.word	0x42420000
 80068d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068d4:	4b92      	ldr	r3, [pc, #584]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 80068d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1e9      	bne.n	80068b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0304 	and.w	r3, r3, #4
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 80a6 	beq.w	8006a3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068ee:	2300      	movs	r3, #0
 80068f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068f2:	4b8b      	ldr	r3, [pc, #556]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10d      	bne.n	800691a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068fe:	4b88      	ldr	r3, [pc, #544]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	4a87      	ldr	r2, [pc, #540]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 8006904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006908:	61d3      	str	r3, [r2, #28]
 800690a:	4b85      	ldr	r3, [pc, #532]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006912:	60bb      	str	r3, [r7, #8]
 8006914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006916:	2301      	movs	r3, #1
 8006918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800691a:	4b82      	ldr	r3, [pc, #520]	@ (8006b24 <HAL_RCC_OscConfig+0x4c8>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006922:	2b00      	cmp	r3, #0
 8006924:	d118      	bne.n	8006958 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006926:	4b7f      	ldr	r3, [pc, #508]	@ (8006b24 <HAL_RCC_OscConfig+0x4c8>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a7e      	ldr	r2, [pc, #504]	@ (8006b24 <HAL_RCC_OscConfig+0x4c8>)
 800692c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006932:	f7fc f96f 	bl	8002c14 <HAL_GetTick>
 8006936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006938:	e008      	b.n	800694c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800693a:	f7fc f96b 	bl	8002c14 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b64      	cmp	r3, #100	@ 0x64
 8006946:	d901      	bls.n	800694c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e103      	b.n	8006b54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800694c:	4b75      	ldr	r3, [pc, #468]	@ (8006b24 <HAL_RCC_OscConfig+0x4c8>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006954:	2b00      	cmp	r3, #0
 8006956:	d0f0      	beq.n	800693a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d106      	bne.n	800696e <HAL_RCC_OscConfig+0x312>
 8006960:	4b6f      	ldr	r3, [pc, #444]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	4a6e      	ldr	r2, [pc, #440]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 8006966:	f043 0301 	orr.w	r3, r3, #1
 800696a:	6213      	str	r3, [r2, #32]
 800696c:	e02d      	b.n	80069ca <HAL_RCC_OscConfig+0x36e>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10c      	bne.n	8006990 <HAL_RCC_OscConfig+0x334>
 8006976:	4b6a      	ldr	r3, [pc, #424]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	4a69      	ldr	r2, [pc, #420]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 800697c:	f023 0301 	bic.w	r3, r3, #1
 8006980:	6213      	str	r3, [r2, #32]
 8006982:	4b67      	ldr	r3, [pc, #412]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	4a66      	ldr	r2, [pc, #408]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 8006988:	f023 0304 	bic.w	r3, r3, #4
 800698c:	6213      	str	r3, [r2, #32]
 800698e:	e01c      	b.n	80069ca <HAL_RCC_OscConfig+0x36e>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	2b05      	cmp	r3, #5
 8006996:	d10c      	bne.n	80069b2 <HAL_RCC_OscConfig+0x356>
 8006998:	4b61      	ldr	r3, [pc, #388]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	4a60      	ldr	r2, [pc, #384]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 800699e:	f043 0304 	orr.w	r3, r3, #4
 80069a2:	6213      	str	r3, [r2, #32]
 80069a4:	4b5e      	ldr	r3, [pc, #376]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 80069a6:	6a1b      	ldr	r3, [r3, #32]
 80069a8:	4a5d      	ldr	r2, [pc, #372]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 80069aa:	f043 0301 	orr.w	r3, r3, #1
 80069ae:	6213      	str	r3, [r2, #32]
 80069b0:	e00b      	b.n	80069ca <HAL_RCC_OscConfig+0x36e>
 80069b2:	4b5b      	ldr	r3, [pc, #364]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	4a5a      	ldr	r2, [pc, #360]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 80069b8:	f023 0301 	bic.w	r3, r3, #1
 80069bc:	6213      	str	r3, [r2, #32]
 80069be:	4b58      	ldr	r3, [pc, #352]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	4a57      	ldr	r2, [pc, #348]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 80069c4:	f023 0304 	bic.w	r3, r3, #4
 80069c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d015      	beq.n	80069fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069d2:	f7fc f91f 	bl	8002c14 <HAL_GetTick>
 80069d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069d8:	e00a      	b.n	80069f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069da:	f7fc f91b 	bl	8002c14 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d901      	bls.n	80069f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e0b1      	b.n	8006b54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069f0:	4b4b      	ldr	r3, [pc, #300]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d0ee      	beq.n	80069da <HAL_RCC_OscConfig+0x37e>
 80069fc:	e014      	b.n	8006a28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069fe:	f7fc f909 	bl	8002c14 <HAL_GetTick>
 8006a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a04:	e00a      	b.n	8006a1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a06:	f7fc f905 	bl	8002c14 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d901      	bls.n	8006a1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e09b      	b.n	8006b54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a1c:	4b40      	ldr	r3, [pc, #256]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1ee      	bne.n	8006a06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006a28:	7dfb      	ldrb	r3, [r7, #23]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d105      	bne.n	8006a3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a2e:	4b3c      	ldr	r3, [pc, #240]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 8006a30:	69db      	ldr	r3, [r3, #28]
 8006a32:	4a3b      	ldr	r2, [pc, #236]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 8006a34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 8087 	beq.w	8006b52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a44:	4b36      	ldr	r3, [pc, #216]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f003 030c 	and.w	r3, r3, #12
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d061      	beq.n	8006b14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	69db      	ldr	r3, [r3, #28]
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d146      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a58:	4b33      	ldr	r3, [pc, #204]	@ (8006b28 <HAL_RCC_OscConfig+0x4cc>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a5e:	f7fc f8d9 	bl	8002c14 <HAL_GetTick>
 8006a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a64:	e008      	b.n	8006a78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a66:	f7fc f8d5 	bl	8002c14 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d901      	bls.n	8006a78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e06d      	b.n	8006b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a78:	4b29      	ldr	r3, [pc, #164]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1f0      	bne.n	8006a66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a8c:	d108      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006a8e:	4b24      	ldr	r3, [pc, #144]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	4921      	ldr	r1, [pc, #132]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a19      	ldr	r1, [r3, #32]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab0:	430b      	orrs	r3, r1
 8006ab2:	491b      	ldr	r1, [pc, #108]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8006b28 <HAL_RCC_OscConfig+0x4cc>)
 8006aba:	2201      	movs	r2, #1
 8006abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006abe:	f7fc f8a9 	bl	8002c14 <HAL_GetTick>
 8006ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ac4:	e008      	b.n	8006ad8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ac6:	f7fc f8a5 	bl	8002c14 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d901      	bls.n	8006ad8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e03d      	b.n	8006b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ad8:	4b11      	ldr	r3, [pc, #68]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d0f0      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x46a>
 8006ae4:	e035      	b.n	8006b52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ae6:	4b10      	ldr	r3, [pc, #64]	@ (8006b28 <HAL_RCC_OscConfig+0x4cc>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aec:	f7fc f892 	bl	8002c14 <HAL_GetTick>
 8006af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006af2:	e008      	b.n	8006b06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006af4:	f7fc f88e 	bl	8002c14 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e026      	b.n	8006b54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b06:	4b06      	ldr	r3, [pc, #24]	@ (8006b20 <HAL_RCC_OscConfig+0x4c4>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1f0      	bne.n	8006af4 <HAL_RCC_OscConfig+0x498>
 8006b12:	e01e      	b.n	8006b52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	69db      	ldr	r3, [r3, #28]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d107      	bne.n	8006b2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e019      	b.n	8006b54 <HAL_RCC_OscConfig+0x4f8>
 8006b20:	40021000 	.word	0x40021000
 8006b24:	40007000 	.word	0x40007000
 8006b28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b5c <HAL_RCC_OscConfig+0x500>)
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d106      	bne.n	8006b4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d001      	beq.n	8006b52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e000      	b.n	8006b54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3718      	adds	r7, #24
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	40021000 	.word	0x40021000

08006b60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e0d0      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b74:	4b6a      	ldr	r3, [pc, #424]	@ (8006d20 <HAL_RCC_ClockConfig+0x1c0>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0307 	and.w	r3, r3, #7
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d910      	bls.n	8006ba4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b82:	4b67      	ldr	r3, [pc, #412]	@ (8006d20 <HAL_RCC_ClockConfig+0x1c0>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f023 0207 	bic.w	r2, r3, #7
 8006b8a:	4965      	ldr	r1, [pc, #404]	@ (8006d20 <HAL_RCC_ClockConfig+0x1c0>)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b92:	4b63      	ldr	r3, [pc, #396]	@ (8006d20 <HAL_RCC_ClockConfig+0x1c0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0307 	and.w	r3, r3, #7
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d001      	beq.n	8006ba4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e0b8      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0302 	and.w	r3, r3, #2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d020      	beq.n	8006bf2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0304 	and.w	r3, r3, #4
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d005      	beq.n	8006bc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bbc:	4b59      	ldr	r3, [pc, #356]	@ (8006d24 <HAL_RCC_ClockConfig+0x1c4>)
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	4a58      	ldr	r2, [pc, #352]	@ (8006d24 <HAL_RCC_ClockConfig+0x1c4>)
 8006bc2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006bc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0308 	and.w	r3, r3, #8
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d005      	beq.n	8006be0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bd4:	4b53      	ldr	r3, [pc, #332]	@ (8006d24 <HAL_RCC_ClockConfig+0x1c4>)
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	4a52      	ldr	r2, [pc, #328]	@ (8006d24 <HAL_RCC_ClockConfig+0x1c4>)
 8006bda:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006bde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006be0:	4b50      	ldr	r3, [pc, #320]	@ (8006d24 <HAL_RCC_ClockConfig+0x1c4>)
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	494d      	ldr	r1, [pc, #308]	@ (8006d24 <HAL_RCC_ClockConfig+0x1c4>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d040      	beq.n	8006c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d107      	bne.n	8006c16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c06:	4b47      	ldr	r3, [pc, #284]	@ (8006d24 <HAL_RCC_ClockConfig+0x1c4>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d115      	bne.n	8006c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e07f      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d107      	bne.n	8006c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c1e:	4b41      	ldr	r3, [pc, #260]	@ (8006d24 <HAL_RCC_ClockConfig+0x1c4>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d109      	bne.n	8006c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e073      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8006d24 <HAL_RCC_ClockConfig+0x1c4>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e06b      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c3e:	4b39      	ldr	r3, [pc, #228]	@ (8006d24 <HAL_RCC_ClockConfig+0x1c4>)
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f023 0203 	bic.w	r2, r3, #3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	4936      	ldr	r1, [pc, #216]	@ (8006d24 <HAL_RCC_ClockConfig+0x1c4>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c50:	f7fb ffe0 	bl	8002c14 <HAL_GetTick>
 8006c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c56:	e00a      	b.n	8006c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c58:	f7fb ffdc 	bl	8002c14 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e053      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8006d24 <HAL_RCC_ClockConfig+0x1c4>)
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f003 020c 	and.w	r2, r3, #12
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d1eb      	bne.n	8006c58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c80:	4b27      	ldr	r3, [pc, #156]	@ (8006d20 <HAL_RCC_ClockConfig+0x1c0>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0307 	and.w	r3, r3, #7
 8006c88:	683a      	ldr	r2, [r7, #0]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d210      	bcs.n	8006cb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c8e:	4b24      	ldr	r3, [pc, #144]	@ (8006d20 <HAL_RCC_ClockConfig+0x1c0>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f023 0207 	bic.w	r2, r3, #7
 8006c96:	4922      	ldr	r1, [pc, #136]	@ (8006d20 <HAL_RCC_ClockConfig+0x1c0>)
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c9e:	4b20      	ldr	r3, [pc, #128]	@ (8006d20 <HAL_RCC_ClockConfig+0x1c0>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0307 	and.w	r3, r3, #7
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d001      	beq.n	8006cb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e032      	b.n	8006d16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d008      	beq.n	8006cce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cbc:	4b19      	ldr	r3, [pc, #100]	@ (8006d24 <HAL_RCC_ClockConfig+0x1c4>)
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	4916      	ldr	r1, [pc, #88]	@ (8006d24 <HAL_RCC_ClockConfig+0x1c4>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d009      	beq.n	8006cee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006cda:	4b12      	ldr	r3, [pc, #72]	@ (8006d24 <HAL_RCC_ClockConfig+0x1c4>)
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	490e      	ldr	r1, [pc, #56]	@ (8006d24 <HAL_RCC_ClockConfig+0x1c4>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006cee:	f000 f821 	bl	8006d34 <HAL_RCC_GetSysClockFreq>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8006d24 <HAL_RCC_ClockConfig+0x1c4>)
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	091b      	lsrs	r3, r3, #4
 8006cfa:	f003 030f 	and.w	r3, r3, #15
 8006cfe:	490a      	ldr	r1, [pc, #40]	@ (8006d28 <HAL_RCC_ClockConfig+0x1c8>)
 8006d00:	5ccb      	ldrb	r3, [r1, r3]
 8006d02:	fa22 f303 	lsr.w	r3, r2, r3
 8006d06:	4a09      	ldr	r2, [pc, #36]	@ (8006d2c <HAL_RCC_ClockConfig+0x1cc>)
 8006d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006d0a:	4b09      	ldr	r3, [pc, #36]	@ (8006d30 <HAL_RCC_ClockConfig+0x1d0>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fb ff3e 	bl	8002b90 <HAL_InitTick>

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	40022000 	.word	0x40022000
 8006d24:	40021000 	.word	0x40021000
 8006d28:	08013514 	.word	0x08013514
 8006d2c:	20000080 	.word	0x20000080
 8006d30:	20000084 	.word	0x20000084

08006d34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b087      	sub	sp, #28
 8006d38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60bb      	str	r3, [r7, #8]
 8006d42:	2300      	movs	r3, #0
 8006d44:	617b      	str	r3, [r7, #20]
 8006d46:	2300      	movs	r3, #0
 8006d48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006dc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f003 030c 	and.w	r3, r3, #12
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	d002      	beq.n	8006d64 <HAL_RCC_GetSysClockFreq+0x30>
 8006d5e:	2b08      	cmp	r3, #8
 8006d60:	d003      	beq.n	8006d6a <HAL_RCC_GetSysClockFreq+0x36>
 8006d62:	e027      	b.n	8006db4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006d64:	4b19      	ldr	r3, [pc, #100]	@ (8006dcc <HAL_RCC_GetSysClockFreq+0x98>)
 8006d66:	613b      	str	r3, [r7, #16]
      break;
 8006d68:	e027      	b.n	8006dba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	0c9b      	lsrs	r3, r3, #18
 8006d6e:	f003 030f 	and.w	r3, r3, #15
 8006d72:	4a17      	ldr	r2, [pc, #92]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006d74:	5cd3      	ldrb	r3, [r2, r3]
 8006d76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d010      	beq.n	8006da4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d82:	4b11      	ldr	r3, [pc, #68]	@ (8006dc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	0c5b      	lsrs	r3, r3, #17
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	4a11      	ldr	r2, [pc, #68]	@ (8006dd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006d8e:	5cd3      	ldrb	r3, [r2, r3]
 8006d90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a0d      	ldr	r2, [pc, #52]	@ (8006dcc <HAL_RCC_GetSysClockFreq+0x98>)
 8006d96:	fb03 f202 	mul.w	r2, r3, r2
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da0:	617b      	str	r3, [r7, #20]
 8006da2:	e004      	b.n	8006dae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a0c      	ldr	r2, [pc, #48]	@ (8006dd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006da8:	fb02 f303 	mul.w	r3, r2, r3
 8006dac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	613b      	str	r3, [r7, #16]
      break;
 8006db2:	e002      	b.n	8006dba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006db4:	4b05      	ldr	r3, [pc, #20]	@ (8006dcc <HAL_RCC_GetSysClockFreq+0x98>)
 8006db6:	613b      	str	r3, [r7, #16]
      break;
 8006db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006dba:	693b      	ldr	r3, [r7, #16]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	371c      	adds	r7, #28
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bc80      	pop	{r7}
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	40021000 	.word	0x40021000
 8006dcc:	007a1200 	.word	0x007a1200
 8006dd0:	0801352c 	.word	0x0801352c
 8006dd4:	0801353c 	.word	0x0801353c
 8006dd8:	003d0900 	.word	0x003d0900

08006ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006de0:	4b02      	ldr	r3, [pc, #8]	@ (8006dec <HAL_RCC_GetHCLKFreq+0x10>)
 8006de2:	681b      	ldr	r3, [r3, #0]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr
 8006dec:	20000080 	.word	0x20000080

08006df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006df4:	f7ff fff2 	bl	8006ddc <HAL_RCC_GetHCLKFreq>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	4b05      	ldr	r3, [pc, #20]	@ (8006e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	0a1b      	lsrs	r3, r3, #8
 8006e00:	f003 0307 	and.w	r3, r3, #7
 8006e04:	4903      	ldr	r1, [pc, #12]	@ (8006e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e06:	5ccb      	ldrb	r3, [r1, r3]
 8006e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	40021000 	.word	0x40021000
 8006e14:	08013524 	.word	0x08013524

08006e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e1c:	f7ff ffde 	bl	8006ddc <HAL_RCC_GetHCLKFreq>
 8006e20:	4602      	mov	r2, r0
 8006e22:	4b05      	ldr	r3, [pc, #20]	@ (8006e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	0adb      	lsrs	r3, r3, #11
 8006e28:	f003 0307 	and.w	r3, r3, #7
 8006e2c:	4903      	ldr	r1, [pc, #12]	@ (8006e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e2e:	5ccb      	ldrb	r3, [r1, r3]
 8006e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	40021000 	.word	0x40021000
 8006e3c:	08013524 	.word	0x08013524

08006e40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006e48:	4b0a      	ldr	r3, [pc, #40]	@ (8006e74 <RCC_Delay+0x34>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8006e78 <RCC_Delay+0x38>)
 8006e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e52:	0a5b      	lsrs	r3, r3, #9
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	fb02 f303 	mul.w	r3, r2, r3
 8006e5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006e5c:	bf00      	nop
  }
  while (Delay --);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	1e5a      	subs	r2, r3, #1
 8006e62:	60fa      	str	r2, [r7, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1f9      	bne.n	8006e5c <RCC_Delay+0x1c>
}
 8006e68:	bf00      	nop
 8006e6a:	bf00      	nop
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bc80      	pop	{r7}
 8006e72:	4770      	bx	lr
 8006e74:	20000080 	.word	0x20000080
 8006e78:	10624dd3 	.word	0x10624dd3

08006e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	613b      	str	r3, [r7, #16]
 8006e88:	2300      	movs	r3, #0
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d07d      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e9c:	4b4f      	ldr	r3, [pc, #316]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e9e:	69db      	ldr	r3, [r3, #28]
 8006ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10d      	bne.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ea8:	4b4c      	ldr	r3, [pc, #304]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006eaa:	69db      	ldr	r3, [r3, #28]
 8006eac:	4a4b      	ldr	r2, [pc, #300]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006eae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006eb2:	61d3      	str	r3, [r2, #28]
 8006eb4:	4b49      	ldr	r3, [pc, #292]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ebc:	60bb      	str	r3, [r7, #8]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ec4:	4b46      	ldr	r3, [pc, #280]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d118      	bne.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ed0:	4b43      	ldr	r3, [pc, #268]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a42      	ldr	r2, [pc, #264]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006eda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006edc:	f7fb fe9a 	bl	8002c14 <HAL_GetTick>
 8006ee0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ee2:	e008      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ee4:	f7fb fe96 	bl	8002c14 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	2b64      	cmp	r3, #100	@ 0x64
 8006ef0:	d901      	bls.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e06d      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ef6:	4b3a      	ldr	r3, [pc, #232]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d0f0      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f02:	4b36      	ldr	r3, [pc, #216]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f0a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d02e      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d027      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f20:	4b2e      	ldr	r3, [pc, #184]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f28:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f2a:	4b2e      	ldr	r3, [pc, #184]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f30:	4b2c      	ldr	r3, [pc, #176]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006f36:	4a29      	ldr	r2, [pc, #164]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d014      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f46:	f7fb fe65 	bl	8002c14 <HAL_GetTick>
 8006f4a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f4c:	e00a      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f4e:	f7fb fe61 	bl	8002c14 <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d901      	bls.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e036      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f64:	4b1d      	ldr	r3, [pc, #116]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f66:	6a1b      	ldr	r3, [r3, #32]
 8006f68:	f003 0302 	and.w	r3, r3, #2
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d0ee      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f70:	4b1a      	ldr	r3, [pc, #104]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	4917      	ldr	r1, [pc, #92]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006f82:	7dfb      	ldrb	r3, [r7, #23]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d105      	bne.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f88:	4b14      	ldr	r3, [pc, #80]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	4a13      	ldr	r2, [pc, #76]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d008      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	490b      	ldr	r1, [pc, #44]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0310 	and.w	r3, r3, #16
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d008      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fbe:	4b07      	ldr	r3, [pc, #28]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	4904      	ldr	r1, [pc, #16]	@ (8006fdc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	40021000 	.word	0x40021000
 8006fe0:	40007000 	.word	0x40007000
 8006fe4:	42420440 	.word	0x42420440

08006fe8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b088      	sub	sp, #32
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	617b      	str	r3, [r7, #20]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	61fb      	str	r3, [r7, #28]
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	2300      	movs	r3, #0
 8007002:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3b01      	subs	r3, #1
 8007008:	2b0f      	cmp	r3, #15
 800700a:	f200 80af 	bhi.w	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800700e:	a201      	add	r2, pc, #4	@ (adr r2, 8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	080070eb 	.word	0x080070eb
 8007018:	08007151 	.word	0x08007151
 800701c:	0800716d 	.word	0x0800716d
 8007020:	080070db 	.word	0x080070db
 8007024:	0800716d 	.word	0x0800716d
 8007028:	0800716d 	.word	0x0800716d
 800702c:	0800716d 	.word	0x0800716d
 8007030:	080070e3 	.word	0x080070e3
 8007034:	0800716d 	.word	0x0800716d
 8007038:	0800716d 	.word	0x0800716d
 800703c:	0800716d 	.word	0x0800716d
 8007040:	0800716d 	.word	0x0800716d
 8007044:	0800716d 	.word	0x0800716d
 8007048:	0800716d 	.word	0x0800716d
 800704c:	0800716d 	.word	0x0800716d
 8007050:	08007055 	.word	0x08007055
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8007054:	4b4a      	ldr	r3, [pc, #296]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800705a:	4b49      	ldr	r3, [pc, #292]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 8084 	beq.w	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	0c9b      	lsrs	r3, r3, #18
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	4a44      	ldr	r2, [pc, #272]	@ (8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8007072:	5cd3      	ldrb	r3, [r2, r3]
 8007074:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d015      	beq.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007080:	4b3f      	ldr	r3, [pc, #252]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	0c5b      	lsrs	r3, r3, #17
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	4a3f      	ldr	r2, [pc, #252]	@ (8007188 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800708c:	5cd3      	ldrb	r3, [r2, r3]
 800708e:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00d      	beq.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800709a:	4a3c      	ldr	r2, [pc, #240]	@ (800718c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	fbb2 f2f3 	udiv	r2, r2, r3
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	fb02 f303 	mul.w	r3, r2, r3
 80070a8:	61fb      	str	r3, [r7, #28]
 80070aa:	e004      	b.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	4a38      	ldr	r2, [pc, #224]	@ (8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80070b0:	fb02 f303 	mul.w	r3, r2, r3
 80070b4:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80070b6:	4b32      	ldr	r3, [pc, #200]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070c2:	d102      	bne.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80070c8:	e052      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	4a31      	ldr	r2, [pc, #196]	@ (8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 80070d0:	fba2 2303 	umull	r2, r3, r2, r3
 80070d4:	085b      	lsrs	r3, r3, #1
 80070d6:	61bb      	str	r3, [r7, #24]
      break;
 80070d8:	e04a      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80070da:	f7ff fe2b 	bl	8006d34 <HAL_RCC_GetSysClockFreq>
 80070de:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80070e0:	e049      	b.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80070e2:	f7ff fe27 	bl	8006d34 <HAL_RCC_GetSysClockFreq>
 80070e6:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80070e8:	e045      	b.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80070ea:	4b25      	ldr	r3, [pc, #148]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070fa:	d108      	bne.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f003 0302 	and.w	r3, r3, #2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d003      	beq.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8007106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800710a:	61bb      	str	r3, [r7, #24]
 800710c:	e01f      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007118:	d109      	bne.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800711a:	4b19      	ldr	r3, [pc, #100]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800711c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	2b00      	cmp	r3, #0
 8007124:	d003      	beq.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8007126:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800712a:	61bb      	str	r3, [r7, #24]
 800712c:	e00f      	b.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007134:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007138:	d11c      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800713a:	4b11      	ldr	r3, [pc, #68]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d016      	beq.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8007146:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800714a:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800714c:	e012      	b.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800714e:	e011      	b.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007150:	f7ff fe62 	bl	8006e18 <HAL_RCC_GetPCLK2Freq>
 8007154:	4602      	mov	r2, r0
 8007156:	4b0a      	ldr	r3, [pc, #40]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	0b9b      	lsrs	r3, r3, #14
 800715c:	f003 0303 	and.w	r3, r3, #3
 8007160:	3301      	adds	r3, #1
 8007162:	005b      	lsls	r3, r3, #1
 8007164:	fbb2 f3f3 	udiv	r3, r2, r3
 8007168:	61bb      	str	r3, [r7, #24]
      break;
 800716a:	e004      	b.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 800716c:	bf00      	nop
 800716e:	e002      	b.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8007170:	bf00      	nop
 8007172:	e000      	b.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8007174:	bf00      	nop
    }
  }
  return (frequency);
 8007176:	69bb      	ldr	r3, [r7, #24]
}
 8007178:	4618      	mov	r0, r3
 800717a:	3720      	adds	r7, #32
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	40021000 	.word	0x40021000
 8007184:	08013540 	.word	0x08013540
 8007188:	08013550 	.word	0x08013550
 800718c:	007a1200 	.word	0x007a1200
 8007190:	003d0900 	.word	0x003d0900
 8007194:	aaaaaaab 	.word	0xaaaaaaab

08007198 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e07a      	b.n	80072a4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	7c5b      	ldrb	r3, [r3, #17]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d105      	bne.n	80071c4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7fa fd3a 	bl	8001c38 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2202      	movs	r2, #2
 80071c8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f9be 	bl	800754c <HAL_RTC_WaitForSynchro>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d004      	beq.n	80071e0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2204      	movs	r2, #4
 80071da:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e061      	b.n	80072a4 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fa77 	bl	80076d4 <RTC_EnterInitMode>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d004      	beq.n	80071f6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2204      	movs	r2, #4
 80071f0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e056      	b.n	80072a4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0207 	bic.w	r2, r2, #7
 8007204:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d005      	beq.n	800721a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800720e:	4b27      	ldr	r3, [pc, #156]	@ (80072ac <HAL_RTC_Init+0x114>)
 8007210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007212:	4a26      	ldr	r2, [pc, #152]	@ (80072ac <HAL_RTC_Init+0x114>)
 8007214:	f023 0301 	bic.w	r3, r3, #1
 8007218:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800721a:	4b24      	ldr	r3, [pc, #144]	@ (80072ac <HAL_RTC_Init+0x114>)
 800721c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721e:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	4921      	ldr	r1, [pc, #132]	@ (80072ac <HAL_RTC_Init+0x114>)
 8007228:	4313      	orrs	r3, r2
 800722a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007234:	d003      	beq.n	800723e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	e00e      	b.n	800725c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800723e:	2001      	movs	r0, #1
 8007240:	f7ff fed2 	bl	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007244:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d104      	bne.n	8007256 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2204      	movs	r2, #4
 8007250:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e026      	b.n	80072a4 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3b01      	subs	r3, #1
 800725a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	0c1a      	lsrs	r2, r3, #16
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f002 020f 	and.w	r2, r2, #15
 8007268:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	b292      	uxth	r2, r2
 8007272:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fa55 	bl	8007724 <RTC_ExitInitMode>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d004      	beq.n	800728a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2204      	movs	r2, #4
 8007284:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e00c      	b.n	80072a4 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80072a2:	2300      	movs	r3, #0
  }
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	40006c00 	.word	0x40006c00

080072b0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80072b0:	b590      	push	{r4, r7, lr}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	2300      	movs	r3, #0
 80072c2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d002      	beq.n	80072d0 <HAL_RTC_SetTime+0x20>
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e080      	b.n	80073d6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	7c1b      	ldrb	r3, [r3, #16]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d101      	bne.n	80072e0 <HAL_RTC_SetTime+0x30>
 80072dc:	2302      	movs	r3, #2
 80072de:	e07a      	b.n	80073d6 <HAL_RTC_SetTime+0x126>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2201      	movs	r2, #1
 80072e4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2202      	movs	r2, #2
 80072ea:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d113      	bne.n	800731a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	461a      	mov	r2, r3
 80072f8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80072fc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	785b      	ldrb	r3, [r3, #1]
 8007304:	4619      	mov	r1, r3
 8007306:	460b      	mov	r3, r1
 8007308:	011b      	lsls	r3, r3, #4
 800730a:	1a5b      	subs	r3, r3, r1
 800730c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800730e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007314:	4413      	add	r3, r2
 8007316:	617b      	str	r3, [r7, #20]
 8007318:	e01e      	b.n	8007358 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	4618      	mov	r0, r3
 8007320:	f000 fa28 	bl	8007774 <RTC_Bcd2ToByte>
 8007324:	4603      	mov	r3, r0
 8007326:	461a      	mov	r2, r3
 8007328:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800732c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	785b      	ldrb	r3, [r3, #1]
 8007334:	4618      	mov	r0, r3
 8007336:	f000 fa1d 	bl	8007774 <RTC_Bcd2ToByte>
 800733a:	4603      	mov	r3, r0
 800733c:	461a      	mov	r2, r3
 800733e:	4613      	mov	r3, r2
 8007340:	011b      	lsls	r3, r3, #4
 8007342:	1a9b      	subs	r3, r3, r2
 8007344:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007346:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	789b      	ldrb	r3, [r3, #2]
 800734c:	4618      	mov	r0, r3
 800734e:	f000 fa11 	bl	8007774 <RTC_Bcd2ToByte>
 8007352:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007354:	4423      	add	r3, r4
 8007356:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007358:	6979      	ldr	r1, [r7, #20]
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 f953 	bl	8007606 <RTC_WriteTimeCounter>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d007      	beq.n	8007376 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2204      	movs	r2, #4
 800736a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e02f      	b.n	80073d6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f022 0205 	bic.w	r2, r2, #5
 8007384:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f000 f964 	bl	8007654 <RTC_ReadAlarmCounter>
 800738c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007394:	d018      	beq.n	80073c8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	429a      	cmp	r2, r3
 800739c:	d214      	bcs.n	80073c8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80073a4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80073a8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80073aa:	6939      	ldr	r1, [r7, #16]
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 f96a 	bl	8007686 <RTC_WriteAlarmCounter>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d007      	beq.n	80073c8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2204      	movs	r2, #4
 80073bc:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e006      	b.n	80073d6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2201      	movs	r2, #1
 80073cc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80073d4:	2300      	movs	r3, #0
  }
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	371c      	adds	r7, #28
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd90      	pop	{r4, r7, pc}
	...

080073e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b088      	sub	sp, #32
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80073ec:	2300      	movs	r3, #0
 80073ee:	61fb      	str	r3, [r7, #28]
 80073f0:	2300      	movs	r3, #0
 80073f2:	61bb      	str	r3, [r7, #24]
 80073f4:	2300      	movs	r3, #0
 80073f6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d002      	beq.n	8007404 <HAL_RTC_SetDate+0x24>
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e097      	b.n	8007538 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	7c1b      	ldrb	r3, [r3, #16]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d101      	bne.n	8007414 <HAL_RTC_SetDate+0x34>
 8007410:	2302      	movs	r3, #2
 8007412:	e091      	b.n	8007538 <HAL_RTC_SetDate+0x158>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2201      	movs	r2, #1
 8007418:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2202      	movs	r2, #2
 800741e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10c      	bne.n	8007440 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	78da      	ldrb	r2, [r3, #3]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	785a      	ldrb	r2, [r3, #1]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	789a      	ldrb	r2, [r3, #2]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	739a      	strb	r2, [r3, #14]
 800743e:	e01a      	b.n	8007476 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	78db      	ldrb	r3, [r3, #3]
 8007444:	4618      	mov	r0, r3
 8007446:	f000 f995 	bl	8007774 <RTC_Bcd2ToByte>
 800744a:	4603      	mov	r3, r0
 800744c:	461a      	mov	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	785b      	ldrb	r3, [r3, #1]
 8007456:	4618      	mov	r0, r3
 8007458:	f000 f98c 	bl	8007774 <RTC_Bcd2ToByte>
 800745c:	4603      	mov	r3, r0
 800745e:	461a      	mov	r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	789b      	ldrb	r3, [r3, #2]
 8007468:	4618      	mov	r0, r3
 800746a:	f000 f983 	bl	8007774 <RTC_Bcd2ToByte>
 800746e:	4603      	mov	r3, r0
 8007470:	461a      	mov	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	7bdb      	ldrb	r3, [r3, #15]
 800747a:	4618      	mov	r0, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	7b59      	ldrb	r1, [r3, #13]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	7b9b      	ldrb	r3, [r3, #14]
 8007484:	461a      	mov	r2, r3
 8007486:	f000 f993 	bl	80077b0 <RTC_WeekDayNum>
 800748a:	4603      	mov	r3, r0
 800748c:	461a      	mov	r2, r3
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	7b1a      	ldrb	r2, [r3, #12]
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 f883 	bl	80075a6 <RTC_ReadTimeCounter>
 80074a0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	4a26      	ldr	r2, [pc, #152]	@ (8007540 <HAL_RTC_SetDate+0x160>)
 80074a6:	fba2 2303 	umull	r2, r3, r2, r3
 80074aa:	0adb      	lsrs	r3, r3, #11
 80074ac:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2b18      	cmp	r3, #24
 80074b2:	d93a      	bls.n	800752a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	4a23      	ldr	r2, [pc, #140]	@ (8007544 <HAL_RTC_SetDate+0x164>)
 80074b8:	fba2 2303 	umull	r2, r3, r2, r3
 80074bc:	091b      	lsrs	r3, r3, #4
 80074be:	4a22      	ldr	r2, [pc, #136]	@ (8007548 <HAL_RTC_SetDate+0x168>)
 80074c0:	fb02 f303 	mul.w	r3, r2, r3
 80074c4:	69fa      	ldr	r2, [r7, #28]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80074ca:	69f9      	ldr	r1, [r7, #28]
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 f89a 	bl	8007606 <RTC_WriteTimeCounter>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d007      	beq.n	80074e8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2204      	movs	r2, #4
 80074dc:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e027      	b.n	8007538 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 f8b3 	bl	8007654 <RTC_ReadAlarmCounter>
 80074ee:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f6:	d018      	beq.n	800752a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d214      	bcs.n	800752a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8007506:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800750a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800750c:	69b9      	ldr	r1, [r7, #24]
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f000 f8b9 	bl	8007686 <RTC_WriteAlarmCounter>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d007      	beq.n	800752a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2204      	movs	r2, #4
 800751e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e006      	b.n	8007538 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2201      	movs	r2, #1
 800752e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3720      	adds	r7, #32
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	91a2b3c5 	.word	0x91a2b3c5
 8007544:	aaaaaaab 	.word	0xaaaaaaab
 8007548:	00015180 	.word	0x00015180

0800754c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007554:	2300      	movs	r3, #0
 8007556:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e01d      	b.n	800759e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 0208 	bic.w	r2, r2, #8
 8007570:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007572:	f7fb fb4f 	bl	8002c14 <HAL_GetTick>
 8007576:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007578:	e009      	b.n	800758e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800757a:	f7fb fb4b 	bl	8002c14 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007588:	d901      	bls.n	800758e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e007      	b.n	800759e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f003 0308 	and.w	r3, r3, #8
 8007598:	2b00      	cmp	r3, #0
 800759a:	d0ee      	beq.n	800757a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b087      	sub	sp, #28
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	827b      	strh	r3, [r7, #18]
 80075b2:	2300      	movs	r3, #0
 80075b4:	823b      	strh	r3, [r7, #16]
 80075b6:	2300      	movs	r3, #0
 80075b8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80075d6:	8a7a      	ldrh	r2, [r7, #18]
 80075d8:	8a3b      	ldrh	r3, [r7, #16]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d008      	beq.n	80075f0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80075de:	8a3b      	ldrh	r3, [r7, #16]
 80075e0:	041a      	lsls	r2, r3, #16
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	69db      	ldr	r3, [r3, #28]
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	4313      	orrs	r3, r2
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	e004      	b.n	80075fa <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80075f0:	8a7b      	ldrh	r3, [r7, #18]
 80075f2:	041a      	lsls	r2, r3, #16
 80075f4:	89fb      	ldrh	r3, [r7, #14]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80075fa:	697b      	ldr	r3, [r7, #20]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	371c      	adds	r7, #28
 8007600:	46bd      	mov	sp, r7
 8007602:	bc80      	pop	{r7}
 8007604:	4770      	bx	lr

08007606 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b084      	sub	sp, #16
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f85d 	bl	80076d4 <RTC_EnterInitMode>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	73fb      	strb	r3, [r7, #15]
 8007624:	e011      	b.n	800764a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	0c12      	lsrs	r2, r2, #16
 800762e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	b292      	uxth	r2, r2
 8007638:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f872 	bl	8007724 <RTC_ExitInitMode>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800764a:	7bfb      	ldrb	r3, [r7, #15]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	81fb      	strh	r3, [r7, #14]
 8007660:	2300      	movs	r3, #0
 8007662:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007672:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8007674:	89fb      	ldrh	r3, [r7, #14]
 8007676:	041a      	lsls	r2, r3, #16
 8007678:	89bb      	ldrh	r3, [r7, #12]
 800767a:	4313      	orrs	r3, r2
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	bc80      	pop	{r7}
 8007684:	4770      	bx	lr

08007686 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f81d 	bl	80076d4 <RTC_EnterInitMode>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	73fb      	strb	r3, [r7, #15]
 80076a4:	e011      	b.n	80076ca <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	0c12      	lsrs	r2, r2, #16
 80076ae:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	683a      	ldr	r2, [r7, #0]
 80076b6:	b292      	uxth	r2, r2
 80076b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f832 	bl	8007724 <RTC_ExitInitMode>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d001      	beq.n	80076ca <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80076ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80076dc:	2300      	movs	r3, #0
 80076de:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80076e0:	f7fb fa98 	bl	8002c14 <HAL_GetTick>
 80076e4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80076e6:	e009      	b.n	80076fc <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80076e8:	f7fb fa94 	bl	8002c14 <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80076f6:	d901      	bls.n	80076fc <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e00f      	b.n	800771c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f003 0320 	and.w	r3, r3, #32
 8007706:	2b00      	cmp	r3, #0
 8007708:	d0ee      	beq.n	80076e8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f042 0210 	orr.w	r2, r2, #16
 8007718:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685a      	ldr	r2, [r3, #4]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f022 0210 	bic.w	r2, r2, #16
 800773e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007740:	f7fb fa68 	bl	8002c14 <HAL_GetTick>
 8007744:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007746:	e009      	b.n	800775c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007748:	f7fb fa64 	bl	8002c14 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007756:	d901      	bls.n	800775c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e007      	b.n	800776c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f003 0320 	and.w	r3, r3, #32
 8007766:	2b00      	cmp	r3, #0
 8007768:	d0ee      	beq.n	8007748 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	4603      	mov	r3, r0
 800777c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8007782:	79fb      	ldrb	r3, [r7, #7]
 8007784:	091b      	lsrs	r3, r3, #4
 8007786:	b2db      	uxtb	r3, r3
 8007788:	461a      	mov	r2, r3
 800778a:	4613      	mov	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	005b      	lsls	r3, r3, #1
 8007792:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007794:	79fb      	ldrb	r3, [r7, #7]
 8007796:	f003 030f 	and.w	r3, r3, #15
 800779a:	b2da      	uxtb	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	4413      	add	r3, r2
 80077a2:	b2db      	uxtb	r3, r3
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bc80      	pop	{r7}
 80077ac:	4770      	bx	lr
	...

080077b0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	460b      	mov	r3, r1
 80077ba:	70fb      	strb	r3, [r7, #3]
 80077bc:	4613      	mov	r3, r2
 80077be:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	60bb      	str	r3, [r7, #8]
 80077c4:	2300      	movs	r3, #0
 80077c6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80077ce:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80077d0:	78fb      	ldrb	r3, [r7, #3]
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d82d      	bhi.n	8007832 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80077d6:	78fa      	ldrb	r2, [r7, #3]
 80077d8:	4613      	mov	r3, r2
 80077da:	005b      	lsls	r3, r3, #1
 80077dc:	4413      	add	r3, r2
 80077de:	00db      	lsls	r3, r3, #3
 80077e0:	1a9b      	subs	r3, r3, r2
 80077e2:	4a2c      	ldr	r2, [pc, #176]	@ (8007894 <RTC_WeekDayNum+0xe4>)
 80077e4:	fba2 2303 	umull	r2, r3, r2, r3
 80077e8:	085a      	lsrs	r2, r3, #1
 80077ea:	78bb      	ldrb	r3, [r7, #2]
 80077ec:	441a      	add	r2, r3
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	441a      	add	r2, r3
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	089b      	lsrs	r3, r3, #2
 80077f8:	441a      	add	r2, r3
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	4926      	ldr	r1, [pc, #152]	@ (8007898 <RTC_WeekDayNum+0xe8>)
 8007800:	fba1 1303 	umull	r1, r3, r1, r3
 8007804:	095b      	lsrs	r3, r3, #5
 8007806:	1ad2      	subs	r2, r2, r3
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	3b01      	subs	r3, #1
 800780c:	4922      	ldr	r1, [pc, #136]	@ (8007898 <RTC_WeekDayNum+0xe8>)
 800780e:	fba1 1303 	umull	r1, r3, r1, r3
 8007812:	09db      	lsrs	r3, r3, #7
 8007814:	4413      	add	r3, r2
 8007816:	1d1a      	adds	r2, r3, #4
 8007818:	4b20      	ldr	r3, [pc, #128]	@ (800789c <RTC_WeekDayNum+0xec>)
 800781a:	fba3 1302 	umull	r1, r3, r3, r2
 800781e:	1ad1      	subs	r1, r2, r3
 8007820:	0849      	lsrs	r1, r1, #1
 8007822:	440b      	add	r3, r1
 8007824:	0899      	lsrs	r1, r3, #2
 8007826:	460b      	mov	r3, r1
 8007828:	00db      	lsls	r3, r3, #3
 800782a:	1a5b      	subs	r3, r3, r1
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	60fb      	str	r3, [r7, #12]
 8007830:	e029      	b.n	8007886 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8007832:	78fa      	ldrb	r2, [r7, #3]
 8007834:	4613      	mov	r3, r2
 8007836:	005b      	lsls	r3, r3, #1
 8007838:	4413      	add	r3, r2
 800783a:	00db      	lsls	r3, r3, #3
 800783c:	1a9b      	subs	r3, r3, r2
 800783e:	4a15      	ldr	r2, [pc, #84]	@ (8007894 <RTC_WeekDayNum+0xe4>)
 8007840:	fba2 2303 	umull	r2, r3, r2, r3
 8007844:	085a      	lsrs	r2, r3, #1
 8007846:	78bb      	ldrb	r3, [r7, #2]
 8007848:	441a      	add	r2, r3
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	441a      	add	r2, r3
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	089b      	lsrs	r3, r3, #2
 8007852:	441a      	add	r2, r3
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	4910      	ldr	r1, [pc, #64]	@ (8007898 <RTC_WeekDayNum+0xe8>)
 8007858:	fba1 1303 	umull	r1, r3, r1, r3
 800785c:	095b      	lsrs	r3, r3, #5
 800785e:	1ad2      	subs	r2, r2, r3
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	490d      	ldr	r1, [pc, #52]	@ (8007898 <RTC_WeekDayNum+0xe8>)
 8007864:	fba1 1303 	umull	r1, r3, r1, r3
 8007868:	09db      	lsrs	r3, r3, #7
 800786a:	4413      	add	r3, r2
 800786c:	1c9a      	adds	r2, r3, #2
 800786e:	4b0b      	ldr	r3, [pc, #44]	@ (800789c <RTC_WeekDayNum+0xec>)
 8007870:	fba3 1302 	umull	r1, r3, r3, r2
 8007874:	1ad1      	subs	r1, r2, r3
 8007876:	0849      	lsrs	r1, r1, #1
 8007878:	440b      	add	r3, r1
 800787a:	0899      	lsrs	r1, r3, #2
 800787c:	460b      	mov	r3, r1
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	1a5b      	subs	r3, r3, r1
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	b2db      	uxtb	r3, r3
}
 800788a:	4618      	mov	r0, r3
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	bc80      	pop	{r7}
 8007892:	4770      	bx	lr
 8007894:	38e38e39 	.word	0x38e38e39
 8007898:	51eb851f 	.word	0x51eb851f
 800789c:	24924925 	.word	0x24924925

080078a0 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d027      	beq.n	8007906 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d020      	beq.n	8007906 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f003 0304 	and.w	r3, r3, #4
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00b      	beq.n	80078ea <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f824 	bl	8007920 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f06f 0204 	mvn.w	r2, #4
 80078e0:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2204      	movs	r2, #4
 80078e6:	745a      	strb	r2, [r3, #17]
 80078e8:	e005      	b.n	80078f6 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f80f 	bl	800790e <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 0201 	bic.w	r2, r2, #1
 8007904:	605a      	str	r2, [r3, #4]
    }
  }
}
 8007906:	bf00      	nop
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 800790e:	b480      	push	{r7}
 8007910:	b083      	sub	sp, #12
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8007916:	bf00      	nop
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	bc80      	pop	{r7}
 800791e:	4770      	bx	lr

08007920 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	bc80      	pop	{r7}
 8007930:	4770      	bx	lr

08007932 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b082      	sub	sp, #8
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e076      	b.n	8007a32 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007948:	2b00      	cmp	r3, #0
 800794a:	d108      	bne.n	800795e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007954:	d009      	beq.n	800796a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	61da      	str	r2, [r3, #28]
 800795c:	e005      	b.n	800796a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	d106      	bne.n	800798a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7fa f9b9 	bl	8001cfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2202      	movs	r2, #2
 800798e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079a0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80079b2:	431a      	orrs	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079bc:	431a      	orrs	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	f003 0302 	and.w	r3, r3, #2
 80079c6:	431a      	orrs	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	431a      	orrs	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079da:	431a      	orrs	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079e4:	431a      	orrs	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079ee:	ea42 0103 	orr.w	r1, r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	0c1a      	lsrs	r2, r3, #16
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f002 0204 	and.w	r2, r2, #4
 8007a10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	69da      	ldr	r2, [r3, #28]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b082      	sub	sp, #8
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d101      	bne.n	8007a4c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e041      	b.n	8007ad0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d106      	bne.n	8007a66 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7fa fd3f 	bl	80024e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2202      	movs	r2, #2
 8007a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	3304      	adds	r3, #4
 8007a76:	4619      	mov	r1, r3
 8007a78:	4610      	mov	r0, r2
 8007a7a:	f000 ffc7 	bl	8008a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d001      	beq.n	8007af0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e03c      	b.n	8007b6a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2202      	movs	r2, #2
 8007af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a1d      	ldr	r2, [pc, #116]	@ (8007b74 <HAL_TIM_Base_Start+0x9c>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d018      	beq.n	8007b34 <HAL_TIM_Base_Start+0x5c>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a1c      	ldr	r2, [pc, #112]	@ (8007b78 <HAL_TIM_Base_Start+0xa0>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d013      	beq.n	8007b34 <HAL_TIM_Base_Start+0x5c>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b14:	d00e      	beq.n	8007b34 <HAL_TIM_Base_Start+0x5c>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a18      	ldr	r2, [pc, #96]	@ (8007b7c <HAL_TIM_Base_Start+0xa4>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d009      	beq.n	8007b34 <HAL_TIM_Base_Start+0x5c>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a16      	ldr	r2, [pc, #88]	@ (8007b80 <HAL_TIM_Base_Start+0xa8>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d004      	beq.n	8007b34 <HAL_TIM_Base_Start+0x5c>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a15      	ldr	r2, [pc, #84]	@ (8007b84 <HAL_TIM_Base_Start+0xac>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d111      	bne.n	8007b58 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f003 0307 	and.w	r3, r3, #7
 8007b3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2b06      	cmp	r3, #6
 8007b44:	d010      	beq.n	8007b68 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f042 0201 	orr.w	r2, r2, #1
 8007b54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b56:	e007      	b.n	8007b68 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f042 0201 	orr.w	r2, r2, #1
 8007b66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bc80      	pop	{r7}
 8007b72:	4770      	bx	lr
 8007b74:	40012c00 	.word	0x40012c00
 8007b78:	40013400 	.word	0x40013400
 8007b7c:	40000400 	.word	0x40000400
 8007b80:	40000800 	.word	0x40000800
 8007b84:	40000c00 	.word	0x40000c00

08007b88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e041      	b.n	8007c1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d106      	bne.n	8007bb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f839 	bl	8007c26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4610      	mov	r0, r2
 8007bc8:	f000 ff20 	bl	8008a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c2e:	bf00      	nop
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bc80      	pop	{r7}
 8007c36:	4770      	bx	lr

08007c38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d109      	bne.n	8007c5c <HAL_TIM_PWM_Start+0x24>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	bf14      	ite	ne
 8007c54:	2301      	movne	r3, #1
 8007c56:	2300      	moveq	r3, #0
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	e022      	b.n	8007ca2 <HAL_TIM_PWM_Start+0x6a>
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	2b04      	cmp	r3, #4
 8007c60:	d109      	bne.n	8007c76 <HAL_TIM_PWM_Start+0x3e>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	bf14      	ite	ne
 8007c6e:	2301      	movne	r3, #1
 8007c70:	2300      	moveq	r3, #0
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	e015      	b.n	8007ca2 <HAL_TIM_PWM_Start+0x6a>
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	2b08      	cmp	r3, #8
 8007c7a:	d109      	bne.n	8007c90 <HAL_TIM_PWM_Start+0x58>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	bf14      	ite	ne
 8007c88:	2301      	movne	r3, #1
 8007c8a:	2300      	moveq	r3, #0
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	e008      	b.n	8007ca2 <HAL_TIM_PWM_Start+0x6a>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	bf14      	ite	ne
 8007c9c:	2301      	movne	r3, #1
 8007c9e:	2300      	moveq	r3, #0
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d001      	beq.n	8007caa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e072      	b.n	8007d90 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d104      	bne.n	8007cba <HAL_TIM_PWM_Start+0x82>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cb8:	e013      	b.n	8007ce2 <HAL_TIM_PWM_Start+0xaa>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b04      	cmp	r3, #4
 8007cbe:	d104      	bne.n	8007cca <HAL_TIM_PWM_Start+0x92>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cc8:	e00b      	b.n	8007ce2 <HAL_TIM_PWM_Start+0xaa>
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2b08      	cmp	r3, #8
 8007cce:	d104      	bne.n	8007cda <HAL_TIM_PWM_Start+0xa2>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cd8:	e003      	b.n	8007ce2 <HAL_TIM_PWM_Start+0xaa>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2202      	movs	r2, #2
 8007cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f001 fa63 	bl	80091b6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a28      	ldr	r2, [pc, #160]	@ (8007d98 <HAL_TIM_PWM_Start+0x160>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d004      	beq.n	8007d04 <HAL_TIM_PWM_Start+0xcc>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a27      	ldr	r2, [pc, #156]	@ (8007d9c <HAL_TIM_PWM_Start+0x164>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d101      	bne.n	8007d08 <HAL_TIM_PWM_Start+0xd0>
 8007d04:	2301      	movs	r3, #1
 8007d06:	e000      	b.n	8007d0a <HAL_TIM_PWM_Start+0xd2>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d007      	beq.n	8007d1e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a1d      	ldr	r2, [pc, #116]	@ (8007d98 <HAL_TIM_PWM_Start+0x160>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d018      	beq.n	8007d5a <HAL_TIM_PWM_Start+0x122>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8007d9c <HAL_TIM_PWM_Start+0x164>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d013      	beq.n	8007d5a <HAL_TIM_PWM_Start+0x122>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d3a:	d00e      	beq.n	8007d5a <HAL_TIM_PWM_Start+0x122>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a17      	ldr	r2, [pc, #92]	@ (8007da0 <HAL_TIM_PWM_Start+0x168>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d009      	beq.n	8007d5a <HAL_TIM_PWM_Start+0x122>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a16      	ldr	r2, [pc, #88]	@ (8007da4 <HAL_TIM_PWM_Start+0x16c>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d004      	beq.n	8007d5a <HAL_TIM_PWM_Start+0x122>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a14      	ldr	r2, [pc, #80]	@ (8007da8 <HAL_TIM_PWM_Start+0x170>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d111      	bne.n	8007d7e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f003 0307 	and.w	r3, r3, #7
 8007d64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2b06      	cmp	r3, #6
 8007d6a:	d010      	beq.n	8007d8e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f042 0201 	orr.w	r2, r2, #1
 8007d7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d7c:	e007      	b.n	8007d8e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f042 0201 	orr.w	r2, r2, #1
 8007d8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	40012c00 	.word	0x40012c00
 8007d9c:	40013400 	.word	0x40013400
 8007da0:	40000400 	.word	0x40000400
 8007da4:	40000800 	.word	0x40000800
 8007da8:	40000c00 	.word	0x40000c00

08007dac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e041      	b.n	8007e42 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d106      	bne.n	8007dd8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f839 	bl	8007e4a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	3304      	adds	r3, #4
 8007de8:	4619      	mov	r1, r3
 8007dea:	4610      	mov	r0, r2
 8007dec:	f000 fe0e 	bl	8008a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007e52:	bf00      	nop
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bc80      	pop	{r7}
 8007e5a:	4770      	bx	lr

08007e5c <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
 8007e68:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d104      	bne.n	8007e7e <HAL_TIM_IC_Start_DMA+0x22>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	e013      	b.n	8007ea6 <HAL_TIM_IC_Start_DMA+0x4a>
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2b04      	cmp	r3, #4
 8007e82:	d104      	bne.n	8007e8e <HAL_TIM_IC_Start_DMA+0x32>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	e00b      	b.n	8007ea6 <HAL_TIM_IC_Start_DMA+0x4a>
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2b08      	cmp	r3, #8
 8007e92:	d104      	bne.n	8007e9e <HAL_TIM_IC_Start_DMA+0x42>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	e003      	b.n	8007ea6 <HAL_TIM_IC_Start_DMA+0x4a>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d104      	bne.n	8007eb8 <HAL_TIM_IC_Start_DMA+0x5c>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	e013      	b.n	8007ee0 <HAL_TIM_IC_Start_DMA+0x84>
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	d104      	bne.n	8007ec8 <HAL_TIM_IC_Start_DMA+0x6c>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	e00b      	b.n	8007ee0 <HAL_TIM_IC_Start_DMA+0x84>
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2b08      	cmp	r3, #8
 8007ecc:	d104      	bne.n	8007ed8 <HAL_TIM_IC_Start_DMA+0x7c>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	e003      	b.n	8007ee0 <HAL_TIM_IC_Start_DMA+0x84>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8007ee2:	7dbb      	ldrb	r3, [r7, #22]
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d002      	beq.n	8007eee <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8007ee8:	7d7b      	ldrb	r3, [r7, #21]
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d101      	bne.n	8007ef2 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8007eee:	2302      	movs	r3, #2
 8007ef0:	e13c      	b.n	800816c <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8007ef2:	7dbb      	ldrb	r3, [r7, #22]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d143      	bne.n	8007f80 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8007ef8:	7d7b      	ldrb	r3, [r7, #21]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d140      	bne.n	8007f80 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) || (Length == 0U))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d002      	beq.n	8007f0a <HAL_TIM_IC_Start_DMA+0xae>
 8007f04:	887b      	ldrh	r3, [r7, #2]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d101      	bne.n	8007f0e <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e12e      	b.n	800816c <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d104      	bne.n	8007f1e <HAL_TIM_IC_Start_DMA+0xc2>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2202      	movs	r2, #2
 8007f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f1c:	e013      	b.n	8007f46 <HAL_TIM_IC_Start_DMA+0xea>
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	2b04      	cmp	r3, #4
 8007f22:	d104      	bne.n	8007f2e <HAL_TIM_IC_Start_DMA+0xd2>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2202      	movs	r2, #2
 8007f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f2c:	e00b      	b.n	8007f46 <HAL_TIM_IC_Start_DMA+0xea>
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2b08      	cmp	r3, #8
 8007f32:	d104      	bne.n	8007f3e <HAL_TIM_IC_Start_DMA+0xe2>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2202      	movs	r2, #2
 8007f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f3c:	e003      	b.n	8007f46 <HAL_TIM_IC_Start_DMA+0xea>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2202      	movs	r2, #2
 8007f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d104      	bne.n	8007f56 <HAL_TIM_IC_Start_DMA+0xfa>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    if ((pData == NULL) || (Length == 0U))
 8007f54:	e016      	b.n	8007f84 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2b04      	cmp	r3, #4
 8007f5a:	d104      	bne.n	8007f66 <HAL_TIM_IC_Start_DMA+0x10a>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    if ((pData == NULL) || (Length == 0U))
 8007f64:	e00e      	b.n	8007f84 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	2b08      	cmp	r3, #8
 8007f6a:	d104      	bne.n	8007f76 <HAL_TIM_IC_Start_DMA+0x11a>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2202      	movs	r2, #2
 8007f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    if ((pData == NULL) || (Length == 0U))
 8007f74:	e006      	b.n	8007f84 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2202      	movs	r2, #2
 8007f7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    if ((pData == NULL) || (Length == 0U))
 8007f7e:	e001      	b.n	8007f84 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e0f3      	b.n	800816c <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	68b9      	ldr	r1, [r7, #8]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f001 f912 	bl	80091b6 <TIM_CCxChannelCmd>

  switch (Channel)
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b0c      	cmp	r3, #12
 8007f96:	f200 80ad 	bhi.w	80080f4 <HAL_TIM_IC_Start_DMA+0x298>
 8007f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa0 <HAL_TIM_IC_Start_DMA+0x144>)
 8007f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa0:	08007fd5 	.word	0x08007fd5
 8007fa4:	080080f5 	.word	0x080080f5
 8007fa8:	080080f5 	.word	0x080080f5
 8007fac:	080080f5 	.word	0x080080f5
 8007fb0:	0800801d 	.word	0x0800801d
 8007fb4:	080080f5 	.word	0x080080f5
 8007fb8:	080080f5 	.word	0x080080f5
 8007fbc:	080080f5 	.word	0x080080f5
 8007fc0:	08008065 	.word	0x08008065
 8007fc4:	080080f5 	.word	0x080080f5
 8007fc8:	080080f5 	.word	0x080080f5
 8007fcc:	080080f5 	.word	0x080080f5
 8007fd0:	080080ad 	.word	0x080080ad
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd8:	4a66      	ldr	r2, [pc, #408]	@ (8008174 <HAL_TIM_IC_Start_DMA+0x318>)
 8007fda:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe0:	4a65      	ldr	r2, [pc, #404]	@ (8008178 <HAL_TIM_IC_Start_DMA+0x31c>)
 8007fe2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe8:	4a64      	ldr	r2, [pc, #400]	@ (800817c <HAL_TIM_IC_Start_DMA+0x320>)
 8007fea:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3334      	adds	r3, #52	@ 0x34
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	887b      	ldrh	r3, [r7, #2]
 8007ffc:	f7fb fe1e 	bl	8003c3c <HAL_DMA_Start_IT>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e0b0      	b.n	800816c <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68da      	ldr	r2, [r3, #12]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008018:	60da      	str	r2, [r3, #12]
      break;
 800801a:	e06e      	b.n	80080fa <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008020:	4a54      	ldr	r2, [pc, #336]	@ (8008174 <HAL_TIM_IC_Start_DMA+0x318>)
 8008022:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008028:	4a53      	ldr	r2, [pc, #332]	@ (8008178 <HAL_TIM_IC_Start_DMA+0x31c>)
 800802a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008030:	4a52      	ldr	r2, [pc, #328]	@ (800817c <HAL_TIM_IC_Start_DMA+0x320>)
 8008032:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	3338      	adds	r3, #56	@ 0x38
 800803e:	4619      	mov	r1, r3
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	887b      	ldrh	r3, [r7, #2]
 8008044:	f7fb fdfa 	bl	8003c3c <HAL_DMA_Start_IT>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e08c      	b.n	800816c <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68da      	ldr	r2, [r3, #12]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008060:	60da      	str	r2, [r3, #12]
      break;
 8008062:	e04a      	b.n	80080fa <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008068:	4a42      	ldr	r2, [pc, #264]	@ (8008174 <HAL_TIM_IC_Start_DMA+0x318>)
 800806a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008070:	4a41      	ldr	r2, [pc, #260]	@ (8008178 <HAL_TIM_IC_Start_DMA+0x31c>)
 8008072:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008078:	4a40      	ldr	r2, [pc, #256]	@ (800817c <HAL_TIM_IC_Start_DMA+0x320>)
 800807a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	333c      	adds	r3, #60	@ 0x3c
 8008086:	4619      	mov	r1, r3
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	887b      	ldrh	r3, [r7, #2]
 800808c:	f7fb fdd6 	bl	8003c3c <HAL_DMA_Start_IT>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e068      	b.n	800816c <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68da      	ldr	r2, [r3, #12]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080a8:	60da      	str	r2, [r3, #12]
      break;
 80080aa:	e026      	b.n	80080fa <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080b0:	4a30      	ldr	r2, [pc, #192]	@ (8008174 <HAL_TIM_IC_Start_DMA+0x318>)
 80080b2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080b8:	4a2f      	ldr	r2, [pc, #188]	@ (8008178 <HAL_TIM_IC_Start_DMA+0x31c>)
 80080ba:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080c0:	4a2e      	ldr	r2, [pc, #184]	@ (800817c <HAL_TIM_IC_Start_DMA+0x320>)
 80080c2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	3340      	adds	r3, #64	@ 0x40
 80080ce:	4619      	mov	r1, r3
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	887b      	ldrh	r3, [r7, #2]
 80080d4:	f7fb fdb2 	bl	8003c3c <HAL_DMA_Start_IT>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e044      	b.n	800816c <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68da      	ldr	r2, [r3, #12]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80080f0:	60da      	str	r2, [r3, #12]
      break;
 80080f2:	e002      	b.n	80080fa <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	75fb      	strb	r3, [r7, #23]
      break;
 80080f8:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a20      	ldr	r2, [pc, #128]	@ (8008180 <HAL_TIM_IC_Start_DMA+0x324>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d018      	beq.n	8008136 <HAL_TIM_IC_Start_DMA+0x2da>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a1e      	ldr	r2, [pc, #120]	@ (8008184 <HAL_TIM_IC_Start_DMA+0x328>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d013      	beq.n	8008136 <HAL_TIM_IC_Start_DMA+0x2da>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008116:	d00e      	beq.n	8008136 <HAL_TIM_IC_Start_DMA+0x2da>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a1a      	ldr	r2, [pc, #104]	@ (8008188 <HAL_TIM_IC_Start_DMA+0x32c>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d009      	beq.n	8008136 <HAL_TIM_IC_Start_DMA+0x2da>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a19      	ldr	r2, [pc, #100]	@ (800818c <HAL_TIM_IC_Start_DMA+0x330>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d004      	beq.n	8008136 <HAL_TIM_IC_Start_DMA+0x2da>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a17      	ldr	r2, [pc, #92]	@ (8008190 <HAL_TIM_IC_Start_DMA+0x334>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d111      	bne.n	800815a <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f003 0307 	and.w	r3, r3, #7
 8008140:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	2b06      	cmp	r3, #6
 8008146:	d010      	beq.n	800816a <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f042 0201 	orr.w	r2, r2, #1
 8008156:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008158:	e007      	b.n	800816a <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f042 0201 	orr.w	r2, r2, #1
 8008168:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800816a:	7dfb      	ldrb	r3, [r7, #23]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3718      	adds	r7, #24
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	080088db 	.word	0x080088db
 8008178:	080089a3 	.word	0x080089a3
 800817c:	08008849 	.word	0x08008849
 8008180:	40012c00 	.word	0x40012c00
 8008184:	40013400 	.word	0x40013400
 8008188:	40000400 	.word	0x40000400
 800818c:	40000800 	.word	0x40000800
 8008190:	40000c00 	.word	0x40000c00

08008194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	f003 0302 	and.w	r3, r3, #2
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d122      	bne.n	80081f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	f003 0302 	and.w	r3, r3, #2
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d11b      	bne.n	80081f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f06f 0202 	mvn.w	r2, #2
 80081c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	f003 0303 	and.w	r3, r3, #3
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d003      	beq.n	80081de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7fa fac5 	bl	8002766 <HAL_TIM_IC_CaptureCallback>
 80081dc:	e005      	b.n	80081ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fb05 	bl	80087ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fb14 	bl	8008812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	f003 0304 	and.w	r3, r3, #4
 80081fa:	2b04      	cmp	r3, #4
 80081fc:	d122      	bne.n	8008244 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f003 0304 	and.w	r3, r3, #4
 8008208:	2b04      	cmp	r3, #4
 800820a:	d11b      	bne.n	8008244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f06f 0204 	mvn.w	r2, #4
 8008214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2202      	movs	r2, #2
 800821a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7fa fa9b 	bl	8002766 <HAL_TIM_IC_CaptureCallback>
 8008230:	e005      	b.n	800823e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fadb 	bl	80087ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 faea 	bl	8008812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	f003 0308 	and.w	r3, r3, #8
 800824e:	2b08      	cmp	r3, #8
 8008250:	d122      	bne.n	8008298 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	f003 0308 	and.w	r3, r3, #8
 800825c:	2b08      	cmp	r3, #8
 800825e:	d11b      	bne.n	8008298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f06f 0208 	mvn.w	r2, #8
 8008268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2204      	movs	r2, #4
 800826e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	f003 0303 	and.w	r3, r3, #3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d003      	beq.n	8008286 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f7fa fa71 	bl	8002766 <HAL_TIM_IC_CaptureCallback>
 8008284:	e005      	b.n	8008292 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fab1 	bl	80087ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fac0 	bl	8008812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	f003 0310 	and.w	r3, r3, #16
 80082a2:	2b10      	cmp	r3, #16
 80082a4:	d122      	bne.n	80082ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	f003 0310 	and.w	r3, r3, #16
 80082b0:	2b10      	cmp	r3, #16
 80082b2:	d11b      	bne.n	80082ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f06f 0210 	mvn.w	r2, #16
 80082bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2208      	movs	r2, #8
 80082c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	69db      	ldr	r3, [r3, #28]
 80082ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7fa fa47 	bl	8002766 <HAL_TIM_IC_CaptureCallback>
 80082d8:	e005      	b.n	80082e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fa87 	bl	80087ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fa96 	bl	8008812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d10e      	bne.n	8008318 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	f003 0301 	and.w	r3, r3, #1
 8008304:	2b01      	cmp	r3, #1
 8008306:	d107      	bne.n	8008318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f06f 0201 	mvn.w	r2, #1
 8008310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7fa fa1e 	bl	8002754 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008322:	2b80      	cmp	r3, #128	@ 0x80
 8008324:	d10e      	bne.n	8008344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008330:	2b80      	cmp	r3, #128	@ 0x80
 8008332:	d107      	bne.n	8008344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800833c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 ffd3 	bl	80092ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800834e:	2b40      	cmp	r3, #64	@ 0x40
 8008350:	d10e      	bne.n	8008370 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800835c:	2b40      	cmp	r3, #64	@ 0x40
 800835e:	d107      	bne.n	8008370 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fa5a 	bl	8008824 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	f003 0320 	and.w	r3, r3, #32
 800837a:	2b20      	cmp	r3, #32
 800837c:	d10e      	bne.n	800839c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	f003 0320 	and.w	r3, r3, #32
 8008388:	2b20      	cmp	r3, #32
 800838a:	d107      	bne.n	800839c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f06f 0220 	mvn.w	r2, #32
 8008394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 ff9e 	bl	80092d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800839c:	bf00      	nop
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b086      	sub	sp, #24
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d101      	bne.n	80083c2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80083be:	2302      	movs	r3, #2
 80083c0:	e088      	b.n	80084d4 <HAL_TIM_IC_ConfigChannel+0x130>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d11b      	bne.n	8008408 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80083e0:	f000 fd3a 	bl	8008e58 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	699a      	ldr	r2, [r3, #24]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f022 020c 	bic.w	r2, r2, #12
 80083f2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6999      	ldr	r1, [r3, #24]
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	689a      	ldr	r2, [r3, #8]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	430a      	orrs	r2, r1
 8008404:	619a      	str	r2, [r3, #24]
 8008406:	e060      	b.n	80084ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b04      	cmp	r3, #4
 800840c:	d11c      	bne.n	8008448 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800841e:	f000 fdaf 	bl	8008f80 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	699a      	ldr	r2, [r3, #24]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008430:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	6999      	ldr	r1, [r3, #24]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	021a      	lsls	r2, r3, #8
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	430a      	orrs	r2, r1
 8008444:	619a      	str	r2, [r3, #24]
 8008446:	e040      	b.n	80084ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b08      	cmp	r3, #8
 800844c:	d11b      	bne.n	8008486 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800845e:	f000 fdfa 	bl	8009056 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	69da      	ldr	r2, [r3, #28]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f022 020c 	bic.w	r2, r2, #12
 8008470:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69d9      	ldr	r1, [r3, #28]
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	689a      	ldr	r2, [r3, #8]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	430a      	orrs	r2, r1
 8008482:	61da      	str	r2, [r3, #28]
 8008484:	e021      	b.n	80084ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2b0c      	cmp	r3, #12
 800848a:	d11c      	bne.n	80084c6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800849c:	f000 fe16 	bl	80090cc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	69da      	ldr	r2, [r3, #28]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80084ae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	69d9      	ldr	r1, [r3, #28]
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	021a      	lsls	r2, r3, #8
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	430a      	orrs	r2, r1
 80084c2:	61da      	str	r2, [r3, #28]
 80084c4:	e001      	b.n	80084ca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3718      	adds	r7, #24
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b086      	sub	sp, #24
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d101      	bne.n	80084fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80084f6:	2302      	movs	r3, #2
 80084f8:	e0ae      	b.n	8008658 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2b0c      	cmp	r3, #12
 8008506:	f200 809f 	bhi.w	8008648 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800850a:	a201      	add	r2, pc, #4	@ (adr r2, 8008510 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800850c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008510:	08008545 	.word	0x08008545
 8008514:	08008649 	.word	0x08008649
 8008518:	08008649 	.word	0x08008649
 800851c:	08008649 	.word	0x08008649
 8008520:	08008585 	.word	0x08008585
 8008524:	08008649 	.word	0x08008649
 8008528:	08008649 	.word	0x08008649
 800852c:	08008649 	.word	0x08008649
 8008530:	080085c7 	.word	0x080085c7
 8008534:	08008649 	.word	0x08008649
 8008538:	08008649 	.word	0x08008649
 800853c:	08008649 	.word	0x08008649
 8008540:	08008607 	.word	0x08008607
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68b9      	ldr	r1, [r7, #8]
 800854a:	4618      	mov	r0, r3
 800854c:	f000 fad8 	bl	8008b00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	699a      	ldr	r2, [r3, #24]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f042 0208 	orr.w	r2, r2, #8
 800855e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	699a      	ldr	r2, [r3, #24]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f022 0204 	bic.w	r2, r2, #4
 800856e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6999      	ldr	r1, [r3, #24]
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	691a      	ldr	r2, [r3, #16]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	430a      	orrs	r2, r1
 8008580:	619a      	str	r2, [r3, #24]
      break;
 8008582:	e064      	b.n	800864e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	4618      	mov	r0, r3
 800858c:	f000 fb28 	bl	8008be0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	699a      	ldr	r2, [r3, #24]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800859e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	699a      	ldr	r2, [r3, #24]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6999      	ldr	r1, [r3, #24]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	021a      	lsls	r2, r3, #8
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	430a      	orrs	r2, r1
 80085c2:	619a      	str	r2, [r3, #24]
      break;
 80085c4:	e043      	b.n	800864e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68b9      	ldr	r1, [r7, #8]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f000 fb7b 	bl	8008cc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	69da      	ldr	r2, [r3, #28]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f042 0208 	orr.w	r2, r2, #8
 80085e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	69da      	ldr	r2, [r3, #28]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f022 0204 	bic.w	r2, r2, #4
 80085f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	69d9      	ldr	r1, [r3, #28]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	691a      	ldr	r2, [r3, #16]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	430a      	orrs	r2, r1
 8008602:	61da      	str	r2, [r3, #28]
      break;
 8008604:	e023      	b.n	800864e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68b9      	ldr	r1, [r7, #8]
 800860c:	4618      	mov	r0, r3
 800860e:	f000 fbcf 	bl	8008db0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	69da      	ldr	r2, [r3, #28]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	69da      	ldr	r2, [r3, #28]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	69d9      	ldr	r1, [r3, #28]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	021a      	lsls	r2, r3, #8
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	430a      	orrs	r2, r1
 8008644:	61da      	str	r2, [r3, #28]
      break;
 8008646:	e002      	b.n	800864e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	75fb      	strb	r3, [r7, #23]
      break;
 800864c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008656:	7dfb      	ldrb	r3, [r7, #23]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3718      	adds	r7, #24
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008674:	2b01      	cmp	r3, #1
 8008676:	d101      	bne.n	800867c <HAL_TIM_ConfigClockSource+0x1c>
 8008678:	2302      	movs	r3, #2
 800867a:	e0b4      	b.n	80087e6 <HAL_TIM_ConfigClockSource+0x186>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2202      	movs	r2, #2
 8008688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800869a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086b4:	d03e      	beq.n	8008734 <HAL_TIM_ConfigClockSource+0xd4>
 80086b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086ba:	f200 8087 	bhi.w	80087cc <HAL_TIM_ConfigClockSource+0x16c>
 80086be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086c2:	f000 8086 	beq.w	80087d2 <HAL_TIM_ConfigClockSource+0x172>
 80086c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086ca:	d87f      	bhi.n	80087cc <HAL_TIM_ConfigClockSource+0x16c>
 80086cc:	2b70      	cmp	r3, #112	@ 0x70
 80086ce:	d01a      	beq.n	8008706 <HAL_TIM_ConfigClockSource+0xa6>
 80086d0:	2b70      	cmp	r3, #112	@ 0x70
 80086d2:	d87b      	bhi.n	80087cc <HAL_TIM_ConfigClockSource+0x16c>
 80086d4:	2b60      	cmp	r3, #96	@ 0x60
 80086d6:	d050      	beq.n	800877a <HAL_TIM_ConfigClockSource+0x11a>
 80086d8:	2b60      	cmp	r3, #96	@ 0x60
 80086da:	d877      	bhi.n	80087cc <HAL_TIM_ConfigClockSource+0x16c>
 80086dc:	2b50      	cmp	r3, #80	@ 0x50
 80086de:	d03c      	beq.n	800875a <HAL_TIM_ConfigClockSource+0xfa>
 80086e0:	2b50      	cmp	r3, #80	@ 0x50
 80086e2:	d873      	bhi.n	80087cc <HAL_TIM_ConfigClockSource+0x16c>
 80086e4:	2b40      	cmp	r3, #64	@ 0x40
 80086e6:	d058      	beq.n	800879a <HAL_TIM_ConfigClockSource+0x13a>
 80086e8:	2b40      	cmp	r3, #64	@ 0x40
 80086ea:	d86f      	bhi.n	80087cc <HAL_TIM_ConfigClockSource+0x16c>
 80086ec:	2b30      	cmp	r3, #48	@ 0x30
 80086ee:	d064      	beq.n	80087ba <HAL_TIM_ConfigClockSource+0x15a>
 80086f0:	2b30      	cmp	r3, #48	@ 0x30
 80086f2:	d86b      	bhi.n	80087cc <HAL_TIM_ConfigClockSource+0x16c>
 80086f4:	2b20      	cmp	r3, #32
 80086f6:	d060      	beq.n	80087ba <HAL_TIM_ConfigClockSource+0x15a>
 80086f8:	2b20      	cmp	r3, #32
 80086fa:	d867      	bhi.n	80087cc <HAL_TIM_ConfigClockSource+0x16c>
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d05c      	beq.n	80087ba <HAL_TIM_ConfigClockSource+0x15a>
 8008700:	2b10      	cmp	r3, #16
 8008702:	d05a      	beq.n	80087ba <HAL_TIM_ConfigClockSource+0x15a>
 8008704:	e062      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008716:	f000 fd2f 	bl	8009178 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008728:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	609a      	str	r2, [r3, #8]
      break;
 8008732:	e04f      	b.n	80087d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008744:	f000 fd18 	bl	8009178 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	689a      	ldr	r2, [r3, #8]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008756:	609a      	str	r2, [r3, #8]
      break;
 8008758:	e03c      	b.n	80087d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008766:	461a      	mov	r2, r3
 8008768:	f000 fbdc 	bl	8008f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2150      	movs	r1, #80	@ 0x50
 8008772:	4618      	mov	r0, r3
 8008774:	f000 fce6 	bl	8009144 <TIM_ITRx_SetConfig>
      break;
 8008778:	e02c      	b.n	80087d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008786:	461a      	mov	r2, r3
 8008788:	f000 fc36 	bl	8008ff8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2160      	movs	r1, #96	@ 0x60
 8008792:	4618      	mov	r0, r3
 8008794:	f000 fcd6 	bl	8009144 <TIM_ITRx_SetConfig>
      break;
 8008798:	e01c      	b.n	80087d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087a6:	461a      	mov	r2, r3
 80087a8:	f000 fbbc 	bl	8008f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2140      	movs	r1, #64	@ 0x40
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 fcc6 	bl	8009144 <TIM_ITRx_SetConfig>
      break;
 80087b8:	e00c      	b.n	80087d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4619      	mov	r1, r3
 80087c4:	4610      	mov	r0, r2
 80087c6:	f000 fcbd 	bl	8009144 <TIM_ITRx_SetConfig>
      break;
 80087ca:	e003      	b.n	80087d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	73fb      	strb	r3, [r7, #15]
      break;
 80087d0:	e000      	b.n	80087d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80087d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b083      	sub	sp, #12
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087f6:	bf00      	nop
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bc80      	pop	{r7}
 80087fe:	4770      	bx	lr

08008800 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	bc80      	pop	{r7}
 8008810:	4770      	bx	lr

08008812 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008812:	b480      	push	{r7}
 8008814:	b083      	sub	sp, #12
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800881a:	bf00      	nop
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	bc80      	pop	{r7}
 8008822:	4770      	bx	lr

08008824 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	bc80      	pop	{r7}
 8008834:	4770      	bx	lr

08008836 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008836:	b480      	push	{r7}
 8008838:	b083      	sub	sp, #12
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800883e:	bf00      	nop
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	bc80      	pop	{r7}
 8008846:	4770      	bx	lr

08008848 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008854:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	429a      	cmp	r2, r3
 800885e:	d107      	bne.n	8008870 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2201      	movs	r2, #1
 8008864:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2201      	movs	r2, #1
 800886a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800886e:	e02a      	b.n	80088c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	429a      	cmp	r2, r3
 8008878:	d107      	bne.n	800888a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2202      	movs	r2, #2
 800887e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008888:	e01d      	b.n	80088c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	429a      	cmp	r2, r3
 8008892:	d107      	bne.n	80088a4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2204      	movs	r2, #4
 8008898:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088a2:	e010      	b.n	80088c6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d107      	bne.n	80088be <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2208      	movs	r2, #8
 80088b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80088bc:	e003      	b.n	80088c6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f7ff ffb5 	bl	8008836 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	771a      	strb	r2, [r3, #28]
}
 80088d2:	bf00      	nop
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088e6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d10f      	bne.n	8008912 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2201      	movs	r2, #1
 80088f6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d146      	bne.n	800898e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008910:	e03d      	b.n	800898e <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	429a      	cmp	r2, r3
 800891a:	d10f      	bne.n	800893c <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2202      	movs	r2, #2
 8008920:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d131      	bne.n	800898e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800893a:	e028      	b.n	800898e <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	429a      	cmp	r2, r3
 8008944:	d10f      	bne.n	8008966 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2204      	movs	r2, #4
 800894a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d11c      	bne.n	800898e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008964:	e013      	b.n	800898e <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	429a      	cmp	r2, r3
 800896e:	d10e      	bne.n	800898e <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2208      	movs	r2, #8
 8008974:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	699b      	ldr	r3, [r3, #24]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d107      	bne.n	800898e <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2201      	movs	r2, #1
 800898a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f7f9 fee9 	bl	8002766 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	771a      	strb	r2, [r3, #28]
}
 800899a:	bf00      	nop
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b084      	sub	sp, #16
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d103      	bne.n	80089c2 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2201      	movs	r2, #1
 80089be:	771a      	strb	r2, [r3, #28]
 80089c0:	e019      	b.n	80089f6 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d103      	bne.n	80089d4 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2202      	movs	r2, #2
 80089d0:	771a      	strb	r2, [r3, #28]
 80089d2:	e010      	b.n	80089f6 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d103      	bne.n	80089e6 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2204      	movs	r2, #4
 80089e2:	771a      	strb	r2, [r3, #28]
 80089e4:	e007      	b.n	80089f6 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d102      	bne.n	80089f6 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2208      	movs	r2, #8
 80089f4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f7ff ff02 	bl	8008800 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	771a      	strb	r2, [r3, #28]
}
 8008a02:	bf00      	nop
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
	...

08008a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a33      	ldr	r2, [pc, #204]	@ (8008aec <TIM_Base_SetConfig+0xe0>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d013      	beq.n	8008a4c <TIM_Base_SetConfig+0x40>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a32      	ldr	r2, [pc, #200]	@ (8008af0 <TIM_Base_SetConfig+0xe4>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d00f      	beq.n	8008a4c <TIM_Base_SetConfig+0x40>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a32:	d00b      	beq.n	8008a4c <TIM_Base_SetConfig+0x40>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a2f      	ldr	r2, [pc, #188]	@ (8008af4 <TIM_Base_SetConfig+0xe8>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d007      	beq.n	8008a4c <TIM_Base_SetConfig+0x40>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a2e      	ldr	r2, [pc, #184]	@ (8008af8 <TIM_Base_SetConfig+0xec>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d003      	beq.n	8008a4c <TIM_Base_SetConfig+0x40>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a2d      	ldr	r2, [pc, #180]	@ (8008afc <TIM_Base_SetConfig+0xf0>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d108      	bne.n	8008a5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a22      	ldr	r2, [pc, #136]	@ (8008aec <TIM_Base_SetConfig+0xe0>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d013      	beq.n	8008a8e <TIM_Base_SetConfig+0x82>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a21      	ldr	r2, [pc, #132]	@ (8008af0 <TIM_Base_SetConfig+0xe4>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d00f      	beq.n	8008a8e <TIM_Base_SetConfig+0x82>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a74:	d00b      	beq.n	8008a8e <TIM_Base_SetConfig+0x82>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a1e      	ldr	r2, [pc, #120]	@ (8008af4 <TIM_Base_SetConfig+0xe8>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d007      	beq.n	8008a8e <TIM_Base_SetConfig+0x82>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a1d      	ldr	r2, [pc, #116]	@ (8008af8 <TIM_Base_SetConfig+0xec>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d003      	beq.n	8008a8e <TIM_Base_SetConfig+0x82>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a1c      	ldr	r2, [pc, #112]	@ (8008afc <TIM_Base_SetConfig+0xf0>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d108      	bne.n	8008aa0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	689a      	ldr	r2, [r3, #8]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a09      	ldr	r2, [pc, #36]	@ (8008aec <TIM_Base_SetConfig+0xe0>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d003      	beq.n	8008ad4 <TIM_Base_SetConfig+0xc8>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a08      	ldr	r2, [pc, #32]	@ (8008af0 <TIM_Base_SetConfig+0xe4>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d103      	bne.n	8008adc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	691a      	ldr	r2, [r3, #16]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	615a      	str	r2, [r3, #20]
}
 8008ae2:	bf00      	nop
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bc80      	pop	{r7}
 8008aea:	4770      	bx	lr
 8008aec:	40012c00 	.word	0x40012c00
 8008af0:	40013400 	.word	0x40013400
 8008af4:	40000400 	.word	0x40000400
 8008af8:	40000800 	.word	0x40000800
 8008afc:	40000c00 	.word	0x40000c00

08008b00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a1b      	ldr	r3, [r3, #32]
 8008b14:	f023 0201 	bic.w	r2, r3, #1
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f023 0303 	bic.w	r3, r3, #3
 8008b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f023 0302 	bic.w	r3, r3, #2
 8008b48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a20      	ldr	r2, [pc, #128]	@ (8008bd8 <TIM_OC1_SetConfig+0xd8>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d003      	beq.n	8008b64 <TIM_OC1_SetConfig+0x64>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8008bdc <TIM_OC1_SetConfig+0xdc>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d10c      	bne.n	8008b7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	f023 0308 	bic.w	r3, r3, #8
 8008b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f023 0304 	bic.w	r3, r3, #4
 8008b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a15      	ldr	r2, [pc, #84]	@ (8008bd8 <TIM_OC1_SetConfig+0xd8>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d003      	beq.n	8008b8e <TIM_OC1_SetConfig+0x8e>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a14      	ldr	r2, [pc, #80]	@ (8008bdc <TIM_OC1_SetConfig+0xdc>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d111      	bne.n	8008bb2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	693a      	ldr	r2, [r7, #16]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	699b      	ldr	r3, [r3, #24]
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	693a      	ldr	r2, [r7, #16]
 8008bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	685a      	ldr	r2, [r3, #4]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	697a      	ldr	r2, [r7, #20]
 8008bca:	621a      	str	r2, [r3, #32]
}
 8008bcc:	bf00      	nop
 8008bce:	371c      	adds	r7, #28
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bc80      	pop	{r7}
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	40012c00 	.word	0x40012c00
 8008bdc:	40013400 	.word	0x40013400

08008be0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b087      	sub	sp, #28
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a1b      	ldr	r3, [r3, #32]
 8008bee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a1b      	ldr	r3, [r3, #32]
 8008bf4:	f023 0210 	bic.w	r2, r3, #16
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	021b      	lsls	r3, r3, #8
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	f023 0320 	bic.w	r3, r3, #32
 8008c2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	011b      	lsls	r3, r3, #4
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a21      	ldr	r2, [pc, #132]	@ (8008cc0 <TIM_OC2_SetConfig+0xe0>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d003      	beq.n	8008c48 <TIM_OC2_SetConfig+0x68>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a20      	ldr	r2, [pc, #128]	@ (8008cc4 <TIM_OC2_SetConfig+0xe4>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d10d      	bne.n	8008c64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	011b      	lsls	r3, r3, #4
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a16      	ldr	r2, [pc, #88]	@ (8008cc0 <TIM_OC2_SetConfig+0xe0>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d003      	beq.n	8008c74 <TIM_OC2_SetConfig+0x94>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a15      	ldr	r2, [pc, #84]	@ (8008cc4 <TIM_OC2_SetConfig+0xe4>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d113      	bne.n	8008c9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	693a      	ldr	r2, [r7, #16]
 8008ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	685a      	ldr	r2, [r3, #4]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	697a      	ldr	r2, [r7, #20]
 8008cb4:	621a      	str	r2, [r3, #32]
}
 8008cb6:	bf00      	nop
 8008cb8:	371c      	adds	r7, #28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bc80      	pop	{r7}
 8008cbe:	4770      	bx	lr
 8008cc0:	40012c00 	.word	0x40012c00
 8008cc4:	40013400 	.word	0x40013400

08008cc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b087      	sub	sp, #28
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a1b      	ldr	r3, [r3, #32]
 8008cdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	69db      	ldr	r3, [r3, #28]
 8008cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f023 0303 	bic.w	r3, r3, #3
 8008cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	021b      	lsls	r3, r3, #8
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a21      	ldr	r2, [pc, #132]	@ (8008da8 <TIM_OC3_SetConfig+0xe0>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d003      	beq.n	8008d2e <TIM_OC3_SetConfig+0x66>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a20      	ldr	r2, [pc, #128]	@ (8008dac <TIM_OC3_SetConfig+0xe4>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d10d      	bne.n	8008d4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	021b      	lsls	r3, r3, #8
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a16      	ldr	r2, [pc, #88]	@ (8008da8 <TIM_OC3_SetConfig+0xe0>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d003      	beq.n	8008d5a <TIM_OC3_SetConfig+0x92>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a15      	ldr	r2, [pc, #84]	@ (8008dac <TIM_OC3_SetConfig+0xe4>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d113      	bne.n	8008d82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	011b      	lsls	r3, r3, #4
 8008d70:	693a      	ldr	r2, [r7, #16]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	011b      	lsls	r3, r3, #4
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	693a      	ldr	r2, [r7, #16]
 8008d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	685a      	ldr	r2, [r3, #4]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	621a      	str	r2, [r3, #32]
}
 8008d9c:	bf00      	nop
 8008d9e:	371c      	adds	r7, #28
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bc80      	pop	{r7}
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	40012c00 	.word	0x40012c00
 8008dac:	40013400 	.word	0x40013400

08008db0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b087      	sub	sp, #28
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a1b      	ldr	r3, [r3, #32]
 8008dc4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	69db      	ldr	r3, [r3, #28]
 8008dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	021b      	lsls	r3, r3, #8
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008dfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	031b      	lsls	r3, r3, #12
 8008e02:	693a      	ldr	r2, [r7, #16]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a11      	ldr	r2, [pc, #68]	@ (8008e50 <TIM_OC4_SetConfig+0xa0>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d003      	beq.n	8008e18 <TIM_OC4_SetConfig+0x68>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a10      	ldr	r2, [pc, #64]	@ (8008e54 <TIM_OC4_SetConfig+0xa4>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d109      	bne.n	8008e2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	695b      	ldr	r3, [r3, #20]
 8008e24:	019b      	lsls	r3, r3, #6
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	621a      	str	r2, [r3, #32]
}
 8008e46:	bf00      	nop
 8008e48:	371c      	adds	r7, #28
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bc80      	pop	{r7}
 8008e4e:	4770      	bx	lr
 8008e50:	40012c00 	.word	0x40012c00
 8008e54:	40013400 	.word	0x40013400

08008e58 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b087      	sub	sp, #28
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
 8008e64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6a1b      	ldr	r3, [r3, #32]
 8008e6a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6a1b      	ldr	r3, [r3, #32]
 8008e70:	f023 0201 	bic.w	r2, r3, #1
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	4a23      	ldr	r2, [pc, #140]	@ (8008f10 <TIM_TI1_SetConfig+0xb8>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d013      	beq.n	8008eae <TIM_TI1_SetConfig+0x56>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	4a22      	ldr	r2, [pc, #136]	@ (8008f14 <TIM_TI1_SetConfig+0xbc>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d00f      	beq.n	8008eae <TIM_TI1_SetConfig+0x56>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e94:	d00b      	beq.n	8008eae <TIM_TI1_SetConfig+0x56>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	4a1f      	ldr	r2, [pc, #124]	@ (8008f18 <TIM_TI1_SetConfig+0xc0>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d007      	beq.n	8008eae <TIM_TI1_SetConfig+0x56>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	4a1e      	ldr	r2, [pc, #120]	@ (8008f1c <TIM_TI1_SetConfig+0xc4>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d003      	beq.n	8008eae <TIM_TI1_SetConfig+0x56>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8008f20 <TIM_TI1_SetConfig+0xc8>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d101      	bne.n	8008eb2 <TIM_TI1_SetConfig+0x5a>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e000      	b.n	8008eb4 <TIM_TI1_SetConfig+0x5c>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d008      	beq.n	8008eca <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	f023 0303 	bic.w	r3, r3, #3
 8008ebe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	617b      	str	r3, [r7, #20]
 8008ec8:	e003      	b.n	8008ed2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	f043 0301 	orr.w	r3, r3, #1
 8008ed0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ed8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	011b      	lsls	r3, r3, #4
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	697a      	ldr	r2, [r7, #20]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	f023 030a 	bic.w	r3, r3, #10
 8008eec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	f003 030a 	and.w	r3, r3, #10
 8008ef4:	693a      	ldr	r2, [r7, #16]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	697a      	ldr	r2, [r7, #20]
 8008efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	621a      	str	r2, [r3, #32]
}
 8008f06:	bf00      	nop
 8008f08:	371c      	adds	r7, #28
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bc80      	pop	{r7}
 8008f0e:	4770      	bx	lr
 8008f10:	40012c00 	.word	0x40012c00
 8008f14:	40013400 	.word	0x40013400
 8008f18:	40000400 	.word	0x40000400
 8008f1c:	40000800 	.word	0x40000800
 8008f20:	40000c00 	.word	0x40000c00

08008f24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b087      	sub	sp, #28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6a1b      	ldr	r3, [r3, #32]
 8008f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6a1b      	ldr	r3, [r3, #32]
 8008f3a:	f023 0201 	bic.w	r2, r3, #1
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	699b      	ldr	r3, [r3, #24]
 8008f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	011b      	lsls	r3, r3, #4
 8008f54:	693a      	ldr	r2, [r7, #16]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	f023 030a 	bic.w	r3, r3, #10
 8008f60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f62:	697a      	ldr	r2, [r7, #20]
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	621a      	str	r2, [r3, #32]
}
 8008f76:	bf00      	nop
 8008f78:	371c      	adds	r7, #28
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bc80      	pop	{r7}
 8008f7e:	4770      	bx	lr

08008f80 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b087      	sub	sp, #28
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
 8008f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6a1b      	ldr	r3, [r3, #32]
 8008f92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6a1b      	ldr	r3, [r3, #32]
 8008f98:	f023 0210 	bic.w	r2, r3, #16
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	021b      	lsls	r3, r3, #8
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	031b      	lsls	r3, r3, #12
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008fd2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	011b      	lsls	r3, r3, #4
 8008fd8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008fdc:	697a      	ldr	r2, [r7, #20]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	693a      	ldr	r2, [r7, #16]
 8008fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	621a      	str	r2, [r3, #32]
}
 8008fee:	bf00      	nop
 8008ff0:	371c      	adds	r7, #28
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bc80      	pop	{r7}
 8008ff6:	4770      	bx	lr

08008ff8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b087      	sub	sp, #28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6a1b      	ldr	r3, [r3, #32]
 8009008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	f023 0210 	bic.w	r2, r3, #16
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	031b      	lsls	r3, r3, #12
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	4313      	orrs	r3, r2
 800902c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009034:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	011b      	lsls	r3, r3, #4
 800903a:	697a      	ldr	r2, [r7, #20]
 800903c:	4313      	orrs	r3, r2
 800903e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	693a      	ldr	r2, [r7, #16]
 8009044:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	697a      	ldr	r2, [r7, #20]
 800904a:	621a      	str	r2, [r3, #32]
}
 800904c:	bf00      	nop
 800904e:	371c      	adds	r7, #28
 8009050:	46bd      	mov	sp, r7
 8009052:	bc80      	pop	{r7}
 8009054:	4770      	bx	lr

08009056 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009056:	b480      	push	{r7}
 8009058:	b087      	sub	sp, #28
 800905a:	af00      	add	r7, sp, #0
 800905c:	60f8      	str	r0, [r7, #12]
 800905e:	60b9      	str	r1, [r7, #8]
 8009060:	607a      	str	r2, [r7, #4]
 8009062:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6a1b      	ldr	r3, [r3, #32]
 800906e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	69db      	ldr	r3, [r3, #28]
 800907a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	f023 0303 	bic.w	r3, r3, #3
 8009082:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4313      	orrs	r3, r2
 800908a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009092:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	011b      	lsls	r3, r3, #4
 8009098:	b2db      	uxtb	r3, r3
 800909a:	693a      	ldr	r2, [r7, #16]
 800909c:	4313      	orrs	r3, r2
 800909e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80090a6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	021b      	lsls	r3, r3, #8
 80090ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090b0:	697a      	ldr	r2, [r7, #20]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	621a      	str	r2, [r3, #32]
}
 80090c2:	bf00      	nop
 80090c4:	371c      	adds	r7, #28
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bc80      	pop	{r7}
 80090ca:	4770      	bx	lr

080090cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b087      	sub	sp, #28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
 80090d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6a1b      	ldr	r3, [r3, #32]
 80090e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	69db      	ldr	r3, [r3, #28]
 80090f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	021b      	lsls	r3, r3, #8
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	4313      	orrs	r3, r2
 8009102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800910a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	031b      	lsls	r3, r3, #12
 8009110:	b29b      	uxth	r3, r3
 8009112:	693a      	ldr	r2, [r7, #16]
 8009114:	4313      	orrs	r3, r2
 8009116:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800911e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	031b      	lsls	r3, r3, #12
 8009124:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009128:	697a      	ldr	r2, [r7, #20]
 800912a:	4313      	orrs	r3, r2
 800912c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	693a      	ldr	r2, [r7, #16]
 8009132:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	621a      	str	r2, [r3, #32]
}
 800913a:	bf00      	nop
 800913c:	371c      	adds	r7, #28
 800913e:	46bd      	mov	sp, r7
 8009140:	bc80      	pop	{r7}
 8009142:	4770      	bx	lr

08009144 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800915a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800915c:	683a      	ldr	r2, [r7, #0]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	4313      	orrs	r3, r2
 8009162:	f043 0307 	orr.w	r3, r3, #7
 8009166:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	609a      	str	r2, [r3, #8]
}
 800916e:	bf00      	nop
 8009170:	3714      	adds	r7, #20
 8009172:	46bd      	mov	sp, r7
 8009174:	bc80      	pop	{r7}
 8009176:	4770      	bx	lr

08009178 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009178:	b480      	push	{r7}
 800917a:	b087      	sub	sp, #28
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
 8009184:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009192:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	021a      	lsls	r2, r3, #8
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	431a      	orrs	r2, r3
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	4313      	orrs	r3, r2
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	697a      	ldr	r2, [r7, #20]
 80091aa:	609a      	str	r2, [r3, #8]
}
 80091ac:	bf00      	nop
 80091ae:	371c      	adds	r7, #28
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bc80      	pop	{r7}
 80091b4:	4770      	bx	lr

080091b6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b087      	sub	sp, #28
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	60f8      	str	r0, [r7, #12]
 80091be:	60b9      	str	r1, [r7, #8]
 80091c0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	f003 031f 	and.w	r3, r3, #31
 80091c8:	2201      	movs	r2, #1
 80091ca:	fa02 f303 	lsl.w	r3, r2, r3
 80091ce:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6a1a      	ldr	r2, [r3, #32]
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	43db      	mvns	r3, r3
 80091d8:	401a      	ands	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6a1a      	ldr	r2, [r3, #32]
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	f003 031f 	and.w	r3, r3, #31
 80091e8:	6879      	ldr	r1, [r7, #4]
 80091ea:	fa01 f303 	lsl.w	r3, r1, r3
 80091ee:	431a      	orrs	r2, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	621a      	str	r2, [r3, #32]
}
 80091f4:	bf00      	nop
 80091f6:	371c      	adds	r7, #28
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bc80      	pop	{r7}
 80091fc:	4770      	bx	lr
	...

08009200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009210:	2b01      	cmp	r3, #1
 8009212:	d101      	bne.n	8009218 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009214:	2302      	movs	r3, #2
 8009216:	e050      	b.n	80092ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2202      	movs	r2, #2
 8009224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800923e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	4313      	orrs	r3, r2
 8009248:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68fa      	ldr	r2, [r7, #12]
 8009250:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a1b      	ldr	r2, [pc, #108]	@ (80092c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d018      	beq.n	800928e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a19      	ldr	r2, [pc, #100]	@ (80092c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d013      	beq.n	800928e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800926e:	d00e      	beq.n	800928e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a15      	ldr	r2, [pc, #84]	@ (80092cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d009      	beq.n	800928e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a14      	ldr	r2, [pc, #80]	@ (80092d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d004      	beq.n	800928e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a12      	ldr	r2, [pc, #72]	@ (80092d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d10c      	bne.n	80092a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009294:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	4313      	orrs	r3, r2
 800929e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68ba      	ldr	r2, [r7, #8]
 80092a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3714      	adds	r7, #20
 80092be:	46bd      	mov	sp, r7
 80092c0:	bc80      	pop	{r7}
 80092c2:	4770      	bx	lr
 80092c4:	40012c00 	.word	0x40012c00
 80092c8:	40013400 	.word	0x40013400
 80092cc:	40000400 	.word	0x40000400
 80092d0:	40000800 	.word	0x40000800
 80092d4:	40000c00 	.word	0x40000c00

080092d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092e0:	bf00      	nop
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bc80      	pop	{r7}
 80092e8:	4770      	bx	lr

080092ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092ea:	b480      	push	{r7}
 80092ec:	b083      	sub	sp, #12
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092f2:	bf00      	nop
 80092f4:	370c      	adds	r7, #12
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bc80      	pop	{r7}
 80092fa:	4770      	bx	lr

080092fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e042      	b.n	8009394 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b00      	cmp	r3, #0
 8009318:	d106      	bne.n	8009328 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7f9 fb2e 	bl	8002984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2224      	movs	r2, #36	@ 0x24
 800932c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68da      	ldr	r2, [r3, #12]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800933e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 fde1 	bl	8009f08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	691a      	ldr	r2, [r3, #16]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009354:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	695a      	ldr	r2, [r3, #20]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009364:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68da      	ldr	r2, [r3, #12]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009374:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2220      	movs	r2, #32
 8009380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2220      	movs	r2, #32
 8009388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b08a      	sub	sp, #40	@ 0x28
 80093a0:	af02      	add	r7, sp, #8
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	603b      	str	r3, [r7, #0]
 80093a8:	4613      	mov	r3, r2
 80093aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80093ac:	2300      	movs	r3, #0
 80093ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b20      	cmp	r3, #32
 80093ba:	d16d      	bne.n	8009498 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d002      	beq.n	80093c8 <HAL_UART_Transmit+0x2c>
 80093c2:	88fb      	ldrh	r3, [r7, #6]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d101      	bne.n	80093cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e066      	b.n	800949a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2221      	movs	r2, #33	@ 0x21
 80093d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80093da:	f7f9 fc1b 	bl	8002c14 <HAL_GetTick>
 80093de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	88fa      	ldrh	r2, [r7, #6]
 80093e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	88fa      	ldrh	r2, [r7, #6]
 80093ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093f4:	d108      	bne.n	8009408 <HAL_UART_Transmit+0x6c>
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d104      	bne.n	8009408 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80093fe:	2300      	movs	r3, #0
 8009400:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	61bb      	str	r3, [r7, #24]
 8009406:	e003      	b.n	8009410 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800940c:	2300      	movs	r3, #0
 800940e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009410:	e02a      	b.n	8009468 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	9300      	str	r3, [sp, #0]
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	2200      	movs	r2, #0
 800941a:	2180      	movs	r1, #128	@ 0x80
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f000 fb31 	bl	8009a84 <UART_WaitOnFlagUntilTimeout>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d001      	beq.n	800942c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8009428:	2303      	movs	r3, #3
 800942a:	e036      	b.n	800949a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10b      	bne.n	800944a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	881b      	ldrh	r3, [r3, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009440:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	3302      	adds	r3, #2
 8009446:	61bb      	str	r3, [r7, #24]
 8009448:	e007      	b.n	800945a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	781a      	ldrb	r2, [r3, #0]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	3301      	adds	r3, #1
 8009458:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800945e:	b29b      	uxth	r3, r3
 8009460:	3b01      	subs	r3, #1
 8009462:	b29a      	uxth	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800946c:	b29b      	uxth	r3, r3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1cf      	bne.n	8009412 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	2200      	movs	r2, #0
 800947a:	2140      	movs	r1, #64	@ 0x40
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f000 fb01 	bl	8009a84 <UART_WaitOnFlagUntilTimeout>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d001      	beq.n	800948c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8009488:	2303      	movs	r3, #3
 800948a:	e006      	b.n	800949a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2220      	movs	r2, #32
 8009490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009494:	2300      	movs	r3, #0
 8009496:	e000      	b.n	800949a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009498:	2302      	movs	r3, #2
  }
}
 800949a:	4618      	mov	r0, r3
 800949c:	3720      	adds	r7, #32
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b084      	sub	sp, #16
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	60f8      	str	r0, [r7, #12]
 80094aa:	60b9      	str	r1, [r7, #8]
 80094ac:	4613      	mov	r3, r2
 80094ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	2b20      	cmp	r3, #32
 80094ba:	d112      	bne.n	80094e2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d002      	beq.n	80094c8 <HAL_UART_Receive_IT+0x26>
 80094c2:	88fb      	ldrh	r3, [r7, #6]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d101      	bne.n	80094cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e00b      	b.n	80094e4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2200      	movs	r2, #0
 80094d0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80094d2:	88fb      	ldrh	r3, [r7, #6]
 80094d4:	461a      	mov	r2, r3
 80094d6:	68b9      	ldr	r1, [r7, #8]
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f000 fb41 	bl	8009b60 <UART_Start_Receive_IT>
 80094de:	4603      	mov	r3, r0
 80094e0:	e000      	b.n	80094e4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80094e2:	2302      	movs	r3, #2
  }
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b0ba      	sub	sp, #232	@ 0xe8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009512:	2300      	movs	r3, #0
 8009514:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009518:	2300      	movs	r3, #0
 800951a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800951e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009522:	f003 030f 	and.w	r3, r3, #15
 8009526:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800952a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10f      	bne.n	8009552 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009536:	f003 0320 	and.w	r3, r3, #32
 800953a:	2b00      	cmp	r3, #0
 800953c:	d009      	beq.n	8009552 <HAL_UART_IRQHandler+0x66>
 800953e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009542:	f003 0320 	and.w	r3, r3, #32
 8009546:	2b00      	cmp	r3, #0
 8009548:	d003      	beq.n	8009552 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 fc1e 	bl	8009d8c <UART_Receive_IT>
      return;
 8009550:	e25b      	b.n	8009a0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009552:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009556:	2b00      	cmp	r3, #0
 8009558:	f000 80de 	beq.w	8009718 <HAL_UART_IRQHandler+0x22c>
 800955c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009560:	f003 0301 	and.w	r3, r3, #1
 8009564:	2b00      	cmp	r3, #0
 8009566:	d106      	bne.n	8009576 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800956c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009570:	2b00      	cmp	r3, #0
 8009572:	f000 80d1 	beq.w	8009718 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00b      	beq.n	800959a <HAL_UART_IRQHandler+0xae>
 8009582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800958a:	2b00      	cmp	r3, #0
 800958c:	d005      	beq.n	800959a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009592:	f043 0201 	orr.w	r2, r3, #1
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800959a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800959e:	f003 0304 	and.w	r3, r3, #4
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00b      	beq.n	80095be <HAL_UART_IRQHandler+0xd2>
 80095a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d005      	beq.n	80095be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095b6:	f043 0202 	orr.w	r2, r3, #2
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095c2:	f003 0302 	and.w	r3, r3, #2
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00b      	beq.n	80095e2 <HAL_UART_IRQHandler+0xf6>
 80095ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095ce:	f003 0301 	and.w	r3, r3, #1
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d005      	beq.n	80095e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095da:	f043 0204 	orr.w	r2, r3, #4
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80095e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095e6:	f003 0308 	and.w	r3, r3, #8
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d011      	beq.n	8009612 <HAL_UART_IRQHandler+0x126>
 80095ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095f2:	f003 0320 	and.w	r3, r3, #32
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d105      	bne.n	8009606 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80095fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095fe:	f003 0301 	and.w	r3, r3, #1
 8009602:	2b00      	cmp	r3, #0
 8009604:	d005      	beq.n	8009612 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800960a:	f043 0208 	orr.w	r2, r3, #8
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009616:	2b00      	cmp	r3, #0
 8009618:	f000 81f2 	beq.w	8009a00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800961c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009620:	f003 0320 	and.w	r3, r3, #32
 8009624:	2b00      	cmp	r3, #0
 8009626:	d008      	beq.n	800963a <HAL_UART_IRQHandler+0x14e>
 8009628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800962c:	f003 0320 	and.w	r3, r3, #32
 8009630:	2b00      	cmp	r3, #0
 8009632:	d002      	beq.n	800963a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 fba9 	bl	8009d8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	695b      	ldr	r3, [r3, #20]
 8009640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009644:	2b00      	cmp	r3, #0
 8009646:	bf14      	ite	ne
 8009648:	2301      	movne	r3, #1
 800964a:	2300      	moveq	r3, #0
 800964c:	b2db      	uxtb	r3, r3
 800964e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009656:	f003 0308 	and.w	r3, r3, #8
 800965a:	2b00      	cmp	r3, #0
 800965c:	d103      	bne.n	8009666 <HAL_UART_IRQHandler+0x17a>
 800965e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009662:	2b00      	cmp	r3, #0
 8009664:	d04f      	beq.n	8009706 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fab3 	bl	8009bd2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	695b      	ldr	r3, [r3, #20]
 8009672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009676:	2b00      	cmp	r3, #0
 8009678:	d041      	beq.n	80096fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3314      	adds	r3, #20
 8009680:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009684:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009688:	e853 3f00 	ldrex	r3, [r3]
 800968c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009690:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009694:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009698:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	3314      	adds	r3, #20
 80096a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80096a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80096aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80096b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80096b6:	e841 2300 	strex	r3, r2, [r1]
 80096ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80096be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1d9      	bne.n	800967a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d013      	beq.n	80096f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096d2:	4a7e      	ldr	r2, [pc, #504]	@ (80098cc <HAL_UART_IRQHandler+0x3e0>)
 80096d4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fa fb4a 	bl	8003d74 <HAL_DMA_Abort_IT>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d016      	beq.n	8009714 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80096f0:	4610      	mov	r0, r2
 80096f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096f4:	e00e      	b.n	8009714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f993 	bl	8009a22 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096fc:	e00a      	b.n	8009714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 f98f 	bl	8009a22 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009704:	e006      	b.n	8009714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f98b 	bl	8009a22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009712:	e175      	b.n	8009a00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009714:	bf00      	nop
    return;
 8009716:	e173      	b.n	8009a00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800971c:	2b01      	cmp	r3, #1
 800971e:	f040 814f 	bne.w	80099c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009726:	f003 0310 	and.w	r3, r3, #16
 800972a:	2b00      	cmp	r3, #0
 800972c:	f000 8148 	beq.w	80099c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009734:	f003 0310 	and.w	r3, r3, #16
 8009738:	2b00      	cmp	r3, #0
 800973a:	f000 8141 	beq.w	80099c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800973e:	2300      	movs	r3, #0
 8009740:	60bb      	str	r3, [r7, #8]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	60bb      	str	r3, [r7, #8]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	60bb      	str	r3, [r7, #8]
 8009752:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800975e:	2b00      	cmp	r3, #0
 8009760:	f000 80b6 	beq.w	80098d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009770:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009774:	2b00      	cmp	r3, #0
 8009776:	f000 8145 	beq.w	8009a04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800977e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009782:	429a      	cmp	r2, r3
 8009784:	f080 813e 	bcs.w	8009a04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800978e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009794:	699b      	ldr	r3, [r3, #24]
 8009796:	2b20      	cmp	r3, #32
 8009798:	f000 8088 	beq.w	80098ac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	330c      	adds	r3, #12
 80097a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80097aa:	e853 3f00 	ldrex	r3, [r3]
 80097ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80097b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80097b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	330c      	adds	r3, #12
 80097c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80097c8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80097cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80097d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80097d8:	e841 2300 	strex	r3, r2, [r1]
 80097dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80097e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1d9      	bne.n	800979c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	3314      	adds	r3, #20
 80097ee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80097f2:	e853 3f00 	ldrex	r3, [r3]
 80097f6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80097f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80097fa:	f023 0301 	bic.w	r3, r3, #1
 80097fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	3314      	adds	r3, #20
 8009808:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800980c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009810:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009812:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009814:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009818:	e841 2300 	strex	r3, r2, [r1]
 800981c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800981e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1e1      	bne.n	80097e8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	3314      	adds	r3, #20
 800982a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800982e:	e853 3f00 	ldrex	r3, [r3]
 8009832:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009834:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009836:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800983a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3314      	adds	r3, #20
 8009844:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009848:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800984a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800984e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009850:	e841 2300 	strex	r3, r2, [r1]
 8009854:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009856:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1e3      	bne.n	8009824 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2220      	movs	r2, #32
 8009860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	330c      	adds	r3, #12
 8009870:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009874:	e853 3f00 	ldrex	r3, [r3]
 8009878:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800987a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800987c:	f023 0310 	bic.w	r3, r3, #16
 8009880:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	330c      	adds	r3, #12
 800988a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800988e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009890:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009892:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009894:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009896:	e841 2300 	strex	r3, r2, [r1]
 800989a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800989c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1e3      	bne.n	800986a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fa fa28 	bl	8003cfc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2202      	movs	r2, #2
 80098b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	1ad3      	subs	r3, r2, r3
 80098be:	b29b      	uxth	r3, r3
 80098c0:	4619      	mov	r1, r3
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 f8b6 	bl	8009a34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80098c8:	e09c      	b.n	8009a04 <HAL_UART_IRQHandler+0x518>
 80098ca:	bf00      	nop
 80098cc:	08009c97 	.word	0x08009c97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80098d8:	b29b      	uxth	r3, r3
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f000 808e 	beq.w	8009a08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80098ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f000 8089 	beq.w	8009a08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	330c      	adds	r3, #12
 80098fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009900:	e853 3f00 	ldrex	r3, [r3]
 8009904:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009908:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800990c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	330c      	adds	r3, #12
 8009916:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800991a:	647a      	str	r2, [r7, #68]	@ 0x44
 800991c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009920:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009922:	e841 2300 	strex	r3, r2, [r1]
 8009926:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1e3      	bne.n	80098f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	3314      	adds	r3, #20
 8009934:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009938:	e853 3f00 	ldrex	r3, [r3]
 800993c:	623b      	str	r3, [r7, #32]
   return(result);
 800993e:	6a3b      	ldr	r3, [r7, #32]
 8009940:	f023 0301 	bic.w	r3, r3, #1
 8009944:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	3314      	adds	r3, #20
 800994e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009952:	633a      	str	r2, [r7, #48]	@ 0x30
 8009954:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009956:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009958:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800995a:	e841 2300 	strex	r3, r2, [r1]
 800995e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1e3      	bne.n	800992e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2220      	movs	r2, #32
 800996a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	330c      	adds	r3, #12
 800997a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	e853 3f00 	ldrex	r3, [r3]
 8009982:	60fb      	str	r3, [r7, #12]
   return(result);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f023 0310 	bic.w	r3, r3, #16
 800998a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	330c      	adds	r3, #12
 8009994:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009998:	61fa      	str	r2, [r7, #28]
 800999a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999c:	69b9      	ldr	r1, [r7, #24]
 800999e:	69fa      	ldr	r2, [r7, #28]
 80099a0:	e841 2300 	strex	r3, r2, [r1]
 80099a4:	617b      	str	r3, [r7, #20]
   return(result);
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1e3      	bne.n	8009974 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2202      	movs	r2, #2
 80099b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f83b 	bl	8009a34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80099be:	e023      	b.n	8009a08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80099c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d009      	beq.n	80099e0 <HAL_UART_IRQHandler+0x4f4>
 80099cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d003      	beq.n	80099e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f970 	bl	8009cbe <UART_Transmit_IT>
    return;
 80099de:	e014      	b.n	8009a0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80099e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00e      	beq.n	8009a0a <HAL_UART_IRQHandler+0x51e>
 80099ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d008      	beq.n	8009a0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f9af 	bl	8009d5c <UART_EndTransmit_IT>
    return;
 80099fe:	e004      	b.n	8009a0a <HAL_UART_IRQHandler+0x51e>
    return;
 8009a00:	bf00      	nop
 8009a02:	e002      	b.n	8009a0a <HAL_UART_IRQHandler+0x51e>
      return;
 8009a04:	bf00      	nop
 8009a06:	e000      	b.n	8009a0a <HAL_UART_IRQHandler+0x51e>
      return;
 8009a08:	bf00      	nop
  }
}
 8009a0a:	37e8      	adds	r7, #232	@ 0xe8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009a18:	bf00      	nop
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bc80      	pop	{r7}
 8009a20:	4770      	bx	lr

08009a22 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a22:	b480      	push	{r7}
 8009a24:	b083      	sub	sp, #12
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009a2a:	bf00      	nop
 8009a2c:	370c      	adds	r7, #12
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bc80      	pop	{r7}
 8009a32:	4770      	bx	lr

08009a34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bc80      	pop	{r7}
 8009a48:	4770      	bx	lr

08009a4a <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8009a4a:	b480      	push	{r7}
 8009a4c:	b085      	sub	sp, #20
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8009a52:	2300      	movs	r3, #0
 8009a54:	60fb      	str	r3, [r7, #12]
 8009a56:	2300      	movs	r3, #0
 8009a58:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	b2da      	uxtb	r2, r3
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	4313      	orrs	r3, r2
 8009a78:	b2db      	uxtb	r3, r3
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bc80      	pop	{r7}
 8009a82:	4770      	bx	lr

08009a84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b090      	sub	sp, #64	@ 0x40
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	603b      	str	r3, [r7, #0]
 8009a90:	4613      	mov	r3, r2
 8009a92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a94:	e050      	b.n	8009b38 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a9c:	d04c      	beq.n	8009b38 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d007      	beq.n	8009ab4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009aa4:	f7f9 f8b6 	bl	8002c14 <HAL_GetTick>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d241      	bcs.n	8009b38 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	330c      	adds	r3, #12
 8009aba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009abe:	e853 3f00 	ldrex	r3, [r3]
 8009ac2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	330c      	adds	r3, #12
 8009ad2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009ad4:	637a      	str	r2, [r7, #52]	@ 0x34
 8009ad6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009ada:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009adc:	e841 2300 	strex	r3, r2, [r1]
 8009ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d1e5      	bne.n	8009ab4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	3314      	adds	r3, #20
 8009aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	e853 3f00 	ldrex	r3, [r3]
 8009af6:	613b      	str	r3, [r7, #16]
   return(result);
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	f023 0301 	bic.w	r3, r3, #1
 8009afe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	3314      	adds	r3, #20
 8009b06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b08:	623a      	str	r2, [r7, #32]
 8009b0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0c:	69f9      	ldr	r1, [r7, #28]
 8009b0e:	6a3a      	ldr	r2, [r7, #32]
 8009b10:	e841 2300 	strex	r3, r2, [r1]
 8009b14:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1e5      	bne.n	8009ae8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2220      	movs	r2, #32
 8009b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2220      	movs	r2, #32
 8009b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8009b34:	2303      	movs	r3, #3
 8009b36:	e00f      	b.n	8009b58 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	4013      	ands	r3, r2
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	bf0c      	ite	eq
 8009b48:	2301      	moveq	r3, #1
 8009b4a:	2300      	movne	r3, #0
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	461a      	mov	r2, r3
 8009b50:	79fb      	ldrb	r3, [r7, #7]
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d09f      	beq.n	8009a96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3740      	adds	r7, #64	@ 0x40
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	88fa      	ldrh	r2, [r7, #6]
 8009b78:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	88fa      	ldrh	r2, [r7, #6]
 8009b7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2200      	movs	r2, #0
 8009b84:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2222      	movs	r2, #34	@ 0x22
 8009b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d007      	beq.n	8009ba6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68da      	ldr	r2, [r3, #12]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009ba4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	695a      	ldr	r2, [r3, #20]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f042 0201 	orr.w	r2, r2, #1
 8009bb4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	68da      	ldr	r2, [r3, #12]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f042 0220 	orr.w	r2, r2, #32
 8009bc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3714      	adds	r7, #20
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bc80      	pop	{r7}
 8009bd0:	4770      	bx	lr

08009bd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	b095      	sub	sp, #84	@ 0x54
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	330c      	adds	r3, #12
 8009be0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009be4:	e853 3f00 	ldrex	r3, [r3]
 8009be8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	330c      	adds	r3, #12
 8009bf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009bfa:	643a      	str	r2, [r7, #64]	@ 0x40
 8009bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c02:	e841 2300 	strex	r3, r2, [r1]
 8009c06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1e5      	bne.n	8009bda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	3314      	adds	r3, #20
 8009c14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	e853 3f00 	ldrex	r3, [r3]
 8009c1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	f023 0301 	bic.w	r3, r3, #1
 8009c24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	3314      	adds	r3, #20
 8009c2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c36:	e841 2300 	strex	r3, r2, [r1]
 8009c3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1e5      	bne.n	8009c0e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d119      	bne.n	8009c7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	330c      	adds	r3, #12
 8009c50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	e853 3f00 	ldrex	r3, [r3]
 8009c58:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	f023 0310 	bic.w	r3, r3, #16
 8009c60:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	330c      	adds	r3, #12
 8009c68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c6a:	61ba      	str	r2, [r7, #24]
 8009c6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6e:	6979      	ldr	r1, [r7, #20]
 8009c70:	69ba      	ldr	r2, [r7, #24]
 8009c72:	e841 2300 	strex	r3, r2, [r1]
 8009c76:	613b      	str	r3, [r7, #16]
   return(result);
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1e5      	bne.n	8009c4a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2220      	movs	r2, #32
 8009c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009c8c:	bf00      	nop
 8009c8e:	3754      	adds	r7, #84	@ 0x54
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bc80      	pop	{r7}
 8009c94:	4770      	bx	lr

08009c96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b084      	sub	sp, #16
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f7ff feb6 	bl	8009a22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cb6:	bf00      	nop
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b085      	sub	sp, #20
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	2b21      	cmp	r3, #33	@ 0x21
 8009cd0:	d13e      	bne.n	8009d50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cda:	d114      	bne.n	8009d06 <UART_Transmit_IT+0x48>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d110      	bne.n	8009d06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6a1b      	ldr	r3, [r3, #32]
 8009ce8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	881b      	ldrh	r3, [r3, #0]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cf8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	1c9a      	adds	r2, r3, #2
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	621a      	str	r2, [r3, #32]
 8009d04:	e008      	b.n	8009d18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	1c59      	adds	r1, r3, #1
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	6211      	str	r1, [r2, #32]
 8009d10:	781a      	ldrb	r2, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	4619      	mov	r1, r3
 8009d26:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10f      	bne.n	8009d4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68da      	ldr	r2, [r3, #12]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009d3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68da      	ldr	r2, [r3, #12]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	e000      	b.n	8009d52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009d50:	2302      	movs	r3, #2
  }
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3714      	adds	r7, #20
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bc80      	pop	{r7}
 8009d5a:	4770      	bx	lr

08009d5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68da      	ldr	r2, [r3, #12]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2220      	movs	r2, #32
 8009d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7ff fe47 	bl	8009a10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3708      	adds	r7, #8
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b08c      	sub	sp, #48	@ 0x30
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	2b22      	cmp	r3, #34	@ 0x22
 8009d9e:	f040 80ae 	bne.w	8009efe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009daa:	d117      	bne.n	8009ddc <UART_Receive_IT+0x50>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	691b      	ldr	r3, [r3, #16]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d113      	bne.n	8009ddc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009db4:	2300      	movs	r3, #0
 8009db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dd4:	1c9a      	adds	r2, r3, #2
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	629a      	str	r2, [r3, #40]	@ 0x28
 8009dda:	e026      	b.n	8009e2a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009de2:	2300      	movs	r3, #0
 8009de4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009dee:	d007      	beq.n	8009e00 <UART_Receive_IT+0x74>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d10a      	bne.n	8009e0e <UART_Receive_IT+0x82>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d106      	bne.n	8009e0e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	b2da      	uxtb	r2, r3
 8009e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e0a:	701a      	strb	r2, [r3, #0]
 8009e0c:	e008      	b.n	8009e20 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e1a:	b2da      	uxtb	r2, r3
 8009e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e1e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e24:	1c5a      	adds	r2, r3, #1
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	3b01      	subs	r3, #1
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	4619      	mov	r1, r3
 8009e38:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d15d      	bne.n	8009efa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68da      	ldr	r2, [r3, #12]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f022 0220 	bic.w	r2, r2, #32
 8009e4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68da      	ldr	r2, [r3, #12]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009e5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	695a      	ldr	r2, [r3, #20]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f022 0201 	bic.w	r2, r2, #1
 8009e6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2220      	movs	r2, #32
 8009e72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d135      	bne.n	8009ef0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	330c      	adds	r3, #12
 8009e90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	e853 3f00 	ldrex	r3, [r3]
 8009e98:	613b      	str	r3, [r7, #16]
   return(result);
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	f023 0310 	bic.w	r3, r3, #16
 8009ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	330c      	adds	r3, #12
 8009ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009eaa:	623a      	str	r2, [r7, #32]
 8009eac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eae:	69f9      	ldr	r1, [r7, #28]
 8009eb0:	6a3a      	ldr	r2, [r7, #32]
 8009eb2:	e841 2300 	strex	r3, r2, [r1]
 8009eb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1e5      	bne.n	8009e8a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0310 	and.w	r3, r3, #16
 8009ec8:	2b10      	cmp	r3, #16
 8009eca:	d10a      	bne.n	8009ee2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ecc:	2300      	movs	r3, #0
 8009ece:	60fb      	str	r3, [r7, #12]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	60fb      	str	r3, [r7, #12]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	60fb      	str	r3, [r7, #12]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7ff fda3 	bl	8009a34 <HAL_UARTEx_RxEventCallback>
 8009eee:	e002      	b.n	8009ef6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f7f8 fda9 	bl	8002a48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	e002      	b.n	8009f00 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	e000      	b.n	8009f00 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009efe:	2302      	movs	r3, #2
  }
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3730      	adds	r7, #48	@ 0x30
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	68da      	ldr	r2, [r3, #12]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	430a      	orrs	r2, r1
 8009f24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	689a      	ldr	r2, [r3, #8]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	691b      	ldr	r3, [r3, #16]
 8009f2e:	431a      	orrs	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	695b      	ldr	r3, [r3, #20]
 8009f34:	4313      	orrs	r3, r2
 8009f36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009f42:	f023 030c 	bic.w	r3, r3, #12
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	6812      	ldr	r2, [r2, #0]
 8009f4a:	68b9      	ldr	r1, [r7, #8]
 8009f4c:	430b      	orrs	r3, r1
 8009f4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	699a      	ldr	r2, [r3, #24]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	430a      	orrs	r2, r1
 8009f64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a2c      	ldr	r2, [pc, #176]	@ (800a01c <UART_SetConfig+0x114>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d103      	bne.n	8009f78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009f70:	f7fc ff52 	bl	8006e18 <HAL_RCC_GetPCLK2Freq>
 8009f74:	60f8      	str	r0, [r7, #12]
 8009f76:	e002      	b.n	8009f7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009f78:	f7fc ff3a 	bl	8006df0 <HAL_RCC_GetPCLK1Freq>
 8009f7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f7e:	68fa      	ldr	r2, [r7, #12]
 8009f80:	4613      	mov	r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4413      	add	r3, r2
 8009f86:	009a      	lsls	r2, r3, #2
 8009f88:	441a      	add	r2, r3
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f94:	4a22      	ldr	r2, [pc, #136]	@ (800a020 <UART_SetConfig+0x118>)
 8009f96:	fba2 2303 	umull	r2, r3, r2, r3
 8009f9a:	095b      	lsrs	r3, r3, #5
 8009f9c:	0119      	lsls	r1, r3, #4
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	009a      	lsls	r2, r3, #2
 8009fa8:	441a      	add	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8009fb4:	4b1a      	ldr	r3, [pc, #104]	@ (800a020 <UART_SetConfig+0x118>)
 8009fb6:	fba3 0302 	umull	r0, r3, r3, r2
 8009fba:	095b      	lsrs	r3, r3, #5
 8009fbc:	2064      	movs	r0, #100	@ 0x64
 8009fbe:	fb00 f303 	mul.w	r3, r0, r3
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	011b      	lsls	r3, r3, #4
 8009fc6:	3332      	adds	r3, #50	@ 0x32
 8009fc8:	4a15      	ldr	r2, [pc, #84]	@ (800a020 <UART_SetConfig+0x118>)
 8009fca:	fba2 2303 	umull	r2, r3, r2, r3
 8009fce:	095b      	lsrs	r3, r3, #5
 8009fd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009fd4:	4419      	add	r1, r3
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	4413      	add	r3, r2
 8009fde:	009a      	lsls	r2, r3, #2
 8009fe0:	441a      	add	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	fbb2 f2f3 	udiv	r2, r2, r3
 8009fec:	4b0c      	ldr	r3, [pc, #48]	@ (800a020 <UART_SetConfig+0x118>)
 8009fee:	fba3 0302 	umull	r0, r3, r3, r2
 8009ff2:	095b      	lsrs	r3, r3, #5
 8009ff4:	2064      	movs	r0, #100	@ 0x64
 8009ff6:	fb00 f303 	mul.w	r3, r0, r3
 8009ffa:	1ad3      	subs	r3, r2, r3
 8009ffc:	011b      	lsls	r3, r3, #4
 8009ffe:	3332      	adds	r3, #50	@ 0x32
 800a000:	4a07      	ldr	r2, [pc, #28]	@ (800a020 <UART_SetConfig+0x118>)
 800a002:	fba2 2303 	umull	r2, r3, r2, r3
 800a006:	095b      	lsrs	r3, r3, #5
 800a008:	f003 020f 	and.w	r2, r3, #15
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	440a      	add	r2, r1
 800a012:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a014:	bf00      	nop
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	40013800 	.word	0x40013800
 800a020:	51eb851f 	.word	0x51eb851f

0800a024 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a024:	b084      	sub	sp, #16
 800a026:	b480      	push	{r7}
 800a028:	b083      	sub	sp, #12
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
 800a02e:	f107 0014 	add.w	r0, r7, #20
 800a032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bc80      	pop	{r7}
 800a040:	b004      	add	sp, #16
 800a042:	4770      	bx	lr

0800a044 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a054:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800a058:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a064:	2300      	movs	r3, #0
}
 800a066:	4618      	mov	r0, r3
 800a068:	3714      	adds	r7, #20
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bc80      	pop	{r7}
 800a06e:	4770      	bx	lr

0800a070 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a070:	b480      	push	{r7}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a078:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800a07c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a084:	b29a      	uxth	r2, r3
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	b29b      	uxth	r3, r3
 800a08a:	43db      	mvns	r3, r3
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	4013      	ands	r3, r2
 800a090:	b29a      	uxth	r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3714      	adds	r7, #20
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bc80      	pop	{r7}
 800a0a2:	4770      	bx	lr

0800a0a4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	370c      	adds	r7, #12
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bc80      	pop	{r7}
 800a0ba:	4770      	bx	lr

0800a0bc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a0bc:	b084      	sub	sp, #16
 800a0be:	b480      	push	{r7}
 800a0c0:	b083      	sub	sp, #12
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
 800a0c6:	f107 0014 	add.w	r0, r7, #20
 800a0ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800a0ee:	2300      	movs	r3, #0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bc80      	pop	{r7}
 800a0f8:	b004      	add	sp, #16
 800a0fa:	4770      	bx	lr

0800a0fc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b09d      	sub	sp, #116	@ 0x74
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a106:	2300      	movs	r3, #0
 800a108:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4413      	add	r3, r2
 800a116:	881b      	ldrh	r3, [r3, #0]
 800a118:	b29b      	uxth	r3, r3
 800a11a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800a11e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a122:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	78db      	ldrb	r3, [r3, #3]
 800a12a:	2b03      	cmp	r3, #3
 800a12c:	d81f      	bhi.n	800a16e <USB_ActivateEndpoint+0x72>
 800a12e:	a201      	add	r2, pc, #4	@ (adr r2, 800a134 <USB_ActivateEndpoint+0x38>)
 800a130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a134:	0800a145 	.word	0x0800a145
 800a138:	0800a161 	.word	0x0800a161
 800a13c:	0800a177 	.word	0x0800a177
 800a140:	0800a153 	.word	0x0800a153
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a144:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a148:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a14c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a150:	e012      	b.n	800a178 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a152:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a156:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800a15a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a15e:	e00b      	b.n	800a178 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a160:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a164:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a168:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a16c:	e004      	b.n	800a178 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800a174:	e000      	b.n	800a178 <USB_ActivateEndpoint+0x7c>
      break;
 800a176:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	441a      	add	r2, r3
 800a182:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a186:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a18a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a18e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a196:	b29b      	uxth	r3, r3
 800a198:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4413      	add	r3, r2
 800a1a4:	881b      	ldrh	r3, [r3, #0]
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	683a      	ldr	r2, [r7, #0]
 800a1b4:	7812      	ldrb	r2, [r2, #0]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	441a      	add	r2, r3
 800a1c6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800a1ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	7b1b      	ldrb	r3, [r3, #12]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f040 8178 	bne.w	800a4d8 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	785b      	ldrb	r3, [r3, #1]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f000 8084 	beq.w	800a2fa <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	61bb      	str	r3, [r7, #24]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	461a      	mov	r2, r3
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	4413      	add	r3, r2
 800a204:	61bb      	str	r3, [r7, #24]
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	011a      	lsls	r2, r3, #4
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	4413      	add	r3, r2
 800a210:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a214:	617b      	str	r3, [r7, #20]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	88db      	ldrh	r3, [r3, #6]
 800a21a:	085b      	lsrs	r3, r3, #1
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	005b      	lsls	r3, r3, #1
 800a220:	b29a      	uxth	r2, r3
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	4413      	add	r3, r2
 800a230:	881b      	ldrh	r3, [r3, #0]
 800a232:	827b      	strh	r3, [r7, #18]
 800a234:	8a7b      	ldrh	r3, [r7, #18]
 800a236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d01b      	beq.n	800a276 <USB_ActivateEndpoint+0x17a>
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	4413      	add	r3, r2
 800a248:	881b      	ldrh	r3, [r3, #0]
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a250:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a254:	823b      	strh	r3, [r7, #16]
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	441a      	add	r2, r3
 800a260:	8a3b      	ldrh	r3, [r7, #16]
 800a262:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a266:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a26a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a26e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a272:	b29b      	uxth	r3, r3
 800a274:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	78db      	ldrb	r3, [r3, #3]
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d020      	beq.n	800a2c0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	4413      	add	r3, r2
 800a288:	881b      	ldrh	r3, [r3, #0]
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a290:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a294:	81bb      	strh	r3, [r7, #12]
 800a296:	89bb      	ldrh	r3, [r7, #12]
 800a298:	f083 0320 	eor.w	r3, r3, #32
 800a29c:	81bb      	strh	r3, [r7, #12]
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	781b      	ldrb	r3, [r3, #0]
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	441a      	add	r2, r3
 800a2a8:	89bb      	ldrh	r3, [r7, #12]
 800a2aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	8013      	strh	r3, [r2, #0]
 800a2be:	e2d5      	b.n	800a86c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	4413      	add	r3, r2
 800a2ca:	881b      	ldrh	r3, [r3, #0]
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2d6:	81fb      	strh	r3, [r7, #14]
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	441a      	add	r2, r3
 800a2e2:	89fb      	ldrh	r3, [r7, #14]
 800a2e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	8013      	strh	r3, [r2, #0]
 800a2f8:	e2b8      	b.n	800a86c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a304:	b29b      	uxth	r3, r3
 800a306:	461a      	mov	r2, r3
 800a308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a30a:	4413      	add	r3, r2
 800a30c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	011a      	lsls	r2, r3, #4
 800a314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a316:	4413      	add	r3, r2
 800a318:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800a31c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	88db      	ldrh	r3, [r3, #6]
 800a322:	085b      	lsrs	r3, r3, #1
 800a324:	b29b      	uxth	r3, r3
 800a326:	005b      	lsls	r3, r3, #1
 800a328:	b29a      	uxth	r2, r3
 800a32a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a32c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a338:	b29b      	uxth	r3, r3
 800a33a:	461a      	mov	r2, r3
 800a33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a33e:	4413      	add	r3, r2
 800a340:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	011a      	lsls	r2, r3, #4
 800a348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a34a:	4413      	add	r3, r2
 800a34c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800a350:	627b      	str	r3, [r7, #36]	@ 0x24
 800a352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a354:	881b      	ldrh	r3, [r3, #0]
 800a356:	b29b      	uxth	r3, r3
 800a358:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a35c:	b29a      	uxth	r2, r3
 800a35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a360:	801a      	strh	r2, [r3, #0]
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	2b3e      	cmp	r3, #62	@ 0x3e
 800a368:	d91d      	bls.n	800a3a6 <USB_ActivateEndpoint+0x2aa>
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	095b      	lsrs	r3, r3, #5
 800a370:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	f003 031f 	and.w	r3, r3, #31
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d102      	bne.n	800a384 <USB_ActivateEndpoint+0x288>
 800a37e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a380:	3b01      	subs	r3, #1
 800a382:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a386:	881b      	ldrh	r3, [r3, #0]
 800a388:	b29a      	uxth	r2, r3
 800a38a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	029b      	lsls	r3, r3, #10
 800a390:	b29b      	uxth	r3, r3
 800a392:	4313      	orrs	r3, r2
 800a394:	b29b      	uxth	r3, r3
 800a396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a39a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a2:	801a      	strh	r2, [r3, #0]
 800a3a4:	e026      	b.n	800a3f4 <USB_ActivateEndpoint+0x2f8>
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d10a      	bne.n	800a3c4 <USB_ActivateEndpoint+0x2c8>
 800a3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b0:	881b      	ldrh	r3, [r3, #0]
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3bc:	b29a      	uxth	r2, r3
 800a3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c0:	801a      	strh	r2, [r3, #0]
 800a3c2:	e017      	b.n	800a3f4 <USB_ActivateEndpoint+0x2f8>
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	085b      	lsrs	r3, r3, #1
 800a3ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	691b      	ldr	r3, [r3, #16]
 800a3d0:	f003 0301 	and.w	r3, r3, #1
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d002      	beq.n	800a3de <USB_ActivateEndpoint+0x2e2>
 800a3d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a3da:	3301      	adds	r3, #1
 800a3dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e0:	881b      	ldrh	r3, [r3, #0]
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	029b      	lsls	r3, r3, #10
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	b29a      	uxth	r2, r3
 800a3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	4413      	add	r3, r2
 800a3fe:	881b      	ldrh	r3, [r3, #0]
 800a400:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a402:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a404:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d01b      	beq.n	800a444 <USB_ActivateEndpoint+0x348>
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	4413      	add	r3, r2
 800a416:	881b      	ldrh	r3, [r3, #0]
 800a418:	b29b      	uxth	r3, r3
 800a41a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a41e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a422:	843b      	strh	r3, [r7, #32]
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	441a      	add	r2, r3
 800a42e:	8c3b      	ldrh	r3, [r7, #32]
 800a430:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a434:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a438:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a43c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a440:	b29b      	uxth	r3, r3
 800a442:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d124      	bne.n	800a496 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	4413      	add	r3, r2
 800a456:	881b      	ldrh	r3, [r3, #0]
 800a458:	b29b      	uxth	r3, r3
 800a45a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a45e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a462:	83bb      	strh	r3, [r7, #28]
 800a464:	8bbb      	ldrh	r3, [r7, #28]
 800a466:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a46a:	83bb      	strh	r3, [r7, #28]
 800a46c:	8bbb      	ldrh	r3, [r7, #28]
 800a46e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a472:	83bb      	strh	r3, [r7, #28]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	441a      	add	r2, r3
 800a47e:	8bbb      	ldrh	r3, [r7, #28]
 800a480:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a484:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a488:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a48c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a490:	b29b      	uxth	r3, r3
 800a492:	8013      	strh	r3, [r2, #0]
 800a494:	e1ea      	b.n	800a86c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	4413      	add	r3, r2
 800a4a0:	881b      	ldrh	r3, [r3, #0]
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a4a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4ac:	83fb      	strh	r3, [r7, #30]
 800a4ae:	8bfb      	ldrh	r3, [r7, #30]
 800a4b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a4b4:	83fb      	strh	r3, [r7, #30]
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	441a      	add	r2, r3
 800a4c0:	8bfb      	ldrh	r3, [r7, #30]
 800a4c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	8013      	strh	r3, [r2, #0]
 800a4d6:	e1c9      	b.n	800a86c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	78db      	ldrb	r3, [r3, #3]
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d11e      	bne.n	800a51e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	4413      	add	r3, r2
 800a4ea:	881b      	ldrh	r3, [r3, #0]
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4f6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	441a      	add	r2, r3
 800a504:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a508:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a50c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a510:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a518:	b29b      	uxth	r3, r3
 800a51a:	8013      	strh	r3, [r2, #0]
 800a51c:	e01d      	b.n	800a55a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	4413      	add	r3, r2
 800a528:	881b      	ldrh	r3, [r3, #0]
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a534:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	441a      	add	r2, r3
 800a542:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800a546:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a54a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a54e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a556:	b29b      	uxth	r3, r3
 800a558:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a564:	b29b      	uxth	r3, r3
 800a566:	461a      	mov	r2, r3
 800a568:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a56a:	4413      	add	r3, r2
 800a56c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	011a      	lsls	r2, r3, #4
 800a574:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a576:	4413      	add	r3, r2
 800a578:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a57c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	891b      	ldrh	r3, [r3, #8]
 800a582:	085b      	lsrs	r3, r3, #1
 800a584:	b29b      	uxth	r3, r3
 800a586:	005b      	lsls	r3, r3, #1
 800a588:	b29a      	uxth	r2, r3
 800a58a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a58c:	801a      	strh	r2, [r3, #0]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	657b      	str	r3, [r7, #84]	@ 0x54
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a598:	b29b      	uxth	r3, r3
 800a59a:	461a      	mov	r2, r3
 800a59c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a59e:	4413      	add	r3, r2
 800a5a0:	657b      	str	r3, [r7, #84]	@ 0x54
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	011a      	lsls	r2, r3, #4
 800a5a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5aa:	4413      	add	r3, r2
 800a5ac:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800a5b0:	653b      	str	r3, [r7, #80]	@ 0x50
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	895b      	ldrh	r3, [r3, #10]
 800a5b6:	085b      	lsrs	r3, r3, #1
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	005b      	lsls	r3, r3, #1
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5c0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	785b      	ldrb	r3, [r3, #1]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f040 8093 	bne.w	800a6f2 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	4413      	add	r3, r2
 800a5d6:	881b      	ldrh	r3, [r3, #0]
 800a5d8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800a5dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a5e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d01b      	beq.n	800a620 <USB_ActivateEndpoint+0x524>
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	4413      	add	r3, r2
 800a5f2:	881b      	ldrh	r3, [r3, #0]
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5fe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	441a      	add	r2, r3
 800a60a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a60c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a610:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a614:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	4413      	add	r3, r2
 800a62a:	881b      	ldrh	r3, [r3, #0]
 800a62c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800a62e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a634:	2b00      	cmp	r3, #0
 800a636:	d01b      	beq.n	800a670 <USB_ActivateEndpoint+0x574>
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	4413      	add	r3, r2
 800a642:	881b      	ldrh	r3, [r3, #0]
 800a644:	b29b      	uxth	r3, r3
 800a646:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a64a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a64e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	441a      	add	r2, r3
 800a65a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a65c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a660:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a664:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a668:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	009b      	lsls	r3, r3, #2
 800a678:	4413      	add	r3, r2
 800a67a:	881b      	ldrh	r3, [r3, #0]
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a686:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a688:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a68a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a68e:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a690:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a692:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a696:	873b      	strh	r3, [r7, #56]	@ 0x38
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	441a      	add	r2, r3
 800a6a2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a6a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	4413      	add	r3, r2
 800a6c2:	881b      	ldrh	r3, [r3, #0]
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	441a      	add	r2, r3
 800a6da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a6dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	8013      	strh	r3, [r2, #0]
 800a6f0:	e0bc      	b.n	800a86c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	4413      	add	r3, r2
 800a6fc:	881b      	ldrh	r3, [r3, #0]
 800a6fe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a702:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d01d      	beq.n	800a74a <USB_ActivateEndpoint+0x64e>
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	4413      	add	r3, r2
 800a718:	881b      	ldrh	r3, [r3, #0]
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a720:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a724:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	441a      	add	r2, r3
 800a732:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a736:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a73a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a73e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a746:	b29b      	uxth	r3, r3
 800a748:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	4413      	add	r3, r2
 800a754:	881b      	ldrh	r3, [r3, #0]
 800a756:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800a75a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800a75e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a762:	2b00      	cmp	r3, #0
 800a764:	d01d      	beq.n	800a7a2 <USB_ActivateEndpoint+0x6a6>
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	4413      	add	r3, r2
 800a770:	881b      	ldrh	r3, [r3, #0]
 800a772:	b29b      	uxth	r3, r3
 800a774:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a778:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a77c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	441a      	add	r2, r3
 800a78a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800a78e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a792:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a796:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a79a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	78db      	ldrb	r3, [r3, #3]
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d024      	beq.n	800a7f4 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	881b      	ldrh	r3, [r3, #0]
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7c0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a7c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a7c8:	f083 0320 	eor.w	r3, r3, #32
 800a7cc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	441a      	add	r2, r3
 800a7da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a7de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	8013      	strh	r3, [r2, #0]
 800a7f2:	e01d      	b.n	800a830 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	4413      	add	r3, r2
 800a7fe:	881b      	ldrh	r3, [r3, #0]
 800a800:	b29b      	uxth	r3, r3
 800a802:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a806:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a80a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	441a      	add	r2, r3
 800a818:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a81c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a820:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a824:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	4413      	add	r3, r2
 800a83a:	881b      	ldrh	r3, [r3, #0]
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a846:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	441a      	add	r2, r3
 800a854:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a858:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a85c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a860:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a868:	b29b      	uxth	r3, r3
 800a86a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a86c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800a870:	4618      	mov	r0, r3
 800a872:	3774      	adds	r7, #116	@ 0x74
 800a874:	46bd      	mov	sp, r7
 800a876:	bc80      	pop	{r7}
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop

0800a87c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b08d      	sub	sp, #52	@ 0x34
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	7b1b      	ldrb	r3, [r3, #12]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	f040 808e 	bne.w	800a9ac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	785b      	ldrb	r3, [r3, #1]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d044      	beq.n	800a922 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	881b      	ldrh	r3, [r3, #0]
 800a8a4:	81bb      	strh	r3, [r7, #12]
 800a8a6:	89bb      	ldrh	r3, [r7, #12]
 800a8a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d01b      	beq.n	800a8e8 <USB_DeactivateEndpoint+0x6c>
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	4413      	add	r3, r2
 800a8ba:	881b      	ldrh	r3, [r3, #0]
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8c6:	817b      	strh	r3, [r7, #10]
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	441a      	add	r2, r3
 800a8d2:	897b      	ldrh	r3, [r7, #10]
 800a8d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4413      	add	r3, r2
 800a8f2:	881b      	ldrh	r3, [r3, #0]
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8fe:	813b      	strh	r3, [r7, #8]
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	441a      	add	r2, r3
 800a90a:	893b      	ldrh	r3, [r7, #8]
 800a90c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a910:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a914:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	8013      	strh	r3, [r2, #0]
 800a920:	e192      	b.n	800ac48 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	4413      	add	r3, r2
 800a92c:	881b      	ldrh	r3, [r3, #0]
 800a92e:	827b      	strh	r3, [r7, #18]
 800a930:	8a7b      	ldrh	r3, [r7, #18]
 800a932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a936:	2b00      	cmp	r3, #0
 800a938:	d01b      	beq.n	800a972 <USB_DeactivateEndpoint+0xf6>
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	4413      	add	r3, r2
 800a944:	881b      	ldrh	r3, [r3, #0]
 800a946:	b29b      	uxth	r3, r3
 800a948:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a94c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a950:	823b      	strh	r3, [r7, #16]
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	441a      	add	r2, r3
 800a95c:	8a3b      	ldrh	r3, [r7, #16]
 800a95e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a962:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a966:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a96a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a96e:	b29b      	uxth	r3, r3
 800a970:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	009b      	lsls	r3, r3, #2
 800a97a:	4413      	add	r3, r2
 800a97c:	881b      	ldrh	r3, [r3, #0]
 800a97e:	b29b      	uxth	r3, r3
 800a980:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a988:	81fb      	strh	r3, [r7, #14]
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	441a      	add	r2, r3
 800a994:	89fb      	ldrh	r3, [r7, #14]
 800a996:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a99a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a99e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	8013      	strh	r3, [r2, #0]
 800a9aa:	e14d      	b.n	800ac48 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	785b      	ldrb	r3, [r3, #1]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f040 80a5 	bne.w	800ab00 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	4413      	add	r3, r2
 800a9c0:	881b      	ldrh	r3, [r3, #0]
 800a9c2:	843b      	strh	r3, [r7, #32]
 800a9c4:	8c3b      	ldrh	r3, [r7, #32]
 800a9c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d01b      	beq.n	800aa06 <USB_DeactivateEndpoint+0x18a>
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	4413      	add	r3, r2
 800a9d8:	881b      	ldrh	r3, [r3, #0]
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9e4:	83fb      	strh	r3, [r7, #30]
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	441a      	add	r2, r3
 800a9f0:	8bfb      	ldrh	r3, [r7, #30]
 800a9f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a9fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	4413      	add	r3, r2
 800aa10:	881b      	ldrh	r3, [r3, #0]
 800aa12:	83bb      	strh	r3, [r7, #28]
 800aa14:	8bbb      	ldrh	r3, [r7, #28]
 800aa16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d01b      	beq.n	800aa56 <USB_DeactivateEndpoint+0x1da>
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	4413      	add	r3, r2
 800aa28:	881b      	ldrh	r3, [r3, #0]
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa34:	837b      	strh	r3, [r7, #26]
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	441a      	add	r2, r3
 800aa40:	8b7b      	ldrh	r3, [r7, #26]
 800aa42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	4413      	add	r3, r2
 800aa60:	881b      	ldrh	r3, [r3, #0]
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa6c:	833b      	strh	r3, [r7, #24]
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	441a      	add	r2, r3
 800aa78:	8b3b      	ldrh	r3, [r7, #24]
 800aa7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa86:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4413      	add	r3, r2
 800aa98:	881b      	ldrh	r3, [r3, #0]
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aaa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaa4:	82fb      	strh	r3, [r7, #22]
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	441a      	add	r2, r3
 800aab0:	8afb      	ldrh	r3, [r7, #22]
 800aab2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aab6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aaba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aabe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	4413      	add	r3, r2
 800aad0:	881b      	ldrh	r3, [r3, #0]
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aad8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aadc:	82bb      	strh	r3, [r7, #20]
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	441a      	add	r2, r3
 800aae8:	8abb      	ldrh	r3, [r7, #20]
 800aaea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aaee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aaf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aaf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	8013      	strh	r3, [r2, #0]
 800aafe:	e0a3      	b.n	800ac48 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	4413      	add	r3, r2
 800ab0a:	881b      	ldrh	r3, [r3, #0]
 800ab0c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800ab0e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ab10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d01b      	beq.n	800ab50 <USB_DeactivateEndpoint+0x2d4>
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	4413      	add	r3, r2
 800ab22:	881b      	ldrh	r3, [r3, #0]
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab2e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	441a      	add	r2, r3
 800ab3a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ab3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ab48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	4413      	add	r3, r2
 800ab5a:	881b      	ldrh	r3, [r3, #0]
 800ab5c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800ab5e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ab60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d01b      	beq.n	800aba0 <USB_DeactivateEndpoint+0x324>
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	4413      	add	r3, r2
 800ab72:	881b      	ldrh	r3, [r3, #0]
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab7e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	441a      	add	r2, r3
 800ab8a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ab8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	4413      	add	r3, r2
 800abaa:	881b      	ldrh	r3, [r3, #0]
 800abac:	b29b      	uxth	r3, r3
 800abae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abb6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	441a      	add	r2, r3
 800abc2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800abc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800abd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4413      	add	r3, r2
 800abe2:	881b      	ldrh	r3, [r3, #0]
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abee:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	441a      	add	r2, r3
 800abfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800abfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	4413      	add	r3, r2
 800ac1a:	881b      	ldrh	r3, [r3, #0]
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac26:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	441a      	add	r2, r3
 800ac32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ac34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3734      	adds	r7, #52	@ 0x34
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bc80      	pop	{r7}
 800ac52:	4770      	bx	lr

0800ac54 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b0c2      	sub	sp, #264	@ 0x108
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac62:	6018      	str	r0, [r3, #0]
 800ac64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac6c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ac6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	785b      	ldrb	r3, [r3, #1]
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	f040 86b7 	bne.w	800b9ee <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ac80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	699a      	ldr	r2, [r3, #24]
 800ac8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	691b      	ldr	r3, [r3, #16]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d908      	bls.n	800acae <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800ac9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	691b      	ldr	r3, [r3, #16]
 800aca8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800acac:	e007      	b.n	800acbe <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800acae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	699b      	ldr	r3, [r3, #24]
 800acba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800acbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	7b1b      	ldrb	r3, [r3, #12]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d13a      	bne.n	800ad44 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800acce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	6959      	ldr	r1, [r3, #20]
 800acda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	88da      	ldrh	r2, [r3, #6]
 800ace6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acea:	b29b      	uxth	r3, r3
 800acec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800acf0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800acf4:	6800      	ldr	r0, [r0, #0]
 800acf6:	f001 fc9c 	bl	800c632 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800acfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	613b      	str	r3, [r7, #16]
 800ad06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	461a      	mov	r2, r3
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	613b      	str	r3, [r7, #16]
 800ad1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	011a      	lsls	r2, r3, #4
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	4413      	add	r3, r2
 800ad30:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ad34:	60fb      	str	r3, [r7, #12]
 800ad36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad3a:	b29a      	uxth	r2, r3
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	801a      	strh	r2, [r3, #0]
 800ad40:	f000 be1f 	b.w	800b982 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800ad44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	78db      	ldrb	r3, [r3, #3]
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	f040 8462 	bne.w	800b61a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ad56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	6a1a      	ldr	r2, [r3, #32]
 800ad62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	691b      	ldr	r3, [r3, #16]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	f240 83df 	bls.w	800b532 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ad74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	4413      	add	r3, r2
 800ad8e:	881b      	ldrh	r3, [r3, #0]
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad9a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ad9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ada2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	441a      	add	r2, r3
 800adb8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800adbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800adc4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800adc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adcc:	b29b      	uxth	r3, r3
 800adce:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800add0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800add4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	6a1a      	ldr	r2, [r3, #32]
 800addc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ade0:	1ad2      	subs	r2, r2, r3
 800ade2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ade6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800adee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	4413      	add	r3, r2
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f000 81c7 	beq.w	800b1a4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ae16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	785b      	ldrb	r3, [r3, #1]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d177      	bne.n	800af22 <USB_EPStartXfer+0x2ce>
 800ae32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	461a      	mov	r2, r3
 800ae50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae52:	4413      	add	r3, r2
 800ae54:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	011a      	lsls	r2, r3, #4
 800ae64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae66:	4413      	add	r3, r2
 800ae68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800ae6c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae70:	881b      	ldrh	r3, [r3, #0]
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae78:	b29a      	uxth	r2, r3
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae7c:	801a      	strh	r2, [r3, #0]
 800ae7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae82:	2b3e      	cmp	r3, #62	@ 0x3e
 800ae84:	d921      	bls.n	800aeca <USB_EPStartXfer+0x276>
 800ae86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae8a:	095b      	lsrs	r3, r3, #5
 800ae8c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ae90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae94:	f003 031f 	and.w	r3, r3, #31
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d104      	bne.n	800aea6 <USB_EPStartXfer+0x252>
 800ae9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800aea0:	3b01      	subs	r3, #1
 800aea2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800aea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea8:	881b      	ldrh	r3, [r3, #0]
 800aeaa:	b29a      	uxth	r2, r3
 800aeac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	029b      	lsls	r3, r3, #10
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aec2:	b29a      	uxth	r2, r3
 800aec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec6:	801a      	strh	r2, [r3, #0]
 800aec8:	e050      	b.n	800af6c <USB_EPStartXfer+0x318>
 800aeca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d10a      	bne.n	800aee8 <USB_EPStartXfer+0x294>
 800aed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed4:	881b      	ldrh	r3, [r3, #0]
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aedc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aee0:	b29a      	uxth	r2, r3
 800aee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee4:	801a      	strh	r2, [r3, #0]
 800aee6:	e041      	b.n	800af6c <USB_EPStartXfer+0x318>
 800aee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeec:	085b      	lsrs	r3, r3, #1
 800aeee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800aef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aef6:	f003 0301 	and.w	r3, r3, #1
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d004      	beq.n	800af08 <USB_EPStartXfer+0x2b4>
 800aefe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800af02:	3301      	adds	r3, #1
 800af04:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800af08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af0a:	881b      	ldrh	r3, [r3, #0]
 800af0c:	b29a      	uxth	r2, r3
 800af0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800af12:	b29b      	uxth	r3, r3
 800af14:	029b      	lsls	r3, r3, #10
 800af16:	b29b      	uxth	r3, r3
 800af18:	4313      	orrs	r3, r2
 800af1a:	b29a      	uxth	r2, r3
 800af1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af1e:	801a      	strh	r2, [r3, #0]
 800af20:	e024      	b.n	800af6c <USB_EPStartXfer+0x318>
 800af22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	785b      	ldrb	r3, [r3, #1]
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d11c      	bne.n	800af6c <USB_EPStartXfer+0x318>
 800af32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af40:	b29b      	uxth	r3, r3
 800af42:	461a      	mov	r2, r3
 800af44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af46:	4413      	add	r3, r2
 800af48:	633b      	str	r3, [r7, #48]	@ 0x30
 800af4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	011a      	lsls	r2, r3, #4
 800af58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af5a:	4413      	add	r3, r2
 800af5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800af60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af66:	b29a      	uxth	r2, r3
 800af68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af6a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800af6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	895b      	ldrh	r3, [r3, #10]
 800af78:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	6959      	ldr	r1, [r3, #20]
 800af88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800af92:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800af96:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800af9a:	6800      	ldr	r0, [r0, #0]
 800af9c:	f001 fb49 	bl	800c632 <USB_WritePMA>
            ep->xfer_buff += len;
 800afa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	695a      	ldr	r2, [r3, #20]
 800afac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afb0:	441a      	add	r2, r3
 800afb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800afbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	6a1a      	ldr	r2, [r3, #32]
 800afca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	691b      	ldr	r3, [r3, #16]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d90f      	bls.n	800affa <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800afda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	6a1a      	ldr	r2, [r3, #32]
 800afe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afea:	1ad2      	subs	r2, r2, r3
 800afec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	621a      	str	r2, [r3, #32]
 800aff8:	e00e      	b.n	800b018 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800affa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800affe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	6a1b      	ldr	r3, [r3, #32]
 800b006:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b00a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b00e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2200      	movs	r2, #0
 800b016:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b01c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	785b      	ldrb	r3, [r3, #1]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d177      	bne.n	800b118 <USB_EPStartXfer+0x4c4>
 800b028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b02c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	61bb      	str	r3, [r7, #24]
 800b034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b038:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b042:	b29b      	uxth	r3, r3
 800b044:	461a      	mov	r2, r3
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	4413      	add	r3, r2
 800b04a:	61bb      	str	r3, [r7, #24]
 800b04c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	011a      	lsls	r2, r3, #4
 800b05a:	69bb      	ldr	r3, [r7, #24]
 800b05c:	4413      	add	r3, r2
 800b05e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b062:	617b      	str	r3, [r7, #20]
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	881b      	ldrh	r3, [r3, #0]
 800b068:	b29b      	uxth	r3, r3
 800b06a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b06e:	b29a      	uxth	r2, r3
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	801a      	strh	r2, [r3, #0]
 800b074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b078:	2b3e      	cmp	r3, #62	@ 0x3e
 800b07a:	d921      	bls.n	800b0c0 <USB_EPStartXfer+0x46c>
 800b07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b080:	095b      	lsrs	r3, r3, #5
 800b082:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b08a:	f003 031f 	and.w	r3, r3, #31
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d104      	bne.n	800b09c <USB_EPStartXfer+0x448>
 800b092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b096:	3b01      	subs	r3, #1
 800b098:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	881b      	ldrh	r3, [r3, #0]
 800b0a0:	b29a      	uxth	r2, r3
 800b0a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	029b      	lsls	r3, r3, #10
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	801a      	strh	r2, [r3, #0]
 800b0be:	e056      	b.n	800b16e <USB_EPStartXfer+0x51a>
 800b0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d10a      	bne.n	800b0de <USB_EPStartXfer+0x48a>
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	881b      	ldrh	r3, [r3, #0]
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0d6:	b29a      	uxth	r2, r3
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	801a      	strh	r2, [r3, #0]
 800b0dc:	e047      	b.n	800b16e <USB_EPStartXfer+0x51a>
 800b0de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0e2:	085b      	lsrs	r3, r3, #1
 800b0e4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0ec:	f003 0301 	and.w	r3, r3, #1
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d004      	beq.n	800b0fe <USB_EPStartXfer+0x4aa>
 800b0f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b0f8:	3301      	adds	r3, #1
 800b0fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	881b      	ldrh	r3, [r3, #0]
 800b102:	b29a      	uxth	r2, r3
 800b104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b108:	b29b      	uxth	r3, r3
 800b10a:	029b      	lsls	r3, r3, #10
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	4313      	orrs	r3, r2
 800b110:	b29a      	uxth	r2, r3
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	801a      	strh	r2, [r3, #0]
 800b116:	e02a      	b.n	800b16e <USB_EPStartXfer+0x51a>
 800b118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b11c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	785b      	ldrb	r3, [r3, #1]
 800b124:	2b01      	cmp	r3, #1
 800b126:	d122      	bne.n	800b16e <USB_EPStartXfer+0x51a>
 800b128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b12c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	623b      	str	r3, [r7, #32]
 800b134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b138:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b142:	b29b      	uxth	r3, r3
 800b144:	461a      	mov	r2, r3
 800b146:	6a3b      	ldr	r3, [r7, #32]
 800b148:	4413      	add	r3, r2
 800b14a:	623b      	str	r3, [r7, #32]
 800b14c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	011a      	lsls	r2, r3, #4
 800b15a:	6a3b      	ldr	r3, [r7, #32]
 800b15c:	4413      	add	r3, r2
 800b15e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b162:	61fb      	str	r3, [r7, #28]
 800b164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b168:	b29a      	uxth	r2, r3
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b16e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	891b      	ldrh	r3, [r3, #8]
 800b17a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b17e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	6959      	ldr	r1, [r3, #20]
 800b18a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b18e:	b29b      	uxth	r3, r3
 800b190:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b194:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b198:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b19c:	6800      	ldr	r0, [r0, #0]
 800b19e:	f001 fa48 	bl	800c632 <USB_WritePMA>
 800b1a2:	e3ee      	b.n	800b982 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b1a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	785b      	ldrb	r3, [r3, #1]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d177      	bne.n	800b2a4 <USB_EPStartXfer+0x650>
 800b1b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1d4:	4413      	add	r3, r2
 800b1d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	011a      	lsls	r2, r3, #4
 800b1e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1e8:	4413      	add	r3, r2
 800b1ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b1ee:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1f2:	881b      	ldrh	r3, [r3, #0]
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1fa:	b29a      	uxth	r2, r3
 800b1fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1fe:	801a      	strh	r2, [r3, #0]
 800b200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b204:	2b3e      	cmp	r3, #62	@ 0x3e
 800b206:	d921      	bls.n	800b24c <USB_EPStartXfer+0x5f8>
 800b208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b20c:	095b      	lsrs	r3, r3, #5
 800b20e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b216:	f003 031f 	and.w	r3, r3, #31
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d104      	bne.n	800b228 <USB_EPStartXfer+0x5d4>
 800b21e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b222:	3b01      	subs	r3, #1
 800b224:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b22a:	881b      	ldrh	r3, [r3, #0]
 800b22c:	b29a      	uxth	r2, r3
 800b22e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b232:	b29b      	uxth	r3, r3
 800b234:	029b      	lsls	r3, r3, #10
 800b236:	b29b      	uxth	r3, r3
 800b238:	4313      	orrs	r3, r2
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b244:	b29a      	uxth	r2, r3
 800b246:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b248:	801a      	strh	r2, [r3, #0]
 800b24a:	e056      	b.n	800b2fa <USB_EPStartXfer+0x6a6>
 800b24c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b250:	2b00      	cmp	r3, #0
 800b252:	d10a      	bne.n	800b26a <USB_EPStartXfer+0x616>
 800b254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b256:	881b      	ldrh	r3, [r3, #0]
 800b258:	b29b      	uxth	r3, r3
 800b25a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b25e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b262:	b29a      	uxth	r2, r3
 800b264:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b266:	801a      	strh	r2, [r3, #0]
 800b268:	e047      	b.n	800b2fa <USB_EPStartXfer+0x6a6>
 800b26a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b26e:	085b      	lsrs	r3, r3, #1
 800b270:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b278:	f003 0301 	and.w	r3, r3, #1
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d004      	beq.n	800b28a <USB_EPStartXfer+0x636>
 800b280:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b284:	3301      	adds	r3, #1
 800b286:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b28a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b28c:	881b      	ldrh	r3, [r3, #0]
 800b28e:	b29a      	uxth	r2, r3
 800b290:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b294:	b29b      	uxth	r3, r3
 800b296:	029b      	lsls	r3, r3, #10
 800b298:	b29b      	uxth	r3, r3
 800b29a:	4313      	orrs	r3, r2
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2a0:	801a      	strh	r2, [r3, #0]
 800b2a2:	e02a      	b.n	800b2fa <USB_EPStartXfer+0x6a6>
 800b2a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	785b      	ldrb	r3, [r3, #1]
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d122      	bne.n	800b2fa <USB_EPStartXfer+0x6a6>
 800b2b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	653b      	str	r3, [r7, #80]	@ 0x50
 800b2c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2d4:	4413      	add	r3, r2
 800b2d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b2d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	011a      	lsls	r2, r3, #4
 800b2e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2e8:	4413      	add	r3, r2
 800b2ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b2ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2f4:	b29a      	uxth	r2, r3
 800b2f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b2fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	891b      	ldrh	r3, [r3, #8]
 800b306:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b30a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b30e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	6959      	ldr	r1, [r3, #20]
 800b316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b320:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b324:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b328:	6800      	ldr	r0, [r0, #0]
 800b32a:	f001 f982 	bl	800c632 <USB_WritePMA>
            ep->xfer_buff += len;
 800b32e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b332:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	695a      	ldr	r2, [r3, #20]
 800b33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b33e:	441a      	add	r2, r3
 800b340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b34c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	6a1a      	ldr	r2, [r3, #32]
 800b358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b35c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	691b      	ldr	r3, [r3, #16]
 800b364:	429a      	cmp	r2, r3
 800b366:	d90f      	bls.n	800b388 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800b368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b36c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	6a1a      	ldr	r2, [r3, #32]
 800b374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b378:	1ad2      	subs	r2, r2, r3
 800b37a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b37e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	621a      	str	r2, [r3, #32]
 800b386:	e00e      	b.n	800b3a6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800b388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b38c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	6a1b      	ldr	r3, [r3, #32]
 800b394:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b39c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b3a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	785b      	ldrb	r3, [r3, #1]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d177      	bne.n	800b4b2 <USB_EPStartXfer+0x85e>
 800b3c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b3ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	461a      	mov	r2, r3
 800b3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3e2:	4413      	add	r3, r2
 800b3e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b3e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	011a      	lsls	r2, r3, #4
 800b3f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f6:	4413      	add	r3, r2
 800b3f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b3fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b400:	881b      	ldrh	r3, [r3, #0]
 800b402:	b29b      	uxth	r3, r3
 800b404:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b408:	b29a      	uxth	r2, r3
 800b40a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b40c:	801a      	strh	r2, [r3, #0]
 800b40e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b412:	2b3e      	cmp	r3, #62	@ 0x3e
 800b414:	d921      	bls.n	800b45a <USB_EPStartXfer+0x806>
 800b416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b41a:	095b      	lsrs	r3, r3, #5
 800b41c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b424:	f003 031f 	and.w	r3, r3, #31
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d104      	bne.n	800b436 <USB_EPStartXfer+0x7e2>
 800b42c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b430:	3b01      	subs	r3, #1
 800b432:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b438:	881b      	ldrh	r3, [r3, #0]
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b440:	b29b      	uxth	r3, r3
 800b442:	029b      	lsls	r3, r3, #10
 800b444:	b29b      	uxth	r3, r3
 800b446:	4313      	orrs	r3, r2
 800b448:	b29b      	uxth	r3, r3
 800b44a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b44e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b452:	b29a      	uxth	r2, r3
 800b454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b456:	801a      	strh	r2, [r3, #0]
 800b458:	e050      	b.n	800b4fc <USB_EPStartXfer+0x8a8>
 800b45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d10a      	bne.n	800b478 <USB_EPStartXfer+0x824>
 800b462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b464:	881b      	ldrh	r3, [r3, #0]
 800b466:	b29b      	uxth	r3, r3
 800b468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b46c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b470:	b29a      	uxth	r2, r3
 800b472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b474:	801a      	strh	r2, [r3, #0]
 800b476:	e041      	b.n	800b4fc <USB_EPStartXfer+0x8a8>
 800b478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b47c:	085b      	lsrs	r3, r3, #1
 800b47e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b486:	f003 0301 	and.w	r3, r3, #1
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d004      	beq.n	800b498 <USB_EPStartXfer+0x844>
 800b48e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b492:	3301      	adds	r3, #1
 800b494:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b49a:	881b      	ldrh	r3, [r3, #0]
 800b49c:	b29a      	uxth	r2, r3
 800b49e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	029b      	lsls	r3, r3, #10
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	b29a      	uxth	r2, r3
 800b4ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4ae:	801a      	strh	r2, [r3, #0]
 800b4b0:	e024      	b.n	800b4fc <USB_EPStartXfer+0x8a8>
 800b4b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	785b      	ldrb	r3, [r3, #1]
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d11c      	bne.n	800b4fc <USB_EPStartXfer+0x8a8>
 800b4c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4d6:	4413      	add	r3, r2
 800b4d8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b4da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	011a      	lsls	r2, r3, #4
 800b4e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4ea:	4413      	add	r3, r2
 800b4ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b4fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	895b      	ldrh	r3, [r3, #10]
 800b508:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b50c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	6959      	ldr	r1, [r3, #20]
 800b518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b522:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b526:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b52a:	6800      	ldr	r0, [r0, #0]
 800b52c:	f001 f881 	bl	800c632 <USB_WritePMA>
 800b530:	e227      	b.n	800b982 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	6a1b      	ldr	r3, [r3, #32]
 800b53e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b546:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	4413      	add	r3, r2
 800b55c:	881b      	ldrh	r3, [r3, #0]
 800b55e:	b29b      	uxth	r3, r3
 800b560:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b564:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b568:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b56c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b570:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b57a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	441a      	add	r2, r3
 800b586:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b58a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b58e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b592:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b59e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b5aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b5be:	4413      	add	r3, r2
 800b5c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b5c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	011a      	lsls	r2, r3, #4
 800b5d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b5d2:	4413      	add	r3, r2
 800b5d4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b5d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b5da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b5e2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b5e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	891b      	ldrh	r3, [r3, #8]
 800b5f0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b5f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	6959      	ldr	r1, [r3, #20]
 800b600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b604:	b29b      	uxth	r3, r3
 800b606:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b60a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b60e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b612:	6800      	ldr	r0, [r0, #0]
 800b614:	f001 f80d 	bl	800c632 <USB_WritePMA>
 800b618:	e1b3      	b.n	800b982 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b61a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b61e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	6a1a      	ldr	r2, [r3, #32]
 800b626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b62a:	1ad2      	subs	r2, r2, r3
 800b62c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b63c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b646:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	4413      	add	r3, r2
 800b652:	881b      	ldrh	r3, [r3, #0]
 800b654:	b29b      	uxth	r3, r3
 800b656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	f000 80c6 	beq.w	800b7ec <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b664:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	673b      	str	r3, [r7, #112]	@ 0x70
 800b66c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	785b      	ldrb	r3, [r3, #1]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d177      	bne.n	800b76c <USB_EPStartXfer+0xb18>
 800b67c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b680:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b68c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b696:	b29b      	uxth	r3, r3
 800b698:	461a      	mov	r2, r3
 800b69a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b69c:	4413      	add	r3, r2
 800b69e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b6a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	011a      	lsls	r2, r3, #4
 800b6ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b6b0:	4413      	add	r3, r2
 800b6b2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b6b6:	667b      	str	r3, [r7, #100]	@ 0x64
 800b6b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6ba:	881b      	ldrh	r3, [r3, #0]
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6c6:	801a      	strh	r2, [r3, #0]
 800b6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6cc:	2b3e      	cmp	r3, #62	@ 0x3e
 800b6ce:	d921      	bls.n	800b714 <USB_EPStartXfer+0xac0>
 800b6d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6d4:	095b      	lsrs	r3, r3, #5
 800b6d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b6da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6de:	f003 031f 	and.w	r3, r3, #31
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d104      	bne.n	800b6f0 <USB_EPStartXfer+0xa9c>
 800b6e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b6ea:	3b01      	subs	r3, #1
 800b6ec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b6f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6f2:	881b      	ldrh	r3, [r3, #0]
 800b6f4:	b29a      	uxth	r2, r3
 800b6f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	029b      	lsls	r3, r3, #10
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	4313      	orrs	r3, r2
 800b702:	b29b      	uxth	r3, r3
 800b704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b70c:	b29a      	uxth	r2, r3
 800b70e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b710:	801a      	strh	r2, [r3, #0]
 800b712:	e050      	b.n	800b7b6 <USB_EPStartXfer+0xb62>
 800b714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d10a      	bne.n	800b732 <USB_EPStartXfer+0xade>
 800b71c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b71e:	881b      	ldrh	r3, [r3, #0]
 800b720:	b29b      	uxth	r3, r3
 800b722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b72a:	b29a      	uxth	r2, r3
 800b72c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b72e:	801a      	strh	r2, [r3, #0]
 800b730:	e041      	b.n	800b7b6 <USB_EPStartXfer+0xb62>
 800b732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b736:	085b      	lsrs	r3, r3, #1
 800b738:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b73c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b740:	f003 0301 	and.w	r3, r3, #1
 800b744:	2b00      	cmp	r3, #0
 800b746:	d004      	beq.n	800b752 <USB_EPStartXfer+0xafe>
 800b748:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b74c:	3301      	adds	r3, #1
 800b74e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b752:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b754:	881b      	ldrh	r3, [r3, #0]
 800b756:	b29a      	uxth	r2, r3
 800b758:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	029b      	lsls	r3, r3, #10
 800b760:	b29b      	uxth	r3, r3
 800b762:	4313      	orrs	r3, r2
 800b764:	b29a      	uxth	r2, r3
 800b766:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b768:	801a      	strh	r2, [r3, #0]
 800b76a:	e024      	b.n	800b7b6 <USB_EPStartXfer+0xb62>
 800b76c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	785b      	ldrb	r3, [r3, #1]
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d11c      	bne.n	800b7b6 <USB_EPStartXfer+0xb62>
 800b77c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b780:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	461a      	mov	r2, r3
 800b78e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b790:	4413      	add	r3, r2
 800b792:	673b      	str	r3, [r7, #112]	@ 0x70
 800b794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	011a      	lsls	r2, r3, #4
 800b7a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b7a4:	4413      	add	r3, r2
 800b7a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800b7aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b7ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7b0:	b29a      	uxth	r2, r3
 800b7b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b7b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	895b      	ldrh	r3, [r3, #10]
 800b7c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b7c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	6959      	ldr	r1, [r3, #20]
 800b7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b7dc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b7e0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b7e4:	6800      	ldr	r0, [r0, #0]
 800b7e6:	f000 ff24 	bl	800c632 <USB_WritePMA>
 800b7ea:	e0ca      	b.n	800b982 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b7ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	785b      	ldrb	r3, [r3, #1]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d177      	bne.n	800b8ec <USB_EPStartXfer+0xc98>
 800b7fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b800:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b80c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b816:	b29b      	uxth	r3, r3
 800b818:	461a      	mov	r2, r3
 800b81a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b81c:	4413      	add	r3, r2
 800b81e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	011a      	lsls	r2, r3, #4
 800b82e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b830:	4413      	add	r3, r2
 800b832:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b836:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b838:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b83a:	881b      	ldrh	r3, [r3, #0]
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b842:	b29a      	uxth	r2, r3
 800b844:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b846:	801a      	strh	r2, [r3, #0]
 800b848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b84c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b84e:	d921      	bls.n	800b894 <USB_EPStartXfer+0xc40>
 800b850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b854:	095b      	lsrs	r3, r3, #5
 800b856:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b85e:	f003 031f 	and.w	r3, r3, #31
 800b862:	2b00      	cmp	r3, #0
 800b864:	d104      	bne.n	800b870 <USB_EPStartXfer+0xc1c>
 800b866:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b86a:	3b01      	subs	r3, #1
 800b86c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b870:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b872:	881b      	ldrh	r3, [r3, #0]
 800b874:	b29a      	uxth	r2, r3
 800b876:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	029b      	lsls	r3, r3, #10
 800b87e:	b29b      	uxth	r3, r3
 800b880:	4313      	orrs	r3, r2
 800b882:	b29b      	uxth	r3, r3
 800b884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b88c:	b29a      	uxth	r2, r3
 800b88e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b890:	801a      	strh	r2, [r3, #0]
 800b892:	e05c      	b.n	800b94e <USB_EPStartXfer+0xcfa>
 800b894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d10a      	bne.n	800b8b2 <USB_EPStartXfer+0xc5e>
 800b89c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b89e:	881b      	ldrh	r3, [r3, #0]
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b8ae:	801a      	strh	r2, [r3, #0]
 800b8b0:	e04d      	b.n	800b94e <USB_EPStartXfer+0xcfa>
 800b8b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8b6:	085b      	lsrs	r3, r3, #1
 800b8b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8c0:	f003 0301 	and.w	r3, r3, #1
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d004      	beq.n	800b8d2 <USB_EPStartXfer+0xc7e>
 800b8c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b8d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b8d4:	881b      	ldrh	r3, [r3, #0]
 800b8d6:	b29a      	uxth	r2, r3
 800b8d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	029b      	lsls	r3, r3, #10
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b8e8:	801a      	strh	r2, [r3, #0]
 800b8ea:	e030      	b.n	800b94e <USB_EPStartXfer+0xcfa>
 800b8ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	785b      	ldrb	r3, [r3, #1]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d128      	bne.n	800b94e <USB_EPStartXfer+0xcfa>
 800b8fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b900:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b90a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b90e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b918:	b29b      	uxth	r3, r3
 800b91a:	461a      	mov	r2, r3
 800b91c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b920:	4413      	add	r3, r2
 800b922:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b92a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	011a      	lsls	r2, r3, #4
 800b934:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b938:	4413      	add	r3, r2
 800b93a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b93e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b946:	b29a      	uxth	r2, r3
 800b948:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b94c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b94e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	891b      	ldrh	r3, [r3, #8]
 800b95a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b95e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b962:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	6959      	ldr	r1, [r3, #20]
 800b96a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b96e:	b29b      	uxth	r3, r3
 800b970:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b974:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b978:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b97c:	6800      	ldr	r0, [r0, #0]
 800b97e:	f000 fe58 	bl	800c632 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b986:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	4413      	add	r3, r2
 800b99c:	881b      	ldrh	r3, [r3, #0]
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b9a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9a8:	817b      	strh	r3, [r7, #10]
 800b9aa:	897b      	ldrh	r3, [r7, #10]
 800b9ac:	f083 0310 	eor.w	r3, r3, #16
 800b9b0:	817b      	strh	r3, [r7, #10]
 800b9b2:	897b      	ldrh	r3, [r7, #10]
 800b9b4:	f083 0320 	eor.w	r3, r3, #32
 800b9b8:	817b      	strh	r3, [r7, #10]
 800b9ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	441a      	add	r2, r3
 800b9d4:	897b      	ldrh	r3, [r7, #10]
 800b9d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b9da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b9de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	8013      	strh	r3, [r2, #0]
 800b9ea:	f000 bcde 	b.w	800c3aa <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b9ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	7b1b      	ldrb	r3, [r3, #12]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	f040 80bb 	bne.w	800bb76 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ba00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	699a      	ldr	r2, [r3, #24]
 800ba0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	691b      	ldr	r3, [r3, #16]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d917      	bls.n	800ba4c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800ba1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	691b      	ldr	r3, [r3, #16]
 800ba28:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800ba2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	699a      	ldr	r2, [r3, #24]
 800ba38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba3c:	1ad2      	subs	r2, r2, r3
 800ba3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	619a      	str	r2, [r3, #24]
 800ba4a:	e00e      	b.n	800ba6a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800ba4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	699b      	ldr	r3, [r3, #24]
 800ba58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800ba5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	2200      	movs	r2, #0
 800ba68:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ba6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ba78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	461a      	mov	r2, r3
 800ba8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ba8e:	4413      	add	r3, r2
 800ba90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ba94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	011a      	lsls	r2, r3, #4
 800baa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800baa6:	4413      	add	r3, r2
 800baa8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800baac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bab4:	881b      	ldrh	r3, [r3, #0]
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800babc:	b29a      	uxth	r2, r3
 800babe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bac2:	801a      	strh	r2, [r3, #0]
 800bac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bac8:	2b3e      	cmp	r3, #62	@ 0x3e
 800baca:	d924      	bls.n	800bb16 <USB_EPStartXfer+0xec2>
 800bacc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bad0:	095b      	lsrs	r3, r3, #5
 800bad2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bada:	f003 031f 	and.w	r3, r3, #31
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d104      	bne.n	800baec <USB_EPStartXfer+0xe98>
 800bae2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bae6:	3b01      	subs	r3, #1
 800bae8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800baec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800baf0:	881b      	ldrh	r3, [r3, #0]
 800baf2:	b29a      	uxth	r2, r3
 800baf4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	029b      	lsls	r3, r3, #10
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	4313      	orrs	r3, r2
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bb10:	801a      	strh	r2, [r3, #0]
 800bb12:	f000 bc10 	b.w	800c336 <USB_EPStartXfer+0x16e2>
 800bb16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d10c      	bne.n	800bb38 <USB_EPStartXfer+0xee4>
 800bb1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bb22:	881b      	ldrh	r3, [r3, #0]
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb2e:	b29a      	uxth	r2, r3
 800bb30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bb34:	801a      	strh	r2, [r3, #0]
 800bb36:	e3fe      	b.n	800c336 <USB_EPStartXfer+0x16e2>
 800bb38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb3c:	085b      	lsrs	r3, r3, #1
 800bb3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bb42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb46:	f003 0301 	and.w	r3, r3, #1
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d004      	beq.n	800bb58 <USB_EPStartXfer+0xf04>
 800bb4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bb52:	3301      	adds	r3, #1
 800bb54:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bb58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bb5c:	881b      	ldrh	r3, [r3, #0]
 800bb5e:	b29a      	uxth	r2, r3
 800bb60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	029b      	lsls	r3, r3, #10
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	b29a      	uxth	r2, r3
 800bb6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bb72:	801a      	strh	r2, [r3, #0]
 800bb74:	e3df      	b.n	800c336 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800bb76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	78db      	ldrb	r3, [r3, #3]
 800bb82:	2b02      	cmp	r3, #2
 800bb84:	f040 8218 	bne.w	800bfb8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bb88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	785b      	ldrb	r3, [r3, #1]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f040 809d 	bne.w	800bcd4 <USB_EPStartXfer+0x1080>
 800bb9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	461a      	mov	r2, r3
 800bbba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bbbe:	4413      	add	r3, r2
 800bbc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bbc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	011a      	lsls	r2, r3, #4
 800bbd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bbd6:	4413      	add	r3, r2
 800bbd8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bbdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bbe0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bbe4:	881b      	ldrh	r3, [r3, #0]
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bbf2:	801a      	strh	r2, [r3, #0]
 800bbf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	691b      	ldr	r3, [r3, #16]
 800bc00:	2b3e      	cmp	r3, #62	@ 0x3e
 800bc02:	d92b      	bls.n	800bc5c <USB_EPStartXfer+0x1008>
 800bc04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	691b      	ldr	r3, [r3, #16]
 800bc10:	095b      	lsrs	r3, r3, #5
 800bc12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bc16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	691b      	ldr	r3, [r3, #16]
 800bc22:	f003 031f 	and.w	r3, r3, #31
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d104      	bne.n	800bc34 <USB_EPStartXfer+0xfe0>
 800bc2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc2e:	3b01      	subs	r3, #1
 800bc30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bc34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bc38:	881b      	ldrh	r3, [r3, #0]
 800bc3a:	b29a      	uxth	r2, r3
 800bc3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	029b      	lsls	r3, r3, #10
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	4313      	orrs	r3, r2
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc52:	b29a      	uxth	r2, r3
 800bc54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bc58:	801a      	strh	r2, [r3, #0]
 800bc5a:	e070      	b.n	800bd3e <USB_EPStartXfer+0x10ea>
 800bc5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	691b      	ldr	r3, [r3, #16]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d10c      	bne.n	800bc86 <USB_EPStartXfer+0x1032>
 800bc6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bc70:	881b      	ldrh	r3, [r3, #0]
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bc82:	801a      	strh	r2, [r3, #0]
 800bc84:	e05b      	b.n	800bd3e <USB_EPStartXfer+0x10ea>
 800bc86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	691b      	ldr	r3, [r3, #16]
 800bc92:	085b      	lsrs	r3, r3, #1
 800bc94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bc98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	691b      	ldr	r3, [r3, #16]
 800bca4:	f003 0301 	and.w	r3, r3, #1
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d004      	beq.n	800bcb6 <USB_EPStartXfer+0x1062>
 800bcac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bcb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bcba:	881b      	ldrh	r3, [r3, #0]
 800bcbc:	b29a      	uxth	r2, r3
 800bcbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	029b      	lsls	r3, r3, #10
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	b29a      	uxth	r2, r3
 800bccc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bcd0:	801a      	strh	r2, [r3, #0]
 800bcd2:	e034      	b.n	800bd3e <USB_EPStartXfer+0x10ea>
 800bcd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	785b      	ldrb	r3, [r3, #1]
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d12c      	bne.n	800bd3e <USB_EPStartXfer+0x10ea>
 800bce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bce8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bcf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	461a      	mov	r2, r3
 800bd04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bd08:	4413      	add	r3, r2
 800bd0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bd0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	011a      	lsls	r2, r3, #4
 800bd1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bd20:	4413      	add	r3, r2
 800bd22:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bd26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bd2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	691b      	ldr	r3, [r3, #16]
 800bd36:	b29a      	uxth	r2, r3
 800bd38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bd3c:	801a      	strh	r2, [r3, #0]
 800bd3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bd4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	785b      	ldrb	r3, [r3, #1]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	f040 809d 	bne.w	800be98 <USB_EPStartXfer+0x1244>
 800bd5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bd6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bd82:	4413      	add	r3, r2
 800bd84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bd88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	011a      	lsls	r2, r3, #4
 800bd96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bd9a:	4413      	add	r3, r2
 800bd9c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800bda0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bda4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bda8:	881b      	ldrh	r3, [r3, #0]
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bdb0:	b29a      	uxth	r2, r3
 800bdb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bdb6:	801a      	strh	r2, [r3, #0]
 800bdb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	691b      	ldr	r3, [r3, #16]
 800bdc4:	2b3e      	cmp	r3, #62	@ 0x3e
 800bdc6:	d92b      	bls.n	800be20 <USB_EPStartXfer+0x11cc>
 800bdc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	691b      	ldr	r3, [r3, #16]
 800bdd4:	095b      	lsrs	r3, r3, #5
 800bdd6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bdda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	691b      	ldr	r3, [r3, #16]
 800bde6:	f003 031f 	and.w	r3, r3, #31
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d104      	bne.n	800bdf8 <USB_EPStartXfer+0x11a4>
 800bdee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bdf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bdfc:	881b      	ldrh	r3, [r3, #0]
 800bdfe:	b29a      	uxth	r2, r3
 800be00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be04:	b29b      	uxth	r3, r3
 800be06:	029b      	lsls	r3, r3, #10
 800be08:	b29b      	uxth	r3, r3
 800be0a:	4313      	orrs	r3, r2
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be16:	b29a      	uxth	r2, r3
 800be18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800be1c:	801a      	strh	r2, [r3, #0]
 800be1e:	e069      	b.n	800bef4 <USB_EPStartXfer+0x12a0>
 800be20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	691b      	ldr	r3, [r3, #16]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d10c      	bne.n	800be4a <USB_EPStartXfer+0x11f6>
 800be30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800be34:	881b      	ldrh	r3, [r3, #0]
 800be36:	b29b      	uxth	r3, r3
 800be38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be40:	b29a      	uxth	r2, r3
 800be42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800be46:	801a      	strh	r2, [r3, #0]
 800be48:	e054      	b.n	800bef4 <USB_EPStartXfer+0x12a0>
 800be4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	691b      	ldr	r3, [r3, #16]
 800be56:	085b      	lsrs	r3, r3, #1
 800be58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800be5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	691b      	ldr	r3, [r3, #16]
 800be68:	f003 0301 	and.w	r3, r3, #1
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d004      	beq.n	800be7a <USB_EPStartXfer+0x1226>
 800be70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be74:	3301      	adds	r3, #1
 800be76:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800be7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800be7e:	881b      	ldrh	r3, [r3, #0]
 800be80:	b29a      	uxth	r2, r3
 800be82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be86:	b29b      	uxth	r3, r3
 800be88:	029b      	lsls	r3, r3, #10
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	4313      	orrs	r3, r2
 800be8e:	b29a      	uxth	r2, r3
 800be90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800be94:	801a      	strh	r2, [r3, #0]
 800be96:	e02d      	b.n	800bef4 <USB_EPStartXfer+0x12a0>
 800be98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	785b      	ldrb	r3, [r3, #1]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d125      	bne.n	800bef4 <USB_EPStartXfer+0x12a0>
 800bea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800beac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	461a      	mov	r2, r3
 800beba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bebe:	4413      	add	r3, r2
 800bec0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	011a      	lsls	r2, r3, #4
 800bed2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bed6:	4413      	add	r3, r2
 800bed8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800bedc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	691b      	ldr	r3, [r3, #16]
 800beec:	b29a      	uxth	r2, r3
 800beee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bef2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800bef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	69db      	ldr	r3, [r3, #28]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f000 8218 	beq.w	800c336 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bf06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	4413      	add	r3, r2
 800bf20:	881b      	ldrh	r3, [r3, #0]
 800bf22:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bf26:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bf2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d005      	beq.n	800bf3e <USB_EPStartXfer+0x12ea>
 800bf32:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bf36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d10d      	bne.n	800bf5a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bf3e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bf42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	f040 81f5 	bne.w	800c336 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bf4c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bf50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	f040 81ee 	bne.w	800c336 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800bf5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	4413      	add	r3, r2
 800bf74:	881b      	ldrh	r3, [r3, #0]
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf80:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800bf84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	441a      	add	r2, r3
 800bf9e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bfa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bfa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bfaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	8013      	strh	r3, [r2, #0]
 800bfb6:	e1be      	b.n	800c336 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bfb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	78db      	ldrb	r3, [r3, #3]
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	f040 81b4 	bne.w	800c332 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800bfca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	699a      	ldr	r2, [r3, #24]
 800bfd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	691b      	ldr	r3, [r3, #16]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d917      	bls.n	800c016 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800bfe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	691b      	ldr	r3, [r3, #16]
 800bff2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800bff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bffa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	699a      	ldr	r2, [r3, #24]
 800c002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c006:	1ad2      	subs	r2, r2, r3
 800c008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c00c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	619a      	str	r2, [r3, #24]
 800c014:	e00e      	b.n	800c034 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c01a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	699b      	ldr	r3, [r3, #24]
 800c022:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800c026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c02a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	2200      	movs	r2, #0
 800c032:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	785b      	ldrb	r3, [r3, #1]
 800c040:	2b00      	cmp	r3, #0
 800c042:	f040 8085 	bne.w	800c150 <USB_EPStartXfer+0x14fc>
 800c046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c04a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c054:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c058:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c062:	b29b      	uxth	r3, r3
 800c064:	461a      	mov	r2, r3
 800c066:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c06a:	4413      	add	r3, r2
 800c06c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	011a      	lsls	r2, r3, #4
 800c07e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c082:	4413      	add	r3, r2
 800c084:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c088:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c08c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c090:	881b      	ldrh	r3, [r3, #0]
 800c092:	b29b      	uxth	r3, r3
 800c094:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c098:	b29a      	uxth	r2, r3
 800c09a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c09e:	801a      	strh	r2, [r3, #0]
 800c0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0a4:	2b3e      	cmp	r3, #62	@ 0x3e
 800c0a6:	d923      	bls.n	800c0f0 <USB_EPStartXfer+0x149c>
 800c0a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0ac:	095b      	lsrs	r3, r3, #5
 800c0ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c0b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0b6:	f003 031f 	and.w	r3, r3, #31
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d104      	bne.n	800c0c8 <USB_EPStartXfer+0x1474>
 800c0be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c0c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c0cc:	881b      	ldrh	r3, [r3, #0]
 800c0ce:	b29a      	uxth	r2, r3
 800c0d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	029b      	lsls	r3, r3, #10
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c0ec:	801a      	strh	r2, [r3, #0]
 800c0ee:	e060      	b.n	800c1b2 <USB_EPStartXfer+0x155e>
 800c0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d10c      	bne.n	800c112 <USB_EPStartXfer+0x14be>
 800c0f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c0fc:	881b      	ldrh	r3, [r3, #0]
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c108:	b29a      	uxth	r2, r3
 800c10a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c10e:	801a      	strh	r2, [r3, #0]
 800c110:	e04f      	b.n	800c1b2 <USB_EPStartXfer+0x155e>
 800c112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c116:	085b      	lsrs	r3, r3, #1
 800c118:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c120:	f003 0301 	and.w	r3, r3, #1
 800c124:	2b00      	cmp	r3, #0
 800c126:	d004      	beq.n	800c132 <USB_EPStartXfer+0x14de>
 800c128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c12c:	3301      	adds	r3, #1
 800c12e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c132:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c136:	881b      	ldrh	r3, [r3, #0]
 800c138:	b29a      	uxth	r2, r3
 800c13a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c13e:	b29b      	uxth	r3, r3
 800c140:	029b      	lsls	r3, r3, #10
 800c142:	b29b      	uxth	r3, r3
 800c144:	4313      	orrs	r3, r2
 800c146:	b29a      	uxth	r2, r3
 800c148:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c14c:	801a      	strh	r2, [r3, #0]
 800c14e:	e030      	b.n	800c1b2 <USB_EPStartXfer+0x155e>
 800c150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c154:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	785b      	ldrb	r3, [r3, #1]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d128      	bne.n	800c1b2 <USB_EPStartXfer+0x155e>
 800c160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c164:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c16e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c172:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c17c:	b29b      	uxth	r3, r3
 800c17e:	461a      	mov	r2, r3
 800c180:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c184:	4413      	add	r3, r2
 800c186:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c18a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c18e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	011a      	lsls	r2, r3, #4
 800c198:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c19c:	4413      	add	r3, r2
 800c19e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c1a2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c1a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1aa:	b29a      	uxth	r2, r3
 800c1ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c1b0:	801a      	strh	r2, [r3, #0]
 800c1b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c1c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	785b      	ldrb	r3, [r3, #1]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f040 8085 	bne.w	800c2dc <USB_EPStartXfer+0x1688>
 800c1d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c1e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c1f6:	4413      	add	r3, r2
 800c1f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c1fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	011a      	lsls	r2, r3, #4
 800c20a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c20e:	4413      	add	r3, r2
 800c210:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800c214:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c218:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c21c:	881b      	ldrh	r3, [r3, #0]
 800c21e:	b29b      	uxth	r3, r3
 800c220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c224:	b29a      	uxth	r2, r3
 800c226:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c22a:	801a      	strh	r2, [r3, #0]
 800c22c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c230:	2b3e      	cmp	r3, #62	@ 0x3e
 800c232:	d923      	bls.n	800c27c <USB_EPStartXfer+0x1628>
 800c234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c238:	095b      	lsrs	r3, r3, #5
 800c23a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c23e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c242:	f003 031f 	and.w	r3, r3, #31
 800c246:	2b00      	cmp	r3, #0
 800c248:	d104      	bne.n	800c254 <USB_EPStartXfer+0x1600>
 800c24a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c24e:	3b01      	subs	r3, #1
 800c250:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c254:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c258:	881b      	ldrh	r3, [r3, #0]
 800c25a:	b29a      	uxth	r2, r3
 800c25c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c260:	b29b      	uxth	r3, r3
 800c262:	029b      	lsls	r3, r3, #10
 800c264:	b29b      	uxth	r3, r3
 800c266:	4313      	orrs	r3, r2
 800c268:	b29b      	uxth	r3, r3
 800c26a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c26e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c272:	b29a      	uxth	r2, r3
 800c274:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c278:	801a      	strh	r2, [r3, #0]
 800c27a:	e05c      	b.n	800c336 <USB_EPStartXfer+0x16e2>
 800c27c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c280:	2b00      	cmp	r3, #0
 800c282:	d10c      	bne.n	800c29e <USB_EPStartXfer+0x164a>
 800c284:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c288:	881b      	ldrh	r3, [r3, #0]
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c294:	b29a      	uxth	r2, r3
 800c296:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c29a:	801a      	strh	r2, [r3, #0]
 800c29c:	e04b      	b.n	800c336 <USB_EPStartXfer+0x16e2>
 800c29e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2a2:	085b      	lsrs	r3, r3, #1
 800c2a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c2a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2ac:	f003 0301 	and.w	r3, r3, #1
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d004      	beq.n	800c2be <USB_EPStartXfer+0x166a>
 800c2b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c2be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c2c2:	881b      	ldrh	r3, [r3, #0]
 800c2c4:	b29a      	uxth	r2, r3
 800c2c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	029b      	lsls	r3, r3, #10
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	b29a      	uxth	r2, r3
 800c2d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c2d8:	801a      	strh	r2, [r3, #0]
 800c2da:	e02c      	b.n	800c336 <USB_EPStartXfer+0x16e2>
 800c2dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	785b      	ldrb	r3, [r3, #1]
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d124      	bne.n	800c336 <USB_EPStartXfer+0x16e2>
 800c2ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c302:	4413      	add	r3, r2
 800c304:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c30c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	011a      	lsls	r2, r3, #4
 800c316:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c31a:	4413      	add	r3, r2
 800c31c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800c320:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c328:	b29a      	uxth	r2, r3
 800c32a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c32e:	801a      	strh	r2, [r3, #0]
 800c330:	e001      	b.n	800c336 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800c332:	2301      	movs	r3, #1
 800c334:	e03a      	b.n	800c3ac <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c33a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	009b      	lsls	r3, r3, #2
 800c34e:	4413      	add	r3, r2
 800c350:	881b      	ldrh	r3, [r3, #0]
 800c352:	b29b      	uxth	r3, r3
 800c354:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c358:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c35c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c360:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c364:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c368:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c36c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c370:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c374:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c37c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	009b      	lsls	r3, r3, #2
 800c390:	441a      	add	r2, r3
 800c392:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c396:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c39a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c39e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c3aa:	2300      	movs	r3, #0
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c3b6:	b480      	push	{r7}
 800c3b8:	b085      	sub	sp, #20
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
 800c3be:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	785b      	ldrb	r3, [r3, #1]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d020      	beq.n	800c40a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	009b      	lsls	r3, r3, #2
 800c3d0:	4413      	add	r3, r2
 800c3d2:	881b      	ldrh	r3, [r3, #0]
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c3da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3de:	81bb      	strh	r3, [r7, #12]
 800c3e0:	89bb      	ldrh	r3, [r7, #12]
 800c3e2:	f083 0310 	eor.w	r3, r3, #16
 800c3e6:	81bb      	strh	r3, [r7, #12]
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	009b      	lsls	r3, r3, #2
 800c3f0:	441a      	add	r2, r3
 800c3f2:	89bb      	ldrh	r3, [r7, #12]
 800c3f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c404:	b29b      	uxth	r3, r3
 800c406:	8013      	strh	r3, [r2, #0]
 800c408:	e01f      	b.n	800c44a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	009b      	lsls	r3, r3, #2
 800c412:	4413      	add	r3, r2
 800c414:	881b      	ldrh	r3, [r3, #0]
 800c416:	b29b      	uxth	r3, r3
 800c418:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c41c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c420:	81fb      	strh	r3, [r7, #14]
 800c422:	89fb      	ldrh	r3, [r7, #14]
 800c424:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c428:	81fb      	strh	r3, [r7, #14]
 800c42a:	687a      	ldr	r2, [r7, #4]
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	009b      	lsls	r3, r3, #2
 800c432:	441a      	add	r2, r3
 800c434:	89fb      	ldrh	r3, [r7, #14]
 800c436:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c43a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c43e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c446:	b29b      	uxth	r3, r3
 800c448:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c44a:	2300      	movs	r3, #0
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3714      	adds	r7, #20
 800c450:	46bd      	mov	sp, r7
 800c452:	bc80      	pop	{r7}
 800c454:	4770      	bx	lr

0800c456 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c456:	b480      	push	{r7}
 800c458:	b087      	sub	sp, #28
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
 800c45e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	7b1b      	ldrb	r3, [r3, #12]
 800c464:	2b00      	cmp	r3, #0
 800c466:	f040 809d 	bne.w	800c5a4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	785b      	ldrb	r3, [r3, #1]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d04c      	beq.n	800c50c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	4413      	add	r3, r2
 800c47c:	881b      	ldrh	r3, [r3, #0]
 800c47e:	823b      	strh	r3, [r7, #16]
 800c480:	8a3b      	ldrh	r3, [r7, #16]
 800c482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c486:	2b00      	cmp	r3, #0
 800c488:	d01b      	beq.n	800c4c2 <USB_EPClearStall+0x6c>
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	4413      	add	r3, r2
 800c494:	881b      	ldrh	r3, [r3, #0]
 800c496:	b29b      	uxth	r3, r3
 800c498:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c49c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4a0:	81fb      	strh	r3, [r7, #14]
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	441a      	add	r2, r3
 800c4ac:	89fb      	ldrh	r3, [r7, #14]
 800c4ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c4be:	b29b      	uxth	r3, r3
 800c4c0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	78db      	ldrb	r3, [r3, #3]
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d06c      	beq.n	800c5a4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	4413      	add	r3, r2
 800c4d4:	881b      	ldrh	r3, [r3, #0]
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4e0:	81bb      	strh	r3, [r7, #12]
 800c4e2:	89bb      	ldrh	r3, [r7, #12]
 800c4e4:	f083 0320 	eor.w	r3, r3, #32
 800c4e8:	81bb      	strh	r3, [r7, #12]
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	009b      	lsls	r3, r3, #2
 800c4f2:	441a      	add	r2, r3
 800c4f4:	89bb      	ldrh	r3, [r7, #12]
 800c4f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c506:	b29b      	uxth	r3, r3
 800c508:	8013      	strh	r3, [r2, #0]
 800c50a:	e04b      	b.n	800c5a4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	009b      	lsls	r3, r3, #2
 800c514:	4413      	add	r3, r2
 800c516:	881b      	ldrh	r3, [r3, #0]
 800c518:	82fb      	strh	r3, [r7, #22]
 800c51a:	8afb      	ldrh	r3, [r7, #22]
 800c51c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c520:	2b00      	cmp	r3, #0
 800c522:	d01b      	beq.n	800c55c <USB_EPClearStall+0x106>
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	4413      	add	r3, r2
 800c52e:	881b      	ldrh	r3, [r3, #0]
 800c530:	b29b      	uxth	r3, r3
 800c532:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c53a:	82bb      	strh	r3, [r7, #20]
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	441a      	add	r2, r3
 800c546:	8abb      	ldrh	r3, [r7, #20]
 800c548:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c54c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c550:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c558:	b29b      	uxth	r3, r3
 800c55a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	4413      	add	r3, r2
 800c566:	881b      	ldrh	r3, [r3, #0]
 800c568:	b29b      	uxth	r3, r3
 800c56a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c56e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c572:	827b      	strh	r3, [r7, #18]
 800c574:	8a7b      	ldrh	r3, [r7, #18]
 800c576:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c57a:	827b      	strh	r3, [r7, #18]
 800c57c:	8a7b      	ldrh	r3, [r7, #18]
 800c57e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c582:	827b      	strh	r3, [r7, #18]
 800c584:	687a      	ldr	r2, [r7, #4]
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	441a      	add	r2, r3
 800c58e:	8a7b      	ldrh	r3, [r7, #18]
 800c590:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c594:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c598:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c59c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5a0:	b29b      	uxth	r3, r3
 800c5a2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	371c      	adds	r7, #28
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bc80      	pop	{r7}
 800c5ae:	4770      	bx	lr

0800c5b0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c5bc:	78fb      	ldrb	r3, [r7, #3]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d103      	bne.n	800c5ca <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2280      	movs	r2, #128	@ 0x80
 800c5c6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800c5ca:	2300      	movs	r3, #0
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	370c      	adds	r7, #12
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bc80      	pop	{r7}
 800c5d4:	4770      	bx	lr

0800c5d6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c5d6:	b480      	push	{r7}
 800c5d8:	b083      	sub	sp, #12
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c5de:	2300      	movs	r3, #0
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	370c      	adds	r7, #12
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bc80      	pop	{r7}
 800c5e8:	4770      	bx	lr

0800c5ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800c5ea:	b480      	push	{r7}
 800c5ec:	b083      	sub	sp, #12
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c5f2:	2300      	movs	r3, #0
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	370c      	adds	r7, #12
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bc80      	pop	{r7}
 800c5fc:	4770      	bx	lr

0800c5fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800c5fe:	b480      	push	{r7}
 800c600:	b085      	sub	sp, #20
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c610:	68fb      	ldr	r3, [r7, #12]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3714      	adds	r7, #20
 800c616:	46bd      	mov	sp, r7
 800c618:	bc80      	pop	{r7}
 800c61a:	4770      	bx	lr

0800c61c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c626:	2300      	movs	r3, #0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	370c      	adds	r7, #12
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bc80      	pop	{r7}
 800c630:	4770      	bx	lr

0800c632 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c632:	b480      	push	{r7}
 800c634:	b08b      	sub	sp, #44	@ 0x2c
 800c636:	af00      	add	r7, sp, #0
 800c638:	60f8      	str	r0, [r7, #12]
 800c63a:	60b9      	str	r1, [r7, #8]
 800c63c:	4611      	mov	r1, r2
 800c63e:	461a      	mov	r2, r3
 800c640:	460b      	mov	r3, r1
 800c642:	80fb      	strh	r3, [r7, #6]
 800c644:	4613      	mov	r3, r2
 800c646:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c648:	88bb      	ldrh	r3, [r7, #4]
 800c64a:	3301      	adds	r3, #1
 800c64c:	085b      	lsrs	r3, r3, #1
 800c64e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c658:	88fb      	ldrh	r3, [r7, #6]
 800c65a:	005a      	lsls	r2, r3, #1
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	4413      	add	r3, r2
 800c660:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c664:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c666:	69bb      	ldr	r3, [r7, #24]
 800c668:	627b      	str	r3, [r7, #36]	@ 0x24
 800c66a:	e01e      	b.n	800c6aa <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	3301      	adds	r3, #1
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	021b      	lsls	r3, r3, #8
 800c67a:	b21a      	sxth	r2, r3
 800c67c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c680:	4313      	orrs	r3, r2
 800c682:	b21b      	sxth	r3, r3
 800c684:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c686:	6a3b      	ldr	r3, [r7, #32]
 800c688:	8a7a      	ldrh	r2, [r7, #18]
 800c68a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c68c:	6a3b      	ldr	r3, [r7, #32]
 800c68e:	3302      	adds	r3, #2
 800c690:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800c692:	6a3b      	ldr	r3, [r7, #32]
 800c694:	3302      	adds	r3, #2
 800c696:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	3301      	adds	r3, #1
 800c69c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c69e:	69fb      	ldr	r3, [r7, #28]
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a6:	3b01      	subs	r3, #1
 800c6a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d1dd      	bne.n	800c66c <USB_WritePMA+0x3a>
  }
}
 800c6b0:	bf00      	nop
 800c6b2:	bf00      	nop
 800c6b4:	372c      	adds	r7, #44	@ 0x2c
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bc80      	pop	{r7}
 800c6ba:	4770      	bx	lr

0800c6bc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b08b      	sub	sp, #44	@ 0x2c
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	4611      	mov	r1, r2
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	80fb      	strh	r3, [r7, #6]
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c6d2:	88bb      	ldrh	r3, [r7, #4]
 800c6d4:	085b      	lsrs	r3, r3, #1
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c6e2:	88fb      	ldrh	r3, [r7, #6]
 800c6e4:	005a      	lsls	r2, r3, #1
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c6ee:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c6f0:	69bb      	ldr	r3, [r7, #24]
 800c6f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6f4:	e01b      	b.n	800c72e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c6f6:	6a3b      	ldr	r3, [r7, #32]
 800c6f8:	881b      	ldrh	r3, [r3, #0]
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c6fe:	6a3b      	ldr	r3, [r7, #32]
 800c700:	3302      	adds	r3, #2
 800c702:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	b2da      	uxtb	r2, r3
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	3301      	adds	r3, #1
 800c710:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	0a1b      	lsrs	r3, r3, #8
 800c716:	b2da      	uxtb	r2, r3
 800c718:	69fb      	ldr	r3, [r7, #28]
 800c71a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	3301      	adds	r3, #1
 800c720:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800c722:	6a3b      	ldr	r3, [r7, #32]
 800c724:	3302      	adds	r3, #2
 800c726:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800c728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72a:	3b01      	subs	r3, #1
 800c72c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c730:	2b00      	cmp	r3, #0
 800c732:	d1e0      	bne.n	800c6f6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c734:	88bb      	ldrh	r3, [r7, #4]
 800c736:	f003 0301 	and.w	r3, r3, #1
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d007      	beq.n	800c750 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800c740:	6a3b      	ldr	r3, [r7, #32]
 800c742:	881b      	ldrh	r3, [r3, #0]
 800c744:	b29b      	uxth	r3, r3
 800c746:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	b2da      	uxtb	r2, r3
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	701a      	strb	r2, [r3, #0]
  }
}
 800c750:	bf00      	nop
 800c752:	372c      	adds	r7, #44	@ 0x2c
 800c754:	46bd      	mov	sp, r7
 800c756:	bc80      	pop	{r7}
 800c758:	4770      	bx	lr

0800c75a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b084      	sub	sp, #16
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
 800c762:	460b      	mov	r3, r1
 800c764:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c766:	2300      	movs	r3, #0
 800c768:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	7c1b      	ldrb	r3, [r3, #16]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d115      	bne.n	800c79e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c772:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c776:	2202      	movs	r2, #2
 800c778:	2181      	movs	r1, #129	@ 0x81
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f001 fe2b 	bl	800e3d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2201      	movs	r2, #1
 800c784:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c786:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c78a:	2202      	movs	r2, #2
 800c78c:	2101      	movs	r1, #1
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f001 fe21 	bl	800e3d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2201      	movs	r2, #1
 800c798:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800c79c:	e012      	b.n	800c7c4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c79e:	2340      	movs	r3, #64	@ 0x40
 800c7a0:	2202      	movs	r2, #2
 800c7a2:	2181      	movs	r1, #129	@ 0x81
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f001 fe16 	bl	800e3d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c7b0:	2340      	movs	r3, #64	@ 0x40
 800c7b2:	2202      	movs	r2, #2
 800c7b4:	2101      	movs	r1, #1
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f001 fe0d 	bl	800e3d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2201      	movs	r2, #1
 800c7c0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c7c4:	2308      	movs	r3, #8
 800c7c6:	2203      	movs	r2, #3
 800c7c8:	2182      	movs	r1, #130	@ 0x82
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f001 fe03 	bl	800e3d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c7d6:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c7da:	f001 ff23 	bl	800e624 <USBD_static_malloc>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d102      	bne.n	800c7f6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	73fb      	strb	r3, [r7, #15]
 800c7f4:	e026      	b.n	800c844 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7fc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	2200      	movs	r2, #0
 800c80c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	2200      	movs	r2, #0
 800c814:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	7c1b      	ldrb	r3, [r3, #16]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d109      	bne.n	800c834 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c826:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c82a:	2101      	movs	r1, #1
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f001 fec3 	bl	800e5b8 <USBD_LL_PrepareReceive>
 800c832:	e007      	b.n	800c844 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c83a:	2340      	movs	r3, #64	@ 0x40
 800c83c:	2101      	movs	r1, #1
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f001 feba 	bl	800e5b8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800c844:	7bfb      	ldrb	r3, [r7, #15]
}
 800c846:	4618      	mov	r0, r3
 800c848:	3710      	adds	r7, #16
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}

0800c84e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c84e:	b580      	push	{r7, lr}
 800c850:	b084      	sub	sp, #16
 800c852:	af00      	add	r7, sp, #0
 800c854:	6078      	str	r0, [r7, #4]
 800c856:	460b      	mov	r3, r1
 800c858:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c85a:	2300      	movs	r3, #0
 800c85c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c85e:	2181      	movs	r1, #129	@ 0x81
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f001 fdde 	bl	800e422 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2200      	movs	r2, #0
 800c86a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c86c:	2101      	movs	r1, #1
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f001 fdd7 	bl	800e422 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c87c:	2182      	movs	r1, #130	@ 0x82
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f001 fdcf 	bl	800e422 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2200      	movs	r2, #0
 800c888:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c890:	2b00      	cmp	r3, #0
 800c892:	d00e      	beq.n	800c8b2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f001 fec9 	bl	800e63c <USBD_static_free>
    pdev->pClassData = NULL;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800c8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b086      	sub	sp, #24
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8cc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d039      	beq.n	800c95a <USBD_CDC_Setup+0x9e>
 800c8e6:	2b20      	cmp	r3, #32
 800c8e8:	d17f      	bne.n	800c9ea <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	88db      	ldrh	r3, [r3, #6]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d029      	beq.n	800c946 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	b25b      	sxtb	r3, r3
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	da11      	bge.n	800c920 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c902:	689b      	ldr	r3, [r3, #8]
 800c904:	683a      	ldr	r2, [r7, #0]
 800c906:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800c908:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c90a:	683a      	ldr	r2, [r7, #0]
 800c90c:	88d2      	ldrh	r2, [r2, #6]
 800c90e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c910:	6939      	ldr	r1, [r7, #16]
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	88db      	ldrh	r3, [r3, #6]
 800c916:	461a      	mov	r2, r3
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f001 f9d5 	bl	800dcc8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800c91e:	e06b      	b.n	800c9f8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	785a      	ldrb	r2, [r3, #1]
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	88db      	ldrh	r3, [r3, #6]
 800c92e:	b2da      	uxtb	r2, r3
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c936:	6939      	ldr	r1, [r7, #16]
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	88db      	ldrh	r3, [r3, #6]
 800c93c:	461a      	mov	r2, r3
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f001 f9f0 	bl	800dd24 <USBD_CtlPrepareRx>
      break;
 800c944:	e058      	b.n	800c9f8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	683a      	ldr	r2, [r7, #0]
 800c950:	7850      	ldrb	r0, [r2, #1]
 800c952:	2200      	movs	r2, #0
 800c954:	6839      	ldr	r1, [r7, #0]
 800c956:	4798      	blx	r3
      break;
 800c958:	e04e      	b.n	800c9f8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	785b      	ldrb	r3, [r3, #1]
 800c95e:	2b0b      	cmp	r3, #11
 800c960:	d02e      	beq.n	800c9c0 <USBD_CDC_Setup+0x104>
 800c962:	2b0b      	cmp	r3, #11
 800c964:	dc38      	bgt.n	800c9d8 <USBD_CDC_Setup+0x11c>
 800c966:	2b00      	cmp	r3, #0
 800c968:	d002      	beq.n	800c970 <USBD_CDC_Setup+0xb4>
 800c96a:	2b0a      	cmp	r3, #10
 800c96c:	d014      	beq.n	800c998 <USBD_CDC_Setup+0xdc>
 800c96e:	e033      	b.n	800c9d8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c976:	2b03      	cmp	r3, #3
 800c978:	d107      	bne.n	800c98a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800c97a:	f107 030c 	add.w	r3, r7, #12
 800c97e:	2202      	movs	r2, #2
 800c980:	4619      	mov	r1, r3
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f001 f9a0 	bl	800dcc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c988:	e02e      	b.n	800c9e8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800c98a:	6839      	ldr	r1, [r7, #0]
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f001 f931 	bl	800dbf4 <USBD_CtlError>
            ret = USBD_FAIL;
 800c992:	2302      	movs	r3, #2
 800c994:	75fb      	strb	r3, [r7, #23]
          break;
 800c996:	e027      	b.n	800c9e8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c99e:	2b03      	cmp	r3, #3
 800c9a0:	d107      	bne.n	800c9b2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800c9a2:	f107 030f 	add.w	r3, r7, #15
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f001 f98c 	bl	800dcc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c9b0:	e01a      	b.n	800c9e8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800c9b2:	6839      	ldr	r1, [r7, #0]
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f001 f91d 	bl	800dbf4 <USBD_CtlError>
            ret = USBD_FAIL;
 800c9ba:	2302      	movs	r3, #2
 800c9bc:	75fb      	strb	r3, [r7, #23]
          break;
 800c9be:	e013      	b.n	800c9e8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9c6:	2b03      	cmp	r3, #3
 800c9c8:	d00d      	beq.n	800c9e6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800c9ca:	6839      	ldr	r1, [r7, #0]
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f001 f911 	bl	800dbf4 <USBD_CtlError>
            ret = USBD_FAIL;
 800c9d2:	2302      	movs	r3, #2
 800c9d4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c9d6:	e006      	b.n	800c9e6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800c9d8:	6839      	ldr	r1, [r7, #0]
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f001 f90a 	bl	800dbf4 <USBD_CtlError>
          ret = USBD_FAIL;
 800c9e0:	2302      	movs	r3, #2
 800c9e2:	75fb      	strb	r3, [r7, #23]
          break;
 800c9e4:	e000      	b.n	800c9e8 <USBD_CDC_Setup+0x12c>
          break;
 800c9e6:	bf00      	nop
      }
      break;
 800c9e8:	e006      	b.n	800c9f8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c9ea:	6839      	ldr	r1, [r7, #0]
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f001 f901 	bl	800dbf4 <USBD_CtlError>
      ret = USBD_FAIL;
 800c9f2:	2302      	movs	r3, #2
 800c9f4:	75fb      	strb	r3, [r7, #23]
      break;
 800c9f6:	bf00      	nop
  }

  return ret;
 800c9f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3718      	adds	r7, #24
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}

0800ca02 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b084      	sub	sp, #16
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca14:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ca1c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d03a      	beq.n	800ca9e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ca28:	78fa      	ldrb	r2, [r7, #3]
 800ca2a:	6879      	ldr	r1, [r7, #4]
 800ca2c:	4613      	mov	r3, r2
 800ca2e:	009b      	lsls	r3, r3, #2
 800ca30:	4413      	add	r3, r2
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	440b      	add	r3, r1
 800ca36:	331c      	adds	r3, #28
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d029      	beq.n	800ca92 <USBD_CDC_DataIn+0x90>
 800ca3e:	78fa      	ldrb	r2, [r7, #3]
 800ca40:	6879      	ldr	r1, [r7, #4]
 800ca42:	4613      	mov	r3, r2
 800ca44:	009b      	lsls	r3, r3, #2
 800ca46:	4413      	add	r3, r2
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	440b      	add	r3, r1
 800ca4c:	331c      	adds	r3, #28
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	78f9      	ldrb	r1, [r7, #3]
 800ca52:	68b8      	ldr	r0, [r7, #8]
 800ca54:	460b      	mov	r3, r1
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	440b      	add	r3, r1
 800ca5a:	00db      	lsls	r3, r3, #3
 800ca5c:	4403      	add	r3, r0
 800ca5e:	3338      	adds	r3, #56	@ 0x38
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	fbb2 f1f3 	udiv	r1, r2, r3
 800ca66:	fb01 f303 	mul.w	r3, r1, r3
 800ca6a:	1ad3      	subs	r3, r2, r3
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d110      	bne.n	800ca92 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800ca70:	78fa      	ldrb	r2, [r7, #3]
 800ca72:	6879      	ldr	r1, [r7, #4]
 800ca74:	4613      	mov	r3, r2
 800ca76:	009b      	lsls	r3, r3, #2
 800ca78:	4413      	add	r3, r2
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	440b      	add	r3, r1
 800ca7e:	331c      	adds	r3, #28
 800ca80:	2200      	movs	r2, #0
 800ca82:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ca84:	78f9      	ldrb	r1, [r7, #3]
 800ca86:	2300      	movs	r3, #0
 800ca88:	2200      	movs	r2, #0
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f001 fd71 	bl	800e572 <USBD_LL_Transmit>
 800ca90:	e003      	b.n	800ca9a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2200      	movs	r2, #0
 800ca96:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	e000      	b.n	800caa0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800ca9e:	2302      	movs	r3, #2
  }
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3710      	adds	r7, #16
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	460b      	mov	r3, r1
 800cab2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800caba:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cabc:	78fb      	ldrb	r3, [r7, #3]
 800cabe:	4619      	mov	r1, r3
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f001 fd9c 	bl	800e5fe <USBD_LL_GetRxDataSize>
 800cac6:	4602      	mov	r2, r0
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d00d      	beq.n	800caf4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cade:	68db      	ldr	r3, [r3, #12]
 800cae0:	68fa      	ldr	r2, [r7, #12]
 800cae2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800cae6:	68fa      	ldr	r2, [r7, #12]
 800cae8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800caec:	4611      	mov	r1, r2
 800caee:	4798      	blx	r3

    return USBD_OK;
 800caf0:	2300      	movs	r3, #0
 800caf2:	e000      	b.n	800caf6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800caf4:	2302      	movs	r3, #2
  }
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}

0800cafe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cafe:	b580      	push	{r7, lr}
 800cb00:	b084      	sub	sp, #16
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb0c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d014      	beq.n	800cb42 <USBD_CDC_EP0_RxReady+0x44>
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800cb1e:	2bff      	cmp	r3, #255	@ 0xff
 800cb20:	d00f      	beq.n	800cb42 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cb28:	689b      	ldr	r3, [r3, #8]
 800cb2a:	68fa      	ldr	r2, [r7, #12]
 800cb2c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800cb30:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800cb32:	68fa      	ldr	r2, [r7, #12]
 800cb34:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cb38:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	22ff      	movs	r2, #255	@ 0xff
 800cb3e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800cb42:	2300      	movs	r3, #0
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3710      	adds	r7, #16
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2243      	movs	r2, #67	@ 0x43
 800cb58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800cb5a:	4b03      	ldr	r3, [pc, #12]	@ (800cb68 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	370c      	adds	r7, #12
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bc80      	pop	{r7}
 800cb64:	4770      	bx	lr
 800cb66:	bf00      	nop
 800cb68:	20000114 	.word	0x20000114

0800cb6c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2243      	movs	r2, #67	@ 0x43
 800cb78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800cb7a:	4b03      	ldr	r3, [pc, #12]	@ (800cb88 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	370c      	adds	r7, #12
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bc80      	pop	{r7}
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	200000d0 	.word	0x200000d0

0800cb8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2243      	movs	r2, #67	@ 0x43
 800cb98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800cb9a:	4b03      	ldr	r3, [pc, #12]	@ (800cba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	370c      	adds	r7, #12
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bc80      	pop	{r7}
 800cba4:	4770      	bx	lr
 800cba6:	bf00      	nop
 800cba8:	20000158 	.word	0x20000158

0800cbac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b083      	sub	sp, #12
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	220a      	movs	r2, #10
 800cbb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800cbba:	4b03      	ldr	r3, [pc, #12]	@ (800cbc8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bc80      	pop	{r7}
 800cbc4:	4770      	bx	lr
 800cbc6:	bf00      	nop
 800cbc8:	2000008c 	.word	0x2000008c

0800cbcc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b085      	sub	sp, #20
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800cbd6:	2302      	movs	r3, #2
 800cbd8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d005      	beq.n	800cbec <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	683a      	ldr	r2, [r7, #0]
 800cbe4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cbec:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3714      	adds	r7, #20
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bc80      	pop	{r7}
 800cbf6:	4770      	bx	lr

0800cbf8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b087      	sub	sp, #28
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	4613      	mov	r3, r2
 800cc04:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc0c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	68ba      	ldr	r2, [r7, #8]
 800cc12:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800cc16:	88fa      	ldrh	r2, [r7, #6]
 800cc18:	697b      	ldr	r3, [r7, #20]
 800cc1a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800cc1e:	2300      	movs	r3, #0
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	371c      	adds	r7, #28
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bc80      	pop	{r7}
 800cc28:	4770      	bx	lr

0800cc2a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800cc2a:	b480      	push	{r7}
 800cc2c:	b085      	sub	sp, #20
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
 800cc32:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc3a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	683a      	ldr	r2, [r7, #0]
 800cc40:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800cc44:	2300      	movs	r3, #0
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3714      	adds	r7, #20
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bc80      	pop	{r7}
 800cc4e:	4770      	bx	lr

0800cc50 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc5e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d017      	beq.n	800cc9a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	7c1b      	ldrb	r3, [r3, #16]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d109      	bne.n	800cc86 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cc78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cc7c:	2101      	movs	r1, #1
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f001 fc9a 	bl	800e5b8 <USBD_LL_PrepareReceive>
 800cc84:	e007      	b.n	800cc96 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cc8c:	2340      	movs	r3, #64	@ 0x40
 800cc8e:	2101      	movs	r1, #1
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f001 fc91 	bl	800e5b8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800cc96:	2300      	movs	r3, #0
 800cc98:	e000      	b.n	800cc9c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800cc9a:	2302      	movs	r3, #2
  }
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	4613      	mov	r3, r2
 800ccb0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d101      	bne.n	800ccbc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ccb8:	2302      	movs	r3, #2
 800ccba:	e01a      	b.n	800ccf2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d003      	beq.n	800ccce <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d003      	beq.n	800ccdc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	68ba      	ldr	r2, [r7, #8]
 800ccd8:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2201      	movs	r2, #1
 800cce0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	79fa      	ldrb	r2, [r7, #7]
 800cce8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ccea:	68f8      	ldr	r0, [r7, #12]
 800ccec:	f001 fafe 	bl	800e2ec <USBD_LL_Init>

  return USBD_OK;
 800ccf0:	2300      	movs	r3, #0
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3710      	adds	r7, #16
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}

0800ccfa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ccfa:	b480      	push	{r7}
 800ccfc:	b085      	sub	sp, #20
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	6078      	str	r0, [r7, #4]
 800cd02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800cd04:	2300      	movs	r3, #0
 800cd06:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d006      	beq.n	800cd1c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	683a      	ldr	r2, [r7, #0]
 800cd12:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800cd16:	2300      	movs	r3, #0
 800cd18:	73fb      	strb	r3, [r7, #15]
 800cd1a:	e001      	b.n	800cd20 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800cd1c:	2302      	movs	r3, #2
 800cd1e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cd20:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3714      	adds	r7, #20
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bc80      	pop	{r7}
 800cd2a:	4770      	bx	lr

0800cd2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f001 fb33 	bl	800e3a0 <USBD_LL_Start>

  return USBD_OK;
 800cd3a:	2300      	movs	r3, #0
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3708      	adds	r7, #8
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cd4c:	2300      	movs	r3, #0
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	370c      	adds	r7, #12
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bc80      	pop	{r7}
 800cd56:	4770      	bx	lr

0800cd58 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	460b      	mov	r3, r1
 800cd62:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cd64:	2302      	movs	r3, #2
 800cd66:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d00c      	beq.n	800cd8c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	78fa      	ldrb	r2, [r7, #3]
 800cd7c:	4611      	mov	r1, r2
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	4798      	blx	r3
 800cd82:	4603      	mov	r3, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d101      	bne.n	800cd8c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800cd8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3710      	adds	r7, #16
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b082      	sub	sp, #8
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
 800cd9e:	460b      	mov	r3, r1
 800cda0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	78fa      	ldrb	r2, [r7, #3]
 800cdac:	4611      	mov	r1, r2
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	4798      	blx	r3

  return USBD_OK;
 800cdb2:	2300      	movs	r3, #0
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3708      	adds	r7, #8
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800cdcc:	6839      	ldr	r1, [r7, #0]
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f000 fed7 	bl	800db82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cde2:	461a      	mov	r2, r3
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800cdf0:	f003 031f 	and.w	r3, r3, #31
 800cdf4:	2b02      	cmp	r3, #2
 800cdf6:	d016      	beq.n	800ce26 <USBD_LL_SetupStage+0x6a>
 800cdf8:	2b02      	cmp	r3, #2
 800cdfa:	d81c      	bhi.n	800ce36 <USBD_LL_SetupStage+0x7a>
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d002      	beq.n	800ce06 <USBD_LL_SetupStage+0x4a>
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	d008      	beq.n	800ce16 <USBD_LL_SetupStage+0x5a>
 800ce04:	e017      	b.n	800ce36 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 f9ca 	bl	800d1a8 <USBD_StdDevReq>
      break;
 800ce14:	e01a      	b.n	800ce4c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f000 fa2c 	bl	800d27c <USBD_StdItfReq>
      break;
 800ce24:	e012      	b.n	800ce4c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 fa6c 	bl	800d30c <USBD_StdEPReq>
      break;
 800ce34:	e00a      	b.n	800ce4c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800ce3c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ce40:	b2db      	uxtb	r3, r3
 800ce42:	4619      	mov	r1, r3
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f001 fb0b 	bl	800e460 <USBD_LL_StallEP>
      break;
 800ce4a:	bf00      	nop
  }

  return USBD_OK;
 800ce4c:	2300      	movs	r3, #0
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3708      	adds	r7, #8
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b086      	sub	sp, #24
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	60f8      	str	r0, [r7, #12]
 800ce5e:	460b      	mov	r3, r1
 800ce60:	607a      	str	r2, [r7, #4]
 800ce62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ce64:	7afb      	ldrb	r3, [r7, #11]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d14b      	bne.n	800cf02 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ce70:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ce78:	2b03      	cmp	r3, #3
 800ce7a:	d134      	bne.n	800cee6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	68da      	ldr	r2, [r3, #12]
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	691b      	ldr	r3, [r3, #16]
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d919      	bls.n	800cebc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	68da      	ldr	r2, [r3, #12]
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	691b      	ldr	r3, [r3, #16]
 800ce90:	1ad2      	subs	r2, r2, r3
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	68da      	ldr	r2, [r3, #12]
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d203      	bcs.n	800ceaa <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800cea6:	b29b      	uxth	r3, r3
 800cea8:	e002      	b.n	800ceb0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	6879      	ldr	r1, [r7, #4]
 800ceb4:	68f8      	ldr	r0, [r7, #12]
 800ceb6:	f000 ff53 	bl	800dd60 <USBD_CtlContinueRx>
 800ceba:	e038      	b.n	800cf2e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cec2:	691b      	ldr	r3, [r3, #16]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d00a      	beq.n	800cede <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800cece:	2b03      	cmp	r3, #3
 800ced0:	d105      	bne.n	800cede <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ced8:	691b      	ldr	r3, [r3, #16]
 800ceda:	68f8      	ldr	r0, [r7, #12]
 800cedc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800cede:	68f8      	ldr	r0, [r7, #12]
 800cee0:	f000 ff50 	bl	800dd84 <USBD_CtlSendStatus>
 800cee4:	e023      	b.n	800cf2e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ceec:	2b05      	cmp	r3, #5
 800ceee:	d11e      	bne.n	800cf2e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	2200      	movs	r2, #0
 800cef4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800cef8:	2100      	movs	r1, #0
 800cefa:	68f8      	ldr	r0, [r7, #12]
 800cefc:	f001 fab0 	bl	800e460 <USBD_LL_StallEP>
 800cf00:	e015      	b.n	800cf2e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf08:	699b      	ldr	r3, [r3, #24]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00d      	beq.n	800cf2a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800cf14:	2b03      	cmp	r3, #3
 800cf16:	d108      	bne.n	800cf2a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf1e:	699b      	ldr	r3, [r3, #24]
 800cf20:	7afa      	ldrb	r2, [r7, #11]
 800cf22:	4611      	mov	r1, r2
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	4798      	blx	r3
 800cf28:	e001      	b.n	800cf2e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800cf2a:	2302      	movs	r3, #2
 800cf2c:	e000      	b.n	800cf30 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800cf2e:	2300      	movs	r3, #0
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3718      	adds	r7, #24
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}

0800cf38 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b086      	sub	sp, #24
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	460b      	mov	r3, r1
 800cf42:	607a      	str	r2, [r7, #4]
 800cf44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800cf46:	7afb      	ldrb	r3, [r7, #11]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d17f      	bne.n	800d04c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	3314      	adds	r3, #20
 800cf50:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	d15c      	bne.n	800d016 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	68da      	ldr	r2, [r3, #12]
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	691b      	ldr	r3, [r3, #16]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d915      	bls.n	800cf94 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	68da      	ldr	r2, [r3, #12]
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	691b      	ldr	r3, [r3, #16]
 800cf70:	1ad2      	subs	r2, r2, r3
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	68db      	ldr	r3, [r3, #12]
 800cf7a:	b29b      	uxth	r3, r3
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	6879      	ldr	r1, [r7, #4]
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f000 febd 	bl	800dd00 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf86:	2300      	movs	r3, #0
 800cf88:	2200      	movs	r2, #0
 800cf8a:	2100      	movs	r1, #0
 800cf8c:	68f8      	ldr	r0, [r7, #12]
 800cf8e:	f001 fb13 	bl	800e5b8 <USBD_LL_PrepareReceive>
 800cf92:	e04e      	b.n	800d032 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	689b      	ldr	r3, [r3, #8]
 800cf98:	697a      	ldr	r2, [r7, #20]
 800cf9a:	6912      	ldr	r2, [r2, #16]
 800cf9c:	fbb3 f1f2 	udiv	r1, r3, r2
 800cfa0:	fb01 f202 	mul.w	r2, r1, r2
 800cfa4:	1a9b      	subs	r3, r3, r2
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d11c      	bne.n	800cfe4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	689a      	ldr	r2, [r3, #8]
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d316      	bcc.n	800cfe4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	689a      	ldr	r2, [r3, #8]
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d20f      	bcs.n	800cfe4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	2100      	movs	r1, #0
 800cfc8:	68f8      	ldr	r0, [r7, #12]
 800cfca:	f000 fe99 	bl	800dd00 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	2200      	movs	r2, #0
 800cfda:	2100      	movs	r1, #0
 800cfdc:	68f8      	ldr	r0, [r7, #12]
 800cfde:	f001 faeb 	bl	800e5b8 <USBD_LL_PrepareReceive>
 800cfe2:	e026      	b.n	800d032 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cfea:	68db      	ldr	r3, [r3, #12]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d00a      	beq.n	800d006 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800cff6:	2b03      	cmp	r3, #3
 800cff8:	d105      	bne.n	800d006 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	68f8      	ldr	r0, [r7, #12]
 800d004:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d006:	2180      	movs	r1, #128	@ 0x80
 800d008:	68f8      	ldr	r0, [r7, #12]
 800d00a:	f001 fa29 	bl	800e460 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800d00e:	68f8      	ldr	r0, [r7, #12]
 800d010:	f000 fecb 	bl	800ddaa <USBD_CtlReceiveStatus>
 800d014:	e00d      	b.n	800d032 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d01c:	2b04      	cmp	r3, #4
 800d01e:	d004      	beq.n	800d02a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d026:	2b00      	cmp	r3, #0
 800d028:	d103      	bne.n	800d032 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800d02a:	2180      	movs	r1, #128	@ 0x80
 800d02c:	68f8      	ldr	r0, [r7, #12]
 800d02e:	f001 fa17 	bl	800e460 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d11d      	bne.n	800d078 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800d03c:	68f8      	ldr	r0, [r7, #12]
 800d03e:	f7ff fe81 	bl	800cd44 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2200      	movs	r2, #0
 800d046:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d04a:	e015      	b.n	800d078 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d052:	695b      	ldr	r3, [r3, #20]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d00d      	beq.n	800d074 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800d05e:	2b03      	cmp	r3, #3
 800d060:	d108      	bne.n	800d074 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d068:	695b      	ldr	r3, [r3, #20]
 800d06a:	7afa      	ldrb	r2, [r7, #11]
 800d06c:	4611      	mov	r1, r2
 800d06e:	68f8      	ldr	r0, [r7, #12]
 800d070:	4798      	blx	r3
 800d072:	e001      	b.n	800d078 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d074:	2302      	movs	r3, #2
 800d076:	e000      	b.n	800d07a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3718      	adds	r7, #24
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}

0800d082 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d082:	b580      	push	{r7, lr}
 800d084:	b082      	sub	sp, #8
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d08a:	2340      	movs	r3, #64	@ 0x40
 800d08c:	2200      	movs	r2, #0
 800d08e:	2100      	movs	r1, #0
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f001 f9a0 	bl	800e3d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2201      	movs	r2, #1
 800d09a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2240      	movs	r2, #64	@ 0x40
 800d0a2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d0a6:	2340      	movs	r3, #64	@ 0x40
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	2180      	movs	r1, #128	@ 0x80
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f001 f992 	bl	800e3d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2240      	movs	r2, #64	@ 0x40
 800d0bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2201      	movs	r2, #1
 800d0c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d009      	beq.n	800d0fa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0ec:	685b      	ldr	r3, [r3, #4]
 800d0ee:	687a      	ldr	r2, [r7, #4]
 800d0f0:	6852      	ldr	r2, [r2, #4]
 800d0f2:	b2d2      	uxtb	r2, r2
 800d0f4:	4611      	mov	r1, r2
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	4798      	blx	r3
  }

  return USBD_OK;
 800d0fa:	2300      	movs	r3, #0
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3708      	adds	r7, #8
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d104:	b480      	push	{r7}
 800d106:	b083      	sub	sp, #12
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	460b      	mov	r3, r1
 800d10e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	78fa      	ldrb	r2, [r7, #3]
 800d114:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d116:	2300      	movs	r3, #0
}
 800d118:	4618      	mov	r0, r3
 800d11a:	370c      	adds	r7, #12
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bc80      	pop	{r7}
 800d120:	4770      	bx	lr

0800d122 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d122:	b480      	push	{r7}
 800d124:	b083      	sub	sp, #12
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2204      	movs	r2, #4
 800d13a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d13e:	2300      	movs	r3, #0
}
 800d140:	4618      	mov	r0, r3
 800d142:	370c      	adds	r7, #12
 800d144:	46bd      	mov	sp, r7
 800d146:	bc80      	pop	{r7}
 800d148:	4770      	bx	lr

0800d14a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d14a:	b480      	push	{r7}
 800d14c:	b083      	sub	sp, #12
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d158:	2b04      	cmp	r3, #4
 800d15a:	d105      	bne.n	800d168 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d168:	2300      	movs	r3, #0
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	370c      	adds	r7, #12
 800d16e:	46bd      	mov	sp, r7
 800d170:	bc80      	pop	{r7}
 800d172:	4770      	bx	lr

0800d174 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b082      	sub	sp, #8
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d182:	2b03      	cmp	r3, #3
 800d184:	d10b      	bne.n	800d19e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d18c:	69db      	ldr	r3, [r3, #28]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d005      	beq.n	800d19e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d198:	69db      	ldr	r3, [r3, #28]
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d19e:	2300      	movs	r3, #0
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3708      	adds	r7, #8
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b084      	sub	sp, #16
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d1be:	2b40      	cmp	r3, #64	@ 0x40
 800d1c0:	d005      	beq.n	800d1ce <USBD_StdDevReq+0x26>
 800d1c2:	2b40      	cmp	r3, #64	@ 0x40
 800d1c4:	d84f      	bhi.n	800d266 <USBD_StdDevReq+0xbe>
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d009      	beq.n	800d1de <USBD_StdDevReq+0x36>
 800d1ca:	2b20      	cmp	r3, #32
 800d1cc:	d14b      	bne.n	800d266 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1d4:	689b      	ldr	r3, [r3, #8]
 800d1d6:	6839      	ldr	r1, [r7, #0]
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	4798      	blx	r3
      break;
 800d1dc:	e048      	b.n	800d270 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	785b      	ldrb	r3, [r3, #1]
 800d1e2:	2b09      	cmp	r3, #9
 800d1e4:	d839      	bhi.n	800d25a <USBD_StdDevReq+0xb2>
 800d1e6:	a201      	add	r2, pc, #4	@ (adr r2, 800d1ec <USBD_StdDevReq+0x44>)
 800d1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ec:	0800d23d 	.word	0x0800d23d
 800d1f0:	0800d251 	.word	0x0800d251
 800d1f4:	0800d25b 	.word	0x0800d25b
 800d1f8:	0800d247 	.word	0x0800d247
 800d1fc:	0800d25b 	.word	0x0800d25b
 800d200:	0800d21f 	.word	0x0800d21f
 800d204:	0800d215 	.word	0x0800d215
 800d208:	0800d25b 	.word	0x0800d25b
 800d20c:	0800d233 	.word	0x0800d233
 800d210:	0800d229 	.word	0x0800d229
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d214:	6839      	ldr	r1, [r7, #0]
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 f9dc 	bl	800d5d4 <USBD_GetDescriptor>
          break;
 800d21c:	e022      	b.n	800d264 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d21e:	6839      	ldr	r1, [r7, #0]
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 fb3f 	bl	800d8a4 <USBD_SetAddress>
          break;
 800d226:	e01d      	b.n	800d264 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800d228:	6839      	ldr	r1, [r7, #0]
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 fb7e 	bl	800d92c <USBD_SetConfig>
          break;
 800d230:	e018      	b.n	800d264 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d232:	6839      	ldr	r1, [r7, #0]
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 fc07 	bl	800da48 <USBD_GetConfig>
          break;
 800d23a:	e013      	b.n	800d264 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d23c:	6839      	ldr	r1, [r7, #0]
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 fc37 	bl	800dab2 <USBD_GetStatus>
          break;
 800d244:	e00e      	b.n	800d264 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d246:	6839      	ldr	r1, [r7, #0]
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 fc65 	bl	800db18 <USBD_SetFeature>
          break;
 800d24e:	e009      	b.n	800d264 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d250:	6839      	ldr	r1, [r7, #0]
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f000 fc74 	bl	800db40 <USBD_ClrFeature>
          break;
 800d258:	e004      	b.n	800d264 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800d25a:	6839      	ldr	r1, [r7, #0]
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f000 fcc9 	bl	800dbf4 <USBD_CtlError>
          break;
 800d262:	bf00      	nop
      }
      break;
 800d264:	e004      	b.n	800d270 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800d266:	6839      	ldr	r1, [r7, #0]
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 fcc3 	bl	800dbf4 <USBD_CtlError>
      break;
 800d26e:	bf00      	nop
  }

  return ret;
 800d270:	7bfb      	ldrb	r3, [r7, #15]
}
 800d272:	4618      	mov	r0, r3
 800d274:	3710      	adds	r7, #16
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop

0800d27c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b084      	sub	sp, #16
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d286:	2300      	movs	r3, #0
 800d288:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d292:	2b40      	cmp	r3, #64	@ 0x40
 800d294:	d005      	beq.n	800d2a2 <USBD_StdItfReq+0x26>
 800d296:	2b40      	cmp	r3, #64	@ 0x40
 800d298:	d82e      	bhi.n	800d2f8 <USBD_StdItfReq+0x7c>
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d001      	beq.n	800d2a2 <USBD_StdItfReq+0x26>
 800d29e:	2b20      	cmp	r3, #32
 800d2a0:	d12a      	bne.n	800d2f8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2a8:	3b01      	subs	r3, #1
 800d2aa:	2b02      	cmp	r3, #2
 800d2ac:	d81d      	bhi.n	800d2ea <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	889b      	ldrh	r3, [r3, #4]
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	d813      	bhi.n	800d2e0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2be:	689b      	ldr	r3, [r3, #8]
 800d2c0:	6839      	ldr	r1, [r7, #0]
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	4798      	blx	r3
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	88db      	ldrh	r3, [r3, #6]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d110      	bne.n	800d2f4 <USBD_StdItfReq+0x78>
 800d2d2:	7bfb      	ldrb	r3, [r7, #15]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10d      	bne.n	800d2f4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f000 fd53 	bl	800dd84 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d2de:	e009      	b.n	800d2f4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800d2e0:	6839      	ldr	r1, [r7, #0]
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 fc86 	bl	800dbf4 <USBD_CtlError>
          break;
 800d2e8:	e004      	b.n	800d2f4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800d2ea:	6839      	ldr	r1, [r7, #0]
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f000 fc81 	bl	800dbf4 <USBD_CtlError>
          break;
 800d2f2:	e000      	b.n	800d2f6 <USBD_StdItfReq+0x7a>
          break;
 800d2f4:	bf00      	nop
      }
      break;
 800d2f6:	e004      	b.n	800d302 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800d2f8:	6839      	ldr	r1, [r7, #0]
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 fc7a 	bl	800dbf4 <USBD_CtlError>
      break;
 800d300:	bf00      	nop
  }

  return USBD_OK;
 800d302:	2300      	movs	r3, #0
}
 800d304:	4618      	mov	r0, r3
 800d306:	3710      	adds	r7, #16
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b084      	sub	sp, #16
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d316:	2300      	movs	r3, #0
 800d318:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	889b      	ldrh	r3, [r3, #4]
 800d31e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d328:	2b40      	cmp	r3, #64	@ 0x40
 800d32a:	d007      	beq.n	800d33c <USBD_StdEPReq+0x30>
 800d32c:	2b40      	cmp	r3, #64	@ 0x40
 800d32e:	f200 8146 	bhi.w	800d5be <USBD_StdEPReq+0x2b2>
 800d332:	2b00      	cmp	r3, #0
 800d334:	d00a      	beq.n	800d34c <USBD_StdEPReq+0x40>
 800d336:	2b20      	cmp	r3, #32
 800d338:	f040 8141 	bne.w	800d5be <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d342:	689b      	ldr	r3, [r3, #8]
 800d344:	6839      	ldr	r1, [r7, #0]
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	4798      	blx	r3
      break;
 800d34a:	e13d      	b.n	800d5c8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d354:	2b20      	cmp	r3, #32
 800d356:	d10a      	bne.n	800d36e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	6839      	ldr	r1, [r7, #0]
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	4798      	blx	r3
 800d366:	4603      	mov	r3, r0
 800d368:	73fb      	strb	r3, [r7, #15]

        return ret;
 800d36a:	7bfb      	ldrb	r3, [r7, #15]
 800d36c:	e12d      	b.n	800d5ca <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	785b      	ldrb	r3, [r3, #1]
 800d372:	2b03      	cmp	r3, #3
 800d374:	d007      	beq.n	800d386 <USBD_StdEPReq+0x7a>
 800d376:	2b03      	cmp	r3, #3
 800d378:	f300 811b 	bgt.w	800d5b2 <USBD_StdEPReq+0x2a6>
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d072      	beq.n	800d466 <USBD_StdEPReq+0x15a>
 800d380:	2b01      	cmp	r3, #1
 800d382:	d03a      	beq.n	800d3fa <USBD_StdEPReq+0xee>
 800d384:	e115      	b.n	800d5b2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d38c:	2b02      	cmp	r3, #2
 800d38e:	d002      	beq.n	800d396 <USBD_StdEPReq+0x8a>
 800d390:	2b03      	cmp	r3, #3
 800d392:	d015      	beq.n	800d3c0 <USBD_StdEPReq+0xb4>
 800d394:	e02b      	b.n	800d3ee <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d396:	7bbb      	ldrb	r3, [r7, #14]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d00c      	beq.n	800d3b6 <USBD_StdEPReq+0xaa>
 800d39c:	7bbb      	ldrb	r3, [r7, #14]
 800d39e:	2b80      	cmp	r3, #128	@ 0x80
 800d3a0:	d009      	beq.n	800d3b6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d3a2:	7bbb      	ldrb	r3, [r7, #14]
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f001 f85a 	bl	800e460 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d3ac:	2180      	movs	r1, #128	@ 0x80
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f001 f856 	bl	800e460 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d3b4:	e020      	b.n	800d3f8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800d3b6:	6839      	ldr	r1, [r7, #0]
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f000 fc1b 	bl	800dbf4 <USBD_CtlError>
              break;
 800d3be:	e01b      	b.n	800d3f8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	885b      	ldrh	r3, [r3, #2]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d10e      	bne.n	800d3e6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800d3c8:	7bbb      	ldrb	r3, [r7, #14]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00b      	beq.n	800d3e6 <USBD_StdEPReq+0xda>
 800d3ce:	7bbb      	ldrb	r3, [r7, #14]
 800d3d0:	2b80      	cmp	r3, #128	@ 0x80
 800d3d2:	d008      	beq.n	800d3e6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	88db      	ldrh	r3, [r3, #6]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d104      	bne.n	800d3e6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800d3dc:	7bbb      	ldrb	r3, [r7, #14]
 800d3de:	4619      	mov	r1, r3
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f001 f83d 	bl	800e460 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f000 fccc 	bl	800dd84 <USBD_CtlSendStatus>

              break;
 800d3ec:	e004      	b.n	800d3f8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800d3ee:	6839      	ldr	r1, [r7, #0]
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f000 fbff 	bl	800dbf4 <USBD_CtlError>
              break;
 800d3f6:	bf00      	nop
          }
          break;
 800d3f8:	e0e0      	b.n	800d5bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d400:	2b02      	cmp	r3, #2
 800d402:	d002      	beq.n	800d40a <USBD_StdEPReq+0xfe>
 800d404:	2b03      	cmp	r3, #3
 800d406:	d015      	beq.n	800d434 <USBD_StdEPReq+0x128>
 800d408:	e026      	b.n	800d458 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d40a:	7bbb      	ldrb	r3, [r7, #14]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d00c      	beq.n	800d42a <USBD_StdEPReq+0x11e>
 800d410:	7bbb      	ldrb	r3, [r7, #14]
 800d412:	2b80      	cmp	r3, #128	@ 0x80
 800d414:	d009      	beq.n	800d42a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d416:	7bbb      	ldrb	r3, [r7, #14]
 800d418:	4619      	mov	r1, r3
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f001 f820 	bl	800e460 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d420:	2180      	movs	r1, #128	@ 0x80
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f001 f81c 	bl	800e460 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d428:	e01c      	b.n	800d464 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800d42a:	6839      	ldr	r1, [r7, #0]
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f000 fbe1 	bl	800dbf4 <USBD_CtlError>
              break;
 800d432:	e017      	b.n	800d464 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	885b      	ldrh	r3, [r3, #2]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d112      	bne.n	800d462 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d43c:	7bbb      	ldrb	r3, [r7, #14]
 800d43e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d442:	2b00      	cmp	r3, #0
 800d444:	d004      	beq.n	800d450 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800d446:	7bbb      	ldrb	r3, [r7, #14]
 800d448:	4619      	mov	r1, r3
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f001 f827 	bl	800e49e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 fc97 	bl	800dd84 <USBD_CtlSendStatus>
              }
              break;
 800d456:	e004      	b.n	800d462 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800d458:	6839      	ldr	r1, [r7, #0]
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f000 fbca 	bl	800dbf4 <USBD_CtlError>
              break;
 800d460:	e000      	b.n	800d464 <USBD_StdEPReq+0x158>
              break;
 800d462:	bf00      	nop
          }
          break;
 800d464:	e0aa      	b.n	800d5bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d46c:	2b02      	cmp	r3, #2
 800d46e:	d002      	beq.n	800d476 <USBD_StdEPReq+0x16a>
 800d470:	2b03      	cmp	r3, #3
 800d472:	d032      	beq.n	800d4da <USBD_StdEPReq+0x1ce>
 800d474:	e097      	b.n	800d5a6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d476:	7bbb      	ldrb	r3, [r7, #14]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d007      	beq.n	800d48c <USBD_StdEPReq+0x180>
 800d47c:	7bbb      	ldrb	r3, [r7, #14]
 800d47e:	2b80      	cmp	r3, #128	@ 0x80
 800d480:	d004      	beq.n	800d48c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800d482:	6839      	ldr	r1, [r7, #0]
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 fbb5 	bl	800dbf4 <USBD_CtlError>
                break;
 800d48a:	e091      	b.n	800d5b0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d48c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d490:	2b00      	cmp	r3, #0
 800d492:	da0b      	bge.n	800d4ac <USBD_StdEPReq+0x1a0>
 800d494:	7bbb      	ldrb	r3, [r7, #14]
 800d496:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d49a:	4613      	mov	r3, r2
 800d49c:	009b      	lsls	r3, r3, #2
 800d49e:	4413      	add	r3, r2
 800d4a0:	009b      	lsls	r3, r3, #2
 800d4a2:	3310      	adds	r3, #16
 800d4a4:	687a      	ldr	r2, [r7, #4]
 800d4a6:	4413      	add	r3, r2
 800d4a8:	3304      	adds	r3, #4
 800d4aa:	e00b      	b.n	800d4c4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d4ac:	7bbb      	ldrb	r3, [r7, #14]
 800d4ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d4b2:	4613      	mov	r3, r2
 800d4b4:	009b      	lsls	r3, r3, #2
 800d4b6:	4413      	add	r3, r2
 800d4b8:	009b      	lsls	r3, r3, #2
 800d4ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	4413      	add	r3, r2
 800d4c2:	3304      	adds	r3, #4
 800d4c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	2202      	movs	r2, #2
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f000 fbf8 	bl	800dcc8 <USBD_CtlSendData>
              break;
 800d4d8:	e06a      	b.n	800d5b0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d4da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	da11      	bge.n	800d506 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d4e2:	7bbb      	ldrb	r3, [r7, #14]
 800d4e4:	f003 020f 	and.w	r2, r3, #15
 800d4e8:	6879      	ldr	r1, [r7, #4]
 800d4ea:	4613      	mov	r3, r2
 800d4ec:	009b      	lsls	r3, r3, #2
 800d4ee:	4413      	add	r3, r2
 800d4f0:	009b      	lsls	r3, r3, #2
 800d4f2:	440b      	add	r3, r1
 800d4f4:	3318      	adds	r3, #24
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d117      	bne.n	800d52c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800d4fc:	6839      	ldr	r1, [r7, #0]
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 fb78 	bl	800dbf4 <USBD_CtlError>
                  break;
 800d504:	e054      	b.n	800d5b0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d506:	7bbb      	ldrb	r3, [r7, #14]
 800d508:	f003 020f 	and.w	r2, r3, #15
 800d50c:	6879      	ldr	r1, [r7, #4]
 800d50e:	4613      	mov	r3, r2
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	4413      	add	r3, r2
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	440b      	add	r3, r1
 800d518:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d104      	bne.n	800d52c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800d522:	6839      	ldr	r1, [r7, #0]
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f000 fb65 	bl	800dbf4 <USBD_CtlError>
                  break;
 800d52a:	e041      	b.n	800d5b0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d52c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d530:	2b00      	cmp	r3, #0
 800d532:	da0b      	bge.n	800d54c <USBD_StdEPReq+0x240>
 800d534:	7bbb      	ldrb	r3, [r7, #14]
 800d536:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d53a:	4613      	mov	r3, r2
 800d53c:	009b      	lsls	r3, r3, #2
 800d53e:	4413      	add	r3, r2
 800d540:	009b      	lsls	r3, r3, #2
 800d542:	3310      	adds	r3, #16
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	4413      	add	r3, r2
 800d548:	3304      	adds	r3, #4
 800d54a:	e00b      	b.n	800d564 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d54c:	7bbb      	ldrb	r3, [r7, #14]
 800d54e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d552:	4613      	mov	r3, r2
 800d554:	009b      	lsls	r3, r3, #2
 800d556:	4413      	add	r3, r2
 800d558:	009b      	lsls	r3, r3, #2
 800d55a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	4413      	add	r3, r2
 800d562:	3304      	adds	r3, #4
 800d564:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d566:	7bbb      	ldrb	r3, [r7, #14]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d002      	beq.n	800d572 <USBD_StdEPReq+0x266>
 800d56c:	7bbb      	ldrb	r3, [r7, #14]
 800d56e:	2b80      	cmp	r3, #128	@ 0x80
 800d570:	d103      	bne.n	800d57a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	2200      	movs	r2, #0
 800d576:	601a      	str	r2, [r3, #0]
 800d578:	e00e      	b.n	800d598 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800d57a:	7bbb      	ldrb	r3, [r7, #14]
 800d57c:	4619      	mov	r1, r3
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 ffac 	bl	800e4dc <USBD_LL_IsStallEP>
 800d584:	4603      	mov	r3, r0
 800d586:	2b00      	cmp	r3, #0
 800d588:	d003      	beq.n	800d592 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	2201      	movs	r2, #1
 800d58e:	601a      	str	r2, [r3, #0]
 800d590:	e002      	b.n	800d598 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	2200      	movs	r2, #0
 800d596:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	2202      	movs	r2, #2
 800d59c:	4619      	mov	r1, r3
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f000 fb92 	bl	800dcc8 <USBD_CtlSendData>
              break;
 800d5a4:	e004      	b.n	800d5b0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800d5a6:	6839      	ldr	r1, [r7, #0]
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f000 fb23 	bl	800dbf4 <USBD_CtlError>
              break;
 800d5ae:	bf00      	nop
          }
          break;
 800d5b0:	e004      	b.n	800d5bc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800d5b2:	6839      	ldr	r1, [r7, #0]
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f000 fb1d 	bl	800dbf4 <USBD_CtlError>
          break;
 800d5ba:	bf00      	nop
      }
      break;
 800d5bc:	e004      	b.n	800d5c8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800d5be:	6839      	ldr	r1, [r7, #0]
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f000 fb17 	bl	800dbf4 <USBD_CtlError>
      break;
 800d5c6:	bf00      	nop
  }

  return ret;
 800d5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3710      	adds	r7, #16
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
	...

0800d5d4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	885b      	ldrh	r3, [r3, #2]
 800d5ee:	0a1b      	lsrs	r3, r3, #8
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	3b01      	subs	r3, #1
 800d5f4:	2b06      	cmp	r3, #6
 800d5f6:	f200 8128 	bhi.w	800d84a <USBD_GetDescriptor+0x276>
 800d5fa:	a201      	add	r2, pc, #4	@ (adr r2, 800d600 <USBD_GetDescriptor+0x2c>)
 800d5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d600:	0800d61d 	.word	0x0800d61d
 800d604:	0800d635 	.word	0x0800d635
 800d608:	0800d675 	.word	0x0800d675
 800d60c:	0800d84b 	.word	0x0800d84b
 800d610:	0800d84b 	.word	0x0800d84b
 800d614:	0800d7eb 	.word	0x0800d7eb
 800d618:	0800d817 	.word	0x0800d817
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	7c12      	ldrb	r2, [r2, #16]
 800d628:	f107 0108 	add.w	r1, r7, #8
 800d62c:	4610      	mov	r0, r2
 800d62e:	4798      	blx	r3
 800d630:	60f8      	str	r0, [r7, #12]
      break;
 800d632:	e112      	b.n	800d85a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	7c1b      	ldrb	r3, [r3, #16]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d10d      	bne.n	800d658 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d644:	f107 0208 	add.w	r2, r7, #8
 800d648:	4610      	mov	r0, r2
 800d64a:	4798      	blx	r3
 800d64c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	3301      	adds	r3, #1
 800d652:	2202      	movs	r2, #2
 800d654:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d656:	e100      	b.n	800d85a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d65e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d660:	f107 0208 	add.w	r2, r7, #8
 800d664:	4610      	mov	r0, r2
 800d666:	4798      	blx	r3
 800d668:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	3301      	adds	r3, #1
 800d66e:	2202      	movs	r2, #2
 800d670:	701a      	strb	r2, [r3, #0]
      break;
 800d672:	e0f2      	b.n	800d85a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	885b      	ldrh	r3, [r3, #2]
 800d678:	b2db      	uxtb	r3, r3
 800d67a:	2b05      	cmp	r3, #5
 800d67c:	f200 80ac 	bhi.w	800d7d8 <USBD_GetDescriptor+0x204>
 800d680:	a201      	add	r2, pc, #4	@ (adr r2, 800d688 <USBD_GetDescriptor+0xb4>)
 800d682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d686:	bf00      	nop
 800d688:	0800d6a1 	.word	0x0800d6a1
 800d68c:	0800d6d5 	.word	0x0800d6d5
 800d690:	0800d709 	.word	0x0800d709
 800d694:	0800d73d 	.word	0x0800d73d
 800d698:	0800d771 	.word	0x0800d771
 800d69c:	0800d7a5 	.word	0x0800d7a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d00b      	beq.n	800d6c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	687a      	ldr	r2, [r7, #4]
 800d6b6:	7c12      	ldrb	r2, [r2, #16]
 800d6b8:	f107 0108 	add.w	r1, r7, #8
 800d6bc:	4610      	mov	r0, r2
 800d6be:	4798      	blx	r3
 800d6c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6c2:	e091      	b.n	800d7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d6c4:	6839      	ldr	r1, [r7, #0]
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 fa94 	bl	800dbf4 <USBD_CtlError>
            err++;
 800d6cc:	7afb      	ldrb	r3, [r7, #11]
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	72fb      	strb	r3, [r7, #11]
          break;
 800d6d2:	e089      	b.n	800d7e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d6da:	689b      	ldr	r3, [r3, #8]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d00b      	beq.n	800d6f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d6e6:	689b      	ldr	r3, [r3, #8]
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	7c12      	ldrb	r2, [r2, #16]
 800d6ec:	f107 0108 	add.w	r1, r7, #8
 800d6f0:	4610      	mov	r0, r2
 800d6f2:	4798      	blx	r3
 800d6f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6f6:	e077      	b.n	800d7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d6f8:	6839      	ldr	r1, [r7, #0]
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 fa7a 	bl	800dbf4 <USBD_CtlError>
            err++;
 800d700:	7afb      	ldrb	r3, [r7, #11]
 800d702:	3301      	adds	r3, #1
 800d704:	72fb      	strb	r3, [r7, #11]
          break;
 800d706:	e06f      	b.n	800d7e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d00b      	beq.n	800d72c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d71a:	68db      	ldr	r3, [r3, #12]
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	7c12      	ldrb	r2, [r2, #16]
 800d720:	f107 0108 	add.w	r1, r7, #8
 800d724:	4610      	mov	r0, r2
 800d726:	4798      	blx	r3
 800d728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d72a:	e05d      	b.n	800d7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d72c:	6839      	ldr	r1, [r7, #0]
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 fa60 	bl	800dbf4 <USBD_CtlError>
            err++;
 800d734:	7afb      	ldrb	r3, [r7, #11]
 800d736:	3301      	adds	r3, #1
 800d738:	72fb      	strb	r3, [r7, #11]
          break;
 800d73a:	e055      	b.n	800d7e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d742:	691b      	ldr	r3, [r3, #16]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d00b      	beq.n	800d760 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d74e:	691b      	ldr	r3, [r3, #16]
 800d750:	687a      	ldr	r2, [r7, #4]
 800d752:	7c12      	ldrb	r2, [r2, #16]
 800d754:	f107 0108 	add.w	r1, r7, #8
 800d758:	4610      	mov	r0, r2
 800d75a:	4798      	blx	r3
 800d75c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d75e:	e043      	b.n	800d7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d760:	6839      	ldr	r1, [r7, #0]
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f000 fa46 	bl	800dbf4 <USBD_CtlError>
            err++;
 800d768:	7afb      	ldrb	r3, [r7, #11]
 800d76a:	3301      	adds	r3, #1
 800d76c:	72fb      	strb	r3, [r7, #11]
          break;
 800d76e:	e03b      	b.n	800d7e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d776:	695b      	ldr	r3, [r3, #20]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d00b      	beq.n	800d794 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d782:	695b      	ldr	r3, [r3, #20]
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	7c12      	ldrb	r2, [r2, #16]
 800d788:	f107 0108 	add.w	r1, r7, #8
 800d78c:	4610      	mov	r0, r2
 800d78e:	4798      	blx	r3
 800d790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d792:	e029      	b.n	800d7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d794:	6839      	ldr	r1, [r7, #0]
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f000 fa2c 	bl	800dbf4 <USBD_CtlError>
            err++;
 800d79c:	7afb      	ldrb	r3, [r7, #11]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	72fb      	strb	r3, [r7, #11]
          break;
 800d7a2:	e021      	b.n	800d7e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d7aa:	699b      	ldr	r3, [r3, #24]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d00b      	beq.n	800d7c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800d7b6:	699b      	ldr	r3, [r3, #24]
 800d7b8:	687a      	ldr	r2, [r7, #4]
 800d7ba:	7c12      	ldrb	r2, [r2, #16]
 800d7bc:	f107 0108 	add.w	r1, r7, #8
 800d7c0:	4610      	mov	r0, r2
 800d7c2:	4798      	blx	r3
 800d7c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7c6:	e00f      	b.n	800d7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7c8:	6839      	ldr	r1, [r7, #0]
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f000 fa12 	bl	800dbf4 <USBD_CtlError>
            err++;
 800d7d0:	7afb      	ldrb	r3, [r7, #11]
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	72fb      	strb	r3, [r7, #11]
          break;
 800d7d6:	e007      	b.n	800d7e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800d7d8:	6839      	ldr	r1, [r7, #0]
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f000 fa0a 	bl	800dbf4 <USBD_CtlError>
          err++;
 800d7e0:	7afb      	ldrb	r3, [r7, #11]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800d7e6:	e038      	b.n	800d85a <USBD_GetDescriptor+0x286>
 800d7e8:	e037      	b.n	800d85a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	7c1b      	ldrb	r3, [r3, #16]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d109      	bne.n	800d806 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7fa:	f107 0208 	add.w	r2, r7, #8
 800d7fe:	4610      	mov	r0, r2
 800d800:	4798      	blx	r3
 800d802:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d804:	e029      	b.n	800d85a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d806:	6839      	ldr	r1, [r7, #0]
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f000 f9f3 	bl	800dbf4 <USBD_CtlError>
        err++;
 800d80e:	7afb      	ldrb	r3, [r7, #11]
 800d810:	3301      	adds	r3, #1
 800d812:	72fb      	strb	r3, [r7, #11]
      break;
 800d814:	e021      	b.n	800d85a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	7c1b      	ldrb	r3, [r3, #16]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d10d      	bne.n	800d83a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d826:	f107 0208 	add.w	r2, r7, #8
 800d82a:	4610      	mov	r0, r2
 800d82c:	4798      	blx	r3
 800d82e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	3301      	adds	r3, #1
 800d834:	2207      	movs	r2, #7
 800d836:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d838:	e00f      	b.n	800d85a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d83a:	6839      	ldr	r1, [r7, #0]
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f000 f9d9 	bl	800dbf4 <USBD_CtlError>
        err++;
 800d842:	7afb      	ldrb	r3, [r7, #11]
 800d844:	3301      	adds	r3, #1
 800d846:	72fb      	strb	r3, [r7, #11]
      break;
 800d848:	e007      	b.n	800d85a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d84a:	6839      	ldr	r1, [r7, #0]
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f000 f9d1 	bl	800dbf4 <USBD_CtlError>
      err++;
 800d852:	7afb      	ldrb	r3, [r7, #11]
 800d854:	3301      	adds	r3, #1
 800d856:	72fb      	strb	r3, [r7, #11]
      break;
 800d858:	bf00      	nop
  }

  if (err != 0U)
 800d85a:	7afb      	ldrb	r3, [r7, #11]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d11c      	bne.n	800d89a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800d860:	893b      	ldrh	r3, [r7, #8]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d011      	beq.n	800d88a <USBD_GetDescriptor+0x2b6>
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	88db      	ldrh	r3, [r3, #6]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d00d      	beq.n	800d88a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	88da      	ldrh	r2, [r3, #6]
 800d872:	893b      	ldrh	r3, [r7, #8]
 800d874:	4293      	cmp	r3, r2
 800d876:	bf28      	it	cs
 800d878:	4613      	movcs	r3, r2
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d87e:	893b      	ldrh	r3, [r7, #8]
 800d880:	461a      	mov	r2, r3
 800d882:	68f9      	ldr	r1, [r7, #12]
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 fa1f 	bl	800dcc8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	88db      	ldrh	r3, [r3, #6]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d104      	bne.n	800d89c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f000 fa76 	bl	800dd84 <USBD_CtlSendStatus>
 800d898:	e000      	b.n	800d89c <USBD_GetDescriptor+0x2c8>
    return;
 800d89a:	bf00      	nop
    }
  }
}
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop

0800d8a4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b084      	sub	sp, #16
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	889b      	ldrh	r3, [r3, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d130      	bne.n	800d918 <USBD_SetAddress+0x74>
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	88db      	ldrh	r3, [r3, #6]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d12c      	bne.n	800d918 <USBD_SetAddress+0x74>
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	885b      	ldrh	r3, [r3, #2]
 800d8c2:	2b7f      	cmp	r3, #127	@ 0x7f
 800d8c4:	d828      	bhi.n	800d918 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	885b      	ldrh	r3, [r3, #2]
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8d8:	2b03      	cmp	r3, #3
 800d8da:	d104      	bne.n	800d8e6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800d8dc:	6839      	ldr	r1, [r7, #0]
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f000 f988 	bl	800dbf4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8e4:	e01d      	b.n	800d922 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	7bfa      	ldrb	r2, [r7, #15]
 800d8ea:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d8ee:	7bfb      	ldrb	r3, [r7, #15]
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 fe1e 	bl	800e534 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 fa43 	bl	800dd84 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d8fe:	7bfb      	ldrb	r3, [r7, #15]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d004      	beq.n	800d90e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2202      	movs	r2, #2
 800d908:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d90c:	e009      	b.n	800d922 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2201      	movs	r2, #1
 800d912:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d916:	e004      	b.n	800d922 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d918:	6839      	ldr	r1, [r7, #0]
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f000 f96a 	bl	800dbf4 <USBD_CtlError>
  }
}
 800d920:	bf00      	nop
 800d922:	bf00      	nop
 800d924:	3710      	adds	r7, #16
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}
	...

0800d92c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	885b      	ldrh	r3, [r3, #2]
 800d93a:	b2da      	uxtb	r2, r3
 800d93c:	4b41      	ldr	r3, [pc, #260]	@ (800da44 <USBD_SetConfig+0x118>)
 800d93e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d940:	4b40      	ldr	r3, [pc, #256]	@ (800da44 <USBD_SetConfig+0x118>)
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	2b01      	cmp	r3, #1
 800d946:	d904      	bls.n	800d952 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d948:	6839      	ldr	r1, [r7, #0]
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f000 f952 	bl	800dbf4 <USBD_CtlError>
 800d950:	e075      	b.n	800da3e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d958:	2b02      	cmp	r3, #2
 800d95a:	d002      	beq.n	800d962 <USBD_SetConfig+0x36>
 800d95c:	2b03      	cmp	r3, #3
 800d95e:	d023      	beq.n	800d9a8 <USBD_SetConfig+0x7c>
 800d960:	e062      	b.n	800da28 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800d962:	4b38      	ldr	r3, [pc, #224]	@ (800da44 <USBD_SetConfig+0x118>)
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d01a      	beq.n	800d9a0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800d96a:	4b36      	ldr	r3, [pc, #216]	@ (800da44 <USBD_SetConfig+0x118>)
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	461a      	mov	r2, r3
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2203      	movs	r2, #3
 800d978:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d97c:	4b31      	ldr	r3, [pc, #196]	@ (800da44 <USBD_SetConfig+0x118>)
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	4619      	mov	r1, r3
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f7ff f9e8 	bl	800cd58 <USBD_SetClassConfig>
 800d988:	4603      	mov	r3, r0
 800d98a:	2b02      	cmp	r3, #2
 800d98c:	d104      	bne.n	800d998 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800d98e:	6839      	ldr	r1, [r7, #0]
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f000 f92f 	bl	800dbf4 <USBD_CtlError>
            return;
 800d996:	e052      	b.n	800da3e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f000 f9f3 	bl	800dd84 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d99e:	e04e      	b.n	800da3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f000 f9ef 	bl	800dd84 <USBD_CtlSendStatus>
        break;
 800d9a6:	e04a      	b.n	800da3e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800d9a8:	4b26      	ldr	r3, [pc, #152]	@ (800da44 <USBD_SetConfig+0x118>)
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d112      	bne.n	800d9d6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2202      	movs	r2, #2
 800d9b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800d9b8:	4b22      	ldr	r3, [pc, #136]	@ (800da44 <USBD_SetConfig+0x118>)
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	461a      	mov	r2, r3
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800d9c2:	4b20      	ldr	r3, [pc, #128]	@ (800da44 <USBD_SetConfig+0x118>)
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f7ff f9e4 	bl	800cd96 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f000 f9d8 	bl	800dd84 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d9d4:	e033      	b.n	800da3e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800d9d6:	4b1b      	ldr	r3, [pc, #108]	@ (800da44 <USBD_SetConfig+0x118>)
 800d9d8:	781b      	ldrb	r3, [r3, #0]
 800d9da:	461a      	mov	r2, r3
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d01d      	beq.n	800da20 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f7ff f9d2 	bl	800cd96 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800d9f2:	4b14      	ldr	r3, [pc, #80]	@ (800da44 <USBD_SetConfig+0x118>)
 800d9f4:	781b      	ldrb	r3, [r3, #0]
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d9fc:	4b11      	ldr	r3, [pc, #68]	@ (800da44 <USBD_SetConfig+0x118>)
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	4619      	mov	r1, r3
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f7ff f9a8 	bl	800cd58 <USBD_SetClassConfig>
 800da08:	4603      	mov	r3, r0
 800da0a:	2b02      	cmp	r3, #2
 800da0c:	d104      	bne.n	800da18 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800da0e:	6839      	ldr	r1, [r7, #0]
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f000 f8ef 	bl	800dbf4 <USBD_CtlError>
            return;
 800da16:	e012      	b.n	800da3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f000 f9b3 	bl	800dd84 <USBD_CtlSendStatus>
        break;
 800da1e:	e00e      	b.n	800da3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f000 f9af 	bl	800dd84 <USBD_CtlSendStatus>
        break;
 800da26:	e00a      	b.n	800da3e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800da28:	6839      	ldr	r1, [r7, #0]
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 f8e2 	bl	800dbf4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800da30:	4b04      	ldr	r3, [pc, #16]	@ (800da44 <USBD_SetConfig+0x118>)
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	4619      	mov	r1, r3
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f7ff f9ad 	bl	800cd96 <USBD_ClrClassConfig>
        break;
 800da3c:	bf00      	nop
    }
  }
}
 800da3e:	3708      	adds	r7, #8
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}
 800da44:	20000954 	.word	0x20000954

0800da48 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	88db      	ldrh	r3, [r3, #6]
 800da56:	2b01      	cmp	r3, #1
 800da58:	d004      	beq.n	800da64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800da5a:	6839      	ldr	r1, [r7, #0]
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f000 f8c9 	bl	800dbf4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800da62:	e022      	b.n	800daaa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da6a:	2b02      	cmp	r3, #2
 800da6c:	dc02      	bgt.n	800da74 <USBD_GetConfig+0x2c>
 800da6e:	2b00      	cmp	r3, #0
 800da70:	dc03      	bgt.n	800da7a <USBD_GetConfig+0x32>
 800da72:	e015      	b.n	800daa0 <USBD_GetConfig+0x58>
 800da74:	2b03      	cmp	r3, #3
 800da76:	d00b      	beq.n	800da90 <USBD_GetConfig+0x48>
 800da78:	e012      	b.n	800daa0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2200      	movs	r2, #0
 800da7e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	3308      	adds	r3, #8
 800da84:	2201      	movs	r2, #1
 800da86:	4619      	mov	r1, r3
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f000 f91d 	bl	800dcc8 <USBD_CtlSendData>
        break;
 800da8e:	e00c      	b.n	800daaa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	3304      	adds	r3, #4
 800da94:	2201      	movs	r2, #1
 800da96:	4619      	mov	r1, r3
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 f915 	bl	800dcc8 <USBD_CtlSendData>
        break;
 800da9e:	e004      	b.n	800daaa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800daa0:	6839      	ldr	r1, [r7, #0]
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f000 f8a6 	bl	800dbf4 <USBD_CtlError>
        break;
 800daa8:	bf00      	nop
}
 800daaa:	bf00      	nop
 800daac:	3708      	adds	r7, #8
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b082      	sub	sp, #8
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
 800daba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dac2:	3b01      	subs	r3, #1
 800dac4:	2b02      	cmp	r3, #2
 800dac6:	d81e      	bhi.n	800db06 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	88db      	ldrh	r3, [r3, #6]
 800dacc:	2b02      	cmp	r3, #2
 800dace:	d004      	beq.n	800dada <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800dad0:	6839      	ldr	r1, [r7, #0]
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f000 f88e 	bl	800dbf4 <USBD_CtlError>
        break;
 800dad8:	e01a      	b.n	800db10 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2201      	movs	r2, #1
 800dade:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d005      	beq.n	800daf6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	68db      	ldr	r3, [r3, #12]
 800daee:	f043 0202 	orr.w	r2, r3, #2
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	330c      	adds	r3, #12
 800dafa:	2202      	movs	r2, #2
 800dafc:	4619      	mov	r1, r3
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 f8e2 	bl	800dcc8 <USBD_CtlSendData>
      break;
 800db04:	e004      	b.n	800db10 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800db06:	6839      	ldr	r1, [r7, #0]
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f000 f873 	bl	800dbf4 <USBD_CtlError>
      break;
 800db0e:	bf00      	nop
  }
}
 800db10:	bf00      	nop
 800db12:	3708      	adds	r7, #8
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}

0800db18 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	885b      	ldrh	r3, [r3, #2]
 800db26:	2b01      	cmp	r3, #1
 800db28:	d106      	bne.n	800db38 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2201      	movs	r2, #1
 800db2e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f000 f926 	bl	800dd84 <USBD_CtlSendStatus>
  }
}
 800db38:	bf00      	nop
 800db3a:	3708      	adds	r7, #8
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db50:	3b01      	subs	r3, #1
 800db52:	2b02      	cmp	r3, #2
 800db54:	d80b      	bhi.n	800db6e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	885b      	ldrh	r3, [r3, #2]
 800db5a:	2b01      	cmp	r3, #1
 800db5c:	d10c      	bne.n	800db78 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2200      	movs	r2, #0
 800db62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 f90c 	bl	800dd84 <USBD_CtlSendStatus>
      }
      break;
 800db6c:	e004      	b.n	800db78 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800db6e:	6839      	ldr	r1, [r7, #0]
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f000 f83f 	bl	800dbf4 <USBD_CtlError>
      break;
 800db76:	e000      	b.n	800db7a <USBD_ClrFeature+0x3a>
      break;
 800db78:	bf00      	nop
  }
}
 800db7a:	bf00      	nop
 800db7c:	3708      	adds	r7, #8
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}

0800db82 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800db82:	b480      	push	{r7}
 800db84:	b083      	sub	sp, #12
 800db86:	af00      	add	r7, sp, #0
 800db88:	6078      	str	r0, [r7, #4]
 800db8a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	781a      	ldrb	r2, [r3, #0]
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	785a      	ldrb	r2, [r3, #1]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	3302      	adds	r3, #2
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	461a      	mov	r2, r3
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	3303      	adds	r3, #3
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	021b      	lsls	r3, r3, #8
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	4413      	add	r3, r2
 800dbb0:	b29a      	uxth	r2, r3
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	3304      	adds	r3, #4
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	461a      	mov	r2, r3
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	3305      	adds	r3, #5
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	021b      	lsls	r3, r3, #8
 800dbc6:	b29b      	uxth	r3, r3
 800dbc8:	4413      	add	r3, r2
 800dbca:	b29a      	uxth	r2, r3
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	3306      	adds	r3, #6
 800dbd4:	781b      	ldrb	r3, [r3, #0]
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	3307      	adds	r3, #7
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	021b      	lsls	r3, r3, #8
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	4413      	add	r3, r2
 800dbe4:	b29a      	uxth	r2, r3
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	80da      	strh	r2, [r3, #6]

}
 800dbea:	bf00      	nop
 800dbec:	370c      	adds	r7, #12
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bc80      	pop	{r7}
 800dbf2:	4770      	bx	lr

0800dbf4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800dbfe:	2180      	movs	r1, #128	@ 0x80
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f000 fc2d 	bl	800e460 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800dc06:	2100      	movs	r1, #0
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f000 fc29 	bl	800e460 <USBD_LL_StallEP>
}
 800dc0e:	bf00      	nop
 800dc10:	3708      	adds	r7, #8
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}

0800dc16 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dc16:	b580      	push	{r7, lr}
 800dc18:	b086      	sub	sp, #24
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	60f8      	str	r0, [r7, #12]
 800dc1e:	60b9      	str	r1, [r7, #8]
 800dc20:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dc22:	2300      	movs	r3, #0
 800dc24:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d032      	beq.n	800dc92 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800dc2c:	68f8      	ldr	r0, [r7, #12]
 800dc2e:	f000 f834 	bl	800dc9a <USBD_GetLen>
 800dc32:	4603      	mov	r3, r0
 800dc34:	3301      	adds	r3, #1
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	005b      	lsls	r3, r3, #1
 800dc3a:	b29a      	uxth	r2, r3
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800dc40:	7dfb      	ldrb	r3, [r7, #23]
 800dc42:	1c5a      	adds	r2, r3, #1
 800dc44:	75fa      	strb	r2, [r7, #23]
 800dc46:	461a      	mov	r2, r3
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	4413      	add	r3, r2
 800dc4c:	687a      	ldr	r2, [r7, #4]
 800dc4e:	7812      	ldrb	r2, [r2, #0]
 800dc50:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800dc52:	7dfb      	ldrb	r3, [r7, #23]
 800dc54:	1c5a      	adds	r2, r3, #1
 800dc56:	75fa      	strb	r2, [r7, #23]
 800dc58:	461a      	mov	r2, r3
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	4413      	add	r3, r2
 800dc5e:	2203      	movs	r2, #3
 800dc60:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800dc62:	e012      	b.n	800dc8a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	1c5a      	adds	r2, r3, #1
 800dc68:	60fa      	str	r2, [r7, #12]
 800dc6a:	7dfa      	ldrb	r2, [r7, #23]
 800dc6c:	1c51      	adds	r1, r2, #1
 800dc6e:	75f9      	strb	r1, [r7, #23]
 800dc70:	4611      	mov	r1, r2
 800dc72:	68ba      	ldr	r2, [r7, #8]
 800dc74:	440a      	add	r2, r1
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800dc7a:	7dfb      	ldrb	r3, [r7, #23]
 800dc7c:	1c5a      	adds	r2, r3, #1
 800dc7e:	75fa      	strb	r2, [r7, #23]
 800dc80:	461a      	mov	r2, r3
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	4413      	add	r3, r2
 800dc86:	2200      	movs	r2, #0
 800dc88:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d1e8      	bne.n	800dc64 <USBD_GetString+0x4e>
    }
  }
}
 800dc92:	bf00      	nop
 800dc94:	3718      	adds	r7, #24
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}

0800dc9a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dc9a:	b480      	push	{r7}
 800dc9c:	b085      	sub	sp, #20
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dca2:	2300      	movs	r3, #0
 800dca4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800dca6:	e005      	b.n	800dcb4 <USBD_GetLen+0x1a>
  {
    len++;
 800dca8:	7bfb      	ldrb	r3, [r7, #15]
 800dcaa:	3301      	adds	r3, #1
 800dcac:	73fb      	strb	r3, [r7, #15]
    buf++;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d1f5      	bne.n	800dca8 <USBD_GetLen+0xe>
  }

  return len;
 800dcbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3714      	adds	r7, #20
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bc80      	pop	{r7}
 800dcc6:	4770      	bx	lr

0800dcc8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b084      	sub	sp, #16
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	4613      	mov	r3, r2
 800dcd4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2202      	movs	r2, #2
 800dcda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800dcde:	88fa      	ldrh	r2, [r7, #6]
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800dce4:	88fa      	ldrh	r2, [r7, #6]
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dcea:	88fb      	ldrh	r3, [r7, #6]
 800dcec:	68ba      	ldr	r2, [r7, #8]
 800dcee:	2100      	movs	r1, #0
 800dcf0:	68f8      	ldr	r0, [r7, #12]
 800dcf2:	f000 fc3e 	bl	800e572 <USBD_LL_Transmit>

  return USBD_OK;
 800dcf6:	2300      	movs	r3, #0
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3710      	adds	r7, #16
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	4613      	mov	r3, r2
 800dd0c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dd0e:	88fb      	ldrh	r3, [r7, #6]
 800dd10:	68ba      	ldr	r2, [r7, #8]
 800dd12:	2100      	movs	r1, #0
 800dd14:	68f8      	ldr	r0, [r7, #12]
 800dd16:	f000 fc2c 	bl	800e572 <USBD_LL_Transmit>

  return USBD_OK;
 800dd1a:	2300      	movs	r3, #0
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3710      	adds	r7, #16
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}

0800dd24 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b084      	sub	sp, #16
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	60f8      	str	r0, [r7, #12]
 800dd2c:	60b9      	str	r1, [r7, #8]
 800dd2e:	4613      	mov	r3, r2
 800dd30:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	2203      	movs	r2, #3
 800dd36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800dd3a:	88fa      	ldrh	r2, [r7, #6]
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800dd42:	88fa      	ldrh	r2, [r7, #6]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dd4a:	88fb      	ldrh	r3, [r7, #6]
 800dd4c:	68ba      	ldr	r2, [r7, #8]
 800dd4e:	2100      	movs	r1, #0
 800dd50:	68f8      	ldr	r0, [r7, #12]
 800dd52:	f000 fc31 	bl	800e5b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd56:	2300      	movs	r3, #0
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3710      	adds	r7, #16
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	60b9      	str	r1, [r7, #8]
 800dd6a:	4613      	mov	r3, r2
 800dd6c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dd6e:	88fb      	ldrh	r3, [r7, #6]
 800dd70:	68ba      	ldr	r2, [r7, #8]
 800dd72:	2100      	movs	r1, #0
 800dd74:	68f8      	ldr	r0, [r7, #12]
 800dd76:	f000 fc1f 	bl	800e5b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd7a:	2300      	movs	r3, #0
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3710      	adds	r7, #16
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2204      	movs	r2, #4
 800dd90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dd94:	2300      	movs	r3, #0
 800dd96:	2200      	movs	r2, #0
 800dd98:	2100      	movs	r1, #0
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f000 fbe9 	bl	800e572 <USBD_LL_Transmit>

  return USBD_OK;
 800dda0:	2300      	movs	r3, #0
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3708      	adds	r7, #8
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}

0800ddaa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ddaa:	b580      	push	{r7, lr}
 800ddac:	b082      	sub	sp, #8
 800ddae:	af00      	add	r7, sp, #0
 800ddb0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2205      	movs	r2, #5
 800ddb6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ddba:	2300      	movs	r3, #0
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	2100      	movs	r1, #0
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f000 fbf9 	bl	800e5b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ddc6:	2300      	movs	r3, #0
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3708      	adds	r7, #8
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	4912      	ldr	r1, [pc, #72]	@ (800de20 <MX_USB_DEVICE_Init+0x50>)
 800ddd8:	4812      	ldr	r0, [pc, #72]	@ (800de24 <MX_USB_DEVICE_Init+0x54>)
 800ddda:	f7fe ff63 	bl	800cca4 <USBD_Init>
 800ddde:	4603      	mov	r3, r0
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d001      	beq.n	800dde8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dde4:	f7f3 fed8 	bl	8001b98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800dde8:	490f      	ldr	r1, [pc, #60]	@ (800de28 <MX_USB_DEVICE_Init+0x58>)
 800ddea:	480e      	ldr	r0, [pc, #56]	@ (800de24 <MX_USB_DEVICE_Init+0x54>)
 800ddec:	f7fe ff85 	bl	800ccfa <USBD_RegisterClass>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d001      	beq.n	800ddfa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ddf6:	f7f3 fecf 	bl	8001b98 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ddfa:	490c      	ldr	r1, [pc, #48]	@ (800de2c <MX_USB_DEVICE_Init+0x5c>)
 800ddfc:	4809      	ldr	r0, [pc, #36]	@ (800de24 <MX_USB_DEVICE_Init+0x54>)
 800ddfe:	f7fe fee5 	bl	800cbcc <USBD_CDC_RegisterInterface>
 800de02:	4603      	mov	r3, r0
 800de04:	2b00      	cmp	r3, #0
 800de06:	d001      	beq.n	800de0c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800de08:	f7f3 fec6 	bl	8001b98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800de0c:	4805      	ldr	r0, [pc, #20]	@ (800de24 <MX_USB_DEVICE_Init+0x54>)
 800de0e:	f7fe ff8d 	bl	800cd2c <USBD_Start>
 800de12:	4603      	mov	r3, r0
 800de14:	2b00      	cmp	r3, #0
 800de16:	d001      	beq.n	800de1c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800de18:	f7f3 febe 	bl	8001b98 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800de1c:	bf00      	nop
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	200001ac 	.word	0x200001ac
 800de24:	20000958 	.word	0x20000958
 800de28:	20000098 	.word	0x20000098
 800de2c:	2000019c 	.word	0x2000019c

0800de30 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800de34:	2200      	movs	r2, #0
 800de36:	4905      	ldr	r1, [pc, #20]	@ (800de4c <CDC_Init_FS+0x1c>)
 800de38:	4805      	ldr	r0, [pc, #20]	@ (800de50 <CDC_Init_FS+0x20>)
 800de3a:	f7fe fedd 	bl	800cbf8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800de3e:	4905      	ldr	r1, [pc, #20]	@ (800de54 <CDC_Init_FS+0x24>)
 800de40:	4803      	ldr	r0, [pc, #12]	@ (800de50 <CDC_Init_FS+0x20>)
 800de42:	f7fe fef2 	bl	800cc2a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800de46:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800de48:	4618      	mov	r0, r3
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	2000101c 	.word	0x2000101c
 800de50:	20000958 	.word	0x20000958
 800de54:	20000c1c 	.word	0x20000c1c

0800de58 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800de58:	b480      	push	{r7}
 800de5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800de5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800de5e:	4618      	mov	r0, r3
 800de60:	46bd      	mov	sp, r7
 800de62:	bc80      	pop	{r7}
 800de64:	4770      	bx	lr
	...

0800de68 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800de68:	b480      	push	{r7}
 800de6a:	b083      	sub	sp, #12
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	4603      	mov	r3, r0
 800de70:	6039      	str	r1, [r7, #0]
 800de72:	71fb      	strb	r3, [r7, #7]
 800de74:	4613      	mov	r3, r2
 800de76:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800de78:	79fb      	ldrb	r3, [r7, #7]
 800de7a:	2b23      	cmp	r3, #35	@ 0x23
 800de7c:	d84a      	bhi.n	800df14 <CDC_Control_FS+0xac>
 800de7e:	a201      	add	r2, pc, #4	@ (adr r2, 800de84 <CDC_Control_FS+0x1c>)
 800de80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de84:	0800df15 	.word	0x0800df15
 800de88:	0800df15 	.word	0x0800df15
 800de8c:	0800df15 	.word	0x0800df15
 800de90:	0800df15 	.word	0x0800df15
 800de94:	0800df15 	.word	0x0800df15
 800de98:	0800df15 	.word	0x0800df15
 800de9c:	0800df15 	.word	0x0800df15
 800dea0:	0800df15 	.word	0x0800df15
 800dea4:	0800df15 	.word	0x0800df15
 800dea8:	0800df15 	.word	0x0800df15
 800deac:	0800df15 	.word	0x0800df15
 800deb0:	0800df15 	.word	0x0800df15
 800deb4:	0800df15 	.word	0x0800df15
 800deb8:	0800df15 	.word	0x0800df15
 800debc:	0800df15 	.word	0x0800df15
 800dec0:	0800df15 	.word	0x0800df15
 800dec4:	0800df15 	.word	0x0800df15
 800dec8:	0800df15 	.word	0x0800df15
 800decc:	0800df15 	.word	0x0800df15
 800ded0:	0800df15 	.word	0x0800df15
 800ded4:	0800df15 	.word	0x0800df15
 800ded8:	0800df15 	.word	0x0800df15
 800dedc:	0800df15 	.word	0x0800df15
 800dee0:	0800df15 	.word	0x0800df15
 800dee4:	0800df15 	.word	0x0800df15
 800dee8:	0800df15 	.word	0x0800df15
 800deec:	0800df15 	.word	0x0800df15
 800def0:	0800df15 	.word	0x0800df15
 800def4:	0800df15 	.word	0x0800df15
 800def8:	0800df15 	.word	0x0800df15
 800defc:	0800df15 	.word	0x0800df15
 800df00:	0800df15 	.word	0x0800df15
 800df04:	0800df15 	.word	0x0800df15
 800df08:	0800df15 	.word	0x0800df15
 800df0c:	0800df15 	.word	0x0800df15
 800df10:	0800df15 	.word	0x0800df15
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800df14:	bf00      	nop
  }

  return (USBD_OK);
 800df16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800df18:	4618      	mov	r0, r3
 800df1a:	370c      	adds	r7, #12
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bc80      	pop	{r7}
 800df20:	4770      	bx	lr
 800df22:	bf00      	nop

0800df24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800df2e:	6879      	ldr	r1, [r7, #4]
 800df30:	4805      	ldr	r0, [pc, #20]	@ (800df48 <CDC_Receive_FS+0x24>)
 800df32:	f7fe fe7a 	bl	800cc2a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800df36:	4804      	ldr	r0, [pc, #16]	@ (800df48 <CDC_Receive_FS+0x24>)
 800df38:	f7fe fe8a 	bl	800cc50 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800df3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3708      	adds	r7, #8
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	20000958 	.word	0x20000958

0800df4c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b083      	sub	sp, #12
 800df50:	af00      	add	r7, sp, #0
 800df52:	4603      	mov	r3, r0
 800df54:	6039      	str	r1, [r7, #0]
 800df56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	2212      	movs	r2, #18
 800df5c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800df5e:	4b03      	ldr	r3, [pc, #12]	@ (800df6c <USBD_FS_DeviceDescriptor+0x20>)
}
 800df60:	4618      	mov	r0, r3
 800df62:	370c      	adds	r7, #12
 800df64:	46bd      	mov	sp, r7
 800df66:	bc80      	pop	{r7}
 800df68:	4770      	bx	lr
 800df6a:	bf00      	nop
 800df6c:	200001c8 	.word	0x200001c8

0800df70 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df70:	b480      	push	{r7}
 800df72:	b083      	sub	sp, #12
 800df74:	af00      	add	r7, sp, #0
 800df76:	4603      	mov	r3, r0
 800df78:	6039      	str	r1, [r7, #0]
 800df7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	2204      	movs	r2, #4
 800df80:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800df82:	4b03      	ldr	r3, [pc, #12]	@ (800df90 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800df84:	4618      	mov	r0, r3
 800df86:	370c      	adds	r7, #12
 800df88:	46bd      	mov	sp, r7
 800df8a:	bc80      	pop	{r7}
 800df8c:	4770      	bx	lr
 800df8e:	bf00      	nop
 800df90:	200001dc 	.word	0x200001dc

0800df94 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	4603      	mov	r3, r0
 800df9c:	6039      	str	r1, [r7, #0]
 800df9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dfa0:	79fb      	ldrb	r3, [r7, #7]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d105      	bne.n	800dfb2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dfa6:	683a      	ldr	r2, [r7, #0]
 800dfa8:	4907      	ldr	r1, [pc, #28]	@ (800dfc8 <USBD_FS_ProductStrDescriptor+0x34>)
 800dfaa:	4808      	ldr	r0, [pc, #32]	@ (800dfcc <USBD_FS_ProductStrDescriptor+0x38>)
 800dfac:	f7ff fe33 	bl	800dc16 <USBD_GetString>
 800dfb0:	e004      	b.n	800dfbc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dfb2:	683a      	ldr	r2, [r7, #0]
 800dfb4:	4904      	ldr	r1, [pc, #16]	@ (800dfc8 <USBD_FS_ProductStrDescriptor+0x34>)
 800dfb6:	4805      	ldr	r0, [pc, #20]	@ (800dfcc <USBD_FS_ProductStrDescriptor+0x38>)
 800dfb8:	f7ff fe2d 	bl	800dc16 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dfbc:	4b02      	ldr	r3, [pc, #8]	@ (800dfc8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3708      	adds	r7, #8
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}
 800dfc6:	bf00      	nop
 800dfc8:	2000141c 	.word	0x2000141c
 800dfcc:	080134cc 	.word	0x080134cc

0800dfd0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	6039      	str	r1, [r7, #0]
 800dfda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dfdc:	683a      	ldr	r2, [r7, #0]
 800dfde:	4904      	ldr	r1, [pc, #16]	@ (800dff0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dfe0:	4804      	ldr	r0, [pc, #16]	@ (800dff4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dfe2:	f7ff fe18 	bl	800dc16 <USBD_GetString>
  return USBD_StrDesc;
 800dfe6:	4b02      	ldr	r3, [pc, #8]	@ (800dff0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3708      	adds	r7, #8
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}
 800dff0:	2000141c 	.word	0x2000141c
 800dff4:	080134e4 	.word	0x080134e4

0800dff8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	4603      	mov	r3, r0
 800e000:	6039      	str	r1, [r7, #0]
 800e002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	221a      	movs	r2, #26
 800e008:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e00a:	f000 f843 	bl	800e094 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e00e:	4b02      	ldr	r3, [pc, #8]	@ (800e018 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e010:	4618      	mov	r0, r3
 800e012:	3708      	adds	r7, #8
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	200001e0 	.word	0x200001e0

0800e01c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	4603      	mov	r3, r0
 800e024:	6039      	str	r1, [r7, #0]
 800e026:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e028:	79fb      	ldrb	r3, [r7, #7]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d105      	bne.n	800e03a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e02e:	683a      	ldr	r2, [r7, #0]
 800e030:	4907      	ldr	r1, [pc, #28]	@ (800e050 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e032:	4808      	ldr	r0, [pc, #32]	@ (800e054 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e034:	f7ff fdef 	bl	800dc16 <USBD_GetString>
 800e038:	e004      	b.n	800e044 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e03a:	683a      	ldr	r2, [r7, #0]
 800e03c:	4904      	ldr	r1, [pc, #16]	@ (800e050 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e03e:	4805      	ldr	r0, [pc, #20]	@ (800e054 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e040:	f7ff fde9 	bl	800dc16 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e044:	4b02      	ldr	r3, [pc, #8]	@ (800e050 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e046:	4618      	mov	r0, r3
 800e048:	3708      	adds	r7, #8
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop
 800e050:	2000141c 	.word	0x2000141c
 800e054:	080134f8 	.word	0x080134f8

0800e058 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	4603      	mov	r3, r0
 800e060:	6039      	str	r1, [r7, #0]
 800e062:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e064:	79fb      	ldrb	r3, [r7, #7]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d105      	bne.n	800e076 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e06a:	683a      	ldr	r2, [r7, #0]
 800e06c:	4907      	ldr	r1, [pc, #28]	@ (800e08c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e06e:	4808      	ldr	r0, [pc, #32]	@ (800e090 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e070:	f7ff fdd1 	bl	800dc16 <USBD_GetString>
 800e074:	e004      	b.n	800e080 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e076:	683a      	ldr	r2, [r7, #0]
 800e078:	4904      	ldr	r1, [pc, #16]	@ (800e08c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e07a:	4805      	ldr	r0, [pc, #20]	@ (800e090 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e07c:	f7ff fdcb 	bl	800dc16 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e080:	4b02      	ldr	r3, [pc, #8]	@ (800e08c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e082:	4618      	mov	r0, r3
 800e084:	3708      	adds	r7, #8
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
 800e08a:	bf00      	nop
 800e08c:	2000141c 	.word	0x2000141c
 800e090:	08013504 	.word	0x08013504

0800e094 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b084      	sub	sp, #16
 800e098:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e09a:	4b0f      	ldr	r3, [pc, #60]	@ (800e0d8 <Get_SerialNum+0x44>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e0a0:	4b0e      	ldr	r3, [pc, #56]	@ (800e0dc <Get_SerialNum+0x48>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e0a6:	4b0e      	ldr	r3, [pc, #56]	@ (800e0e0 <Get_SerialNum+0x4c>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e0ac:	68fa      	ldr	r2, [r7, #12]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	4413      	add	r3, r2
 800e0b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d009      	beq.n	800e0ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e0ba:	2208      	movs	r2, #8
 800e0bc:	4909      	ldr	r1, [pc, #36]	@ (800e0e4 <Get_SerialNum+0x50>)
 800e0be:	68f8      	ldr	r0, [r7, #12]
 800e0c0:	f000 f814 	bl	800e0ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e0c4:	2204      	movs	r2, #4
 800e0c6:	4908      	ldr	r1, [pc, #32]	@ (800e0e8 <Get_SerialNum+0x54>)
 800e0c8:	68b8      	ldr	r0, [r7, #8]
 800e0ca:	f000 f80f 	bl	800e0ec <IntToUnicode>
  }
}
 800e0ce:	bf00      	nop
 800e0d0:	3710      	adds	r7, #16
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	1ffff7e8 	.word	0x1ffff7e8
 800e0dc:	1ffff7ec 	.word	0x1ffff7ec
 800e0e0:	1ffff7f0 	.word	0x1ffff7f0
 800e0e4:	200001e2 	.word	0x200001e2
 800e0e8:	200001f2 	.word	0x200001f2

0800e0ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b087      	sub	sp, #28
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	4613      	mov	r3, r2
 800e0f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e0fe:	2300      	movs	r3, #0
 800e100:	75fb      	strb	r3, [r7, #23]
 800e102:	e027      	b.n	800e154 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	0f1b      	lsrs	r3, r3, #28
 800e108:	2b09      	cmp	r3, #9
 800e10a:	d80b      	bhi.n	800e124 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	0f1b      	lsrs	r3, r3, #28
 800e110:	b2da      	uxtb	r2, r3
 800e112:	7dfb      	ldrb	r3, [r7, #23]
 800e114:	005b      	lsls	r3, r3, #1
 800e116:	4619      	mov	r1, r3
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	440b      	add	r3, r1
 800e11c:	3230      	adds	r2, #48	@ 0x30
 800e11e:	b2d2      	uxtb	r2, r2
 800e120:	701a      	strb	r2, [r3, #0]
 800e122:	e00a      	b.n	800e13a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	0f1b      	lsrs	r3, r3, #28
 800e128:	b2da      	uxtb	r2, r3
 800e12a:	7dfb      	ldrb	r3, [r7, #23]
 800e12c:	005b      	lsls	r3, r3, #1
 800e12e:	4619      	mov	r1, r3
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	440b      	add	r3, r1
 800e134:	3237      	adds	r2, #55	@ 0x37
 800e136:	b2d2      	uxtb	r2, r2
 800e138:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	011b      	lsls	r3, r3, #4
 800e13e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e140:	7dfb      	ldrb	r3, [r7, #23]
 800e142:	005b      	lsls	r3, r3, #1
 800e144:	3301      	adds	r3, #1
 800e146:	68ba      	ldr	r2, [r7, #8]
 800e148:	4413      	add	r3, r2
 800e14a:	2200      	movs	r2, #0
 800e14c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e14e:	7dfb      	ldrb	r3, [r7, #23]
 800e150:	3301      	adds	r3, #1
 800e152:	75fb      	strb	r3, [r7, #23]
 800e154:	7dfa      	ldrb	r2, [r7, #23]
 800e156:	79fb      	ldrb	r3, [r7, #7]
 800e158:	429a      	cmp	r2, r3
 800e15a:	d3d3      	bcc.n	800e104 <IntToUnicode+0x18>
  }
}
 800e15c:	bf00      	nop
 800e15e:	bf00      	nop
 800e160:	371c      	adds	r7, #28
 800e162:	46bd      	mov	sp, r7
 800e164:	bc80      	pop	{r7}
 800e166:	4770      	bx	lr

0800e168 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b084      	sub	sp, #16
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4a0d      	ldr	r2, [pc, #52]	@ (800e1ac <HAL_PCD_MspInit+0x44>)
 800e176:	4293      	cmp	r3, r2
 800e178:	d113      	bne.n	800e1a2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e17a:	4b0d      	ldr	r3, [pc, #52]	@ (800e1b0 <HAL_PCD_MspInit+0x48>)
 800e17c:	69db      	ldr	r3, [r3, #28]
 800e17e:	4a0c      	ldr	r2, [pc, #48]	@ (800e1b0 <HAL_PCD_MspInit+0x48>)
 800e180:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e184:	61d3      	str	r3, [r2, #28]
 800e186:	4b0a      	ldr	r3, [pc, #40]	@ (800e1b0 <HAL_PCD_MspInit+0x48>)
 800e188:	69db      	ldr	r3, [r3, #28]
 800e18a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e18e:	60fb      	str	r3, [r7, #12]
 800e190:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800e192:	2200      	movs	r2, #0
 800e194:	2100      	movs	r1, #0
 800e196:	2014      	movs	r0, #20
 800e198:	f7f5 fac3 	bl	8003722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800e19c:	2014      	movs	r0, #20
 800e19e:	f7f5 fadc 	bl	800375a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e1a2:	bf00      	nop
 800e1a4:	3710      	adds	r7, #16
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}
 800e1aa:	bf00      	nop
 800e1ac:	40005c00 	.word	0x40005c00
 800e1b0:	40021000 	.word	0x40021000

0800e1b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b082      	sub	sp, #8
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	4610      	mov	r0, r2
 800e1cc:	f7fe fdf6 	bl	800cdbc <USBD_LL_SetupStage>
}
 800e1d0:	bf00      	nop
 800e1d2:	3708      	adds	r7, #8
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}

0800e1d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b082      	sub	sp, #8
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800e1ea:	78fa      	ldrb	r2, [r7, #3]
 800e1ec:	6879      	ldr	r1, [r7, #4]
 800e1ee:	4613      	mov	r3, r2
 800e1f0:	009b      	lsls	r3, r3, #2
 800e1f2:	4413      	add	r3, r2
 800e1f4:	00db      	lsls	r3, r3, #3
 800e1f6:	440b      	add	r3, r1
 800e1f8:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 800e1fc:	681a      	ldr	r2, [r3, #0]
 800e1fe:	78fb      	ldrb	r3, [r7, #3]
 800e200:	4619      	mov	r1, r3
 800e202:	f7fe fe28 	bl	800ce56 <USBD_LL_DataOutStage>
}
 800e206:	bf00      	nop
 800e208:	3708      	adds	r7, #8
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}

0800e20e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e20e:	b580      	push	{r7, lr}
 800e210:	b082      	sub	sp, #8
 800e212:	af00      	add	r7, sp, #0
 800e214:	6078      	str	r0, [r7, #4]
 800e216:	460b      	mov	r3, r1
 800e218:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 800e220:	78fa      	ldrb	r2, [r7, #3]
 800e222:	6879      	ldr	r1, [r7, #4]
 800e224:	4613      	mov	r3, r2
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	4413      	add	r3, r2
 800e22a:	00db      	lsls	r3, r3, #3
 800e22c:	440b      	add	r3, r1
 800e22e:	333c      	adds	r3, #60	@ 0x3c
 800e230:	681a      	ldr	r2, [r3, #0]
 800e232:	78fb      	ldrb	r3, [r7, #3]
 800e234:	4619      	mov	r1, r3
 800e236:	f7fe fe7f 	bl	800cf38 <USBD_LL_DataInStage>
}
 800e23a:	bf00      	nop
 800e23c:	3708      	adds	r7, #8
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}

0800e242 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e242:	b580      	push	{r7, lr}
 800e244:	b082      	sub	sp, #8
 800e246:	af00      	add	r7, sp, #0
 800e248:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800e250:	4618      	mov	r0, r3
 800e252:	f7fe ff8f 	bl	800d174 <USBD_LL_SOF>
}
 800e256:	bf00      	nop
 800e258:	3708      	adds	r7, #8
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}

0800e25e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e25e:	b580      	push	{r7, lr}
 800e260:	b084      	sub	sp, #16
 800e262:	af00      	add	r7, sp, #0
 800e264:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e266:	2301      	movs	r3, #1
 800e268:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	689b      	ldr	r3, [r3, #8]
 800e26e:	2b02      	cmp	r3, #2
 800e270:	d001      	beq.n	800e276 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e272:	f7f3 fc91 	bl	8001b98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800e27c:	7bfa      	ldrb	r2, [r7, #15]
 800e27e:	4611      	mov	r1, r2
 800e280:	4618      	mov	r0, r3
 800e282:	f7fe ff3f 	bl	800d104 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7fe fef8 	bl	800d082 <USBD_LL_Reset>
}
 800e292:	bf00      	nop
 800e294:	3710      	adds	r7, #16
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
	...

0800e29c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b082      	sub	sp, #8
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7fe ff39 	bl	800d122 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	699b      	ldr	r3, [r3, #24]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d005      	beq.n	800e2c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e2b8:	4b04      	ldr	r3, [pc, #16]	@ (800e2cc <HAL_PCD_SuspendCallback+0x30>)
 800e2ba:	691b      	ldr	r3, [r3, #16]
 800e2bc:	4a03      	ldr	r2, [pc, #12]	@ (800e2cc <HAL_PCD_SuspendCallback+0x30>)
 800e2be:	f043 0306 	orr.w	r3, r3, #6
 800e2c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e2c4:	bf00      	nop
 800e2c6:	3708      	adds	r7, #8
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}
 800e2cc:	e000ed00 	.word	0xe000ed00

0800e2d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b082      	sub	sp, #8
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7fe ff33 	bl	800d14a <USBD_LL_Resume>
}
 800e2e4:	bf00      	nop
 800e2e6:	3708      	adds	r7, #8
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}

0800e2ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b082      	sub	sp, #8
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800e2f4:	4a28      	ldr	r2, [pc, #160]	@ (800e398 <USBD_LL_Init+0xac>)
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8c2 32ec 	str.w	r3, [r2, #748]	@ 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	4a26      	ldr	r2, [pc, #152]	@ (800e398 <USBD_LL_Init+0xac>)
 800e300:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800e304:	4b24      	ldr	r3, [pc, #144]	@ (800e398 <USBD_LL_Init+0xac>)
 800e306:	4a25      	ldr	r2, [pc, #148]	@ (800e39c <USBD_LL_Init+0xb0>)
 800e308:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e30a:	4b23      	ldr	r3, [pc, #140]	@ (800e398 <USBD_LL_Init+0xac>)
 800e30c:	2208      	movs	r2, #8
 800e30e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e310:	4b21      	ldr	r3, [pc, #132]	@ (800e398 <USBD_LL_Init+0xac>)
 800e312:	2202      	movs	r2, #2
 800e314:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e316:	4b20      	ldr	r3, [pc, #128]	@ (800e398 <USBD_LL_Init+0xac>)
 800e318:	2200      	movs	r2, #0
 800e31a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e31c:	4b1e      	ldr	r3, [pc, #120]	@ (800e398 <USBD_LL_Init+0xac>)
 800e31e:	2200      	movs	r2, #0
 800e320:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e322:	4b1d      	ldr	r3, [pc, #116]	@ (800e398 <USBD_LL_Init+0xac>)
 800e324:	2200      	movs	r2, #0
 800e326:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e328:	481b      	ldr	r0, [pc, #108]	@ (800e398 <USBD_LL_Init+0xac>)
 800e32a:	f7f6 fc1e 	bl	8004b6a <HAL_PCD_Init>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d001      	beq.n	800e338 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800e334:	f7f3 fc30 	bl	8001b98 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e33e:	2318      	movs	r3, #24
 800e340:	2200      	movs	r2, #0
 800e342:	2100      	movs	r1, #0
 800e344:	f7f8 f93c 	bl	80065c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e34e:	2358      	movs	r3, #88	@ 0x58
 800e350:	2200      	movs	r2, #0
 800e352:	2180      	movs	r1, #128	@ 0x80
 800e354:	f7f8 f934 	bl	80065c0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e35e:	23c0      	movs	r3, #192	@ 0xc0
 800e360:	2200      	movs	r2, #0
 800e362:	2181      	movs	r1, #129	@ 0x81
 800e364:	f7f8 f92c 	bl	80065c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e36e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800e372:	2200      	movs	r2, #0
 800e374:	2101      	movs	r1, #1
 800e376:	f7f8 f923 	bl	80065c0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e380:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e384:	2200      	movs	r2, #0
 800e386:	2182      	movs	r1, #130	@ 0x82
 800e388:	f7f8 f91a 	bl	80065c0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e38c:	2300      	movs	r3, #0
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3708      	adds	r7, #8
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}
 800e396:	bf00      	nop
 800e398:	2000161c 	.word	0x2000161c
 800e39c:	40005c00 	.word	0x40005c00

0800e3a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7f6 fcd6 	bl	8004d68 <HAL_PCD_Start>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3c0:	7bfb      	ldrb	r3, [r7, #15]
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f000 f94e 	bl	800e664 <USBD_Get_USB_Status>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3710      	adds	r7, #16
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}

0800e3d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e3d6:	b580      	push	{r7, lr}
 800e3d8:	b084      	sub	sp, #16
 800e3da:	af00      	add	r7, sp, #0
 800e3dc:	6078      	str	r0, [r7, #4]
 800e3de:	4608      	mov	r0, r1
 800e3e0:	4611      	mov	r1, r2
 800e3e2:	461a      	mov	r2, r3
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	70fb      	strb	r3, [r7, #3]
 800e3e8:	460b      	mov	r3, r1
 800e3ea:	70bb      	strb	r3, [r7, #2]
 800e3ec:	4613      	mov	r3, r2
 800e3ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e3fe:	78bb      	ldrb	r3, [r7, #2]
 800e400:	883a      	ldrh	r2, [r7, #0]
 800e402:	78f9      	ldrb	r1, [r7, #3]
 800e404:	f7f6 fe2b 	bl	800505e <HAL_PCD_EP_Open>
 800e408:	4603      	mov	r3, r0
 800e40a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e40c:	7bfb      	ldrb	r3, [r7, #15]
 800e40e:	4618      	mov	r0, r3
 800e410:	f000 f928 	bl	800e664 <USBD_Get_USB_Status>
 800e414:	4603      	mov	r3, r0
 800e416:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e418:	7bbb      	ldrb	r3, [r7, #14]
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	3710      	adds	r7, #16
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}

0800e422 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e422:	b580      	push	{r7, lr}
 800e424:	b084      	sub	sp, #16
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
 800e42a:	460b      	mov	r3, r1
 800e42c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e42e:	2300      	movs	r3, #0
 800e430:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e432:	2300      	movs	r3, #0
 800e434:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e43c:	78fa      	ldrb	r2, [r7, #3]
 800e43e:	4611      	mov	r1, r2
 800e440:	4618      	mov	r0, r3
 800e442:	f7f6 fe69 	bl	8005118 <HAL_PCD_EP_Close>
 800e446:	4603      	mov	r3, r0
 800e448:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e44a:	7bfb      	ldrb	r3, [r7, #15]
 800e44c:	4618      	mov	r0, r3
 800e44e:	f000 f909 	bl	800e664 <USBD_Get_USB_Status>
 800e452:	4603      	mov	r3, r0
 800e454:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e456:	7bbb      	ldrb	r3, [r7, #14]
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3710      	adds	r7, #16
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b084      	sub	sp, #16
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	460b      	mov	r3, r1
 800e46a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e46c:	2300      	movs	r3, #0
 800e46e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e470:	2300      	movs	r3, #0
 800e472:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e47a:	78fa      	ldrb	r2, [r7, #3]
 800e47c:	4611      	mov	r1, r2
 800e47e:	4618      	mov	r0, r3
 800e480:	f7f6 ff11 	bl	80052a6 <HAL_PCD_EP_SetStall>
 800e484:	4603      	mov	r3, r0
 800e486:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e488:	7bfb      	ldrb	r3, [r7, #15]
 800e48a:	4618      	mov	r0, r3
 800e48c:	f000 f8ea 	bl	800e664 <USBD_Get_USB_Status>
 800e490:	4603      	mov	r3, r0
 800e492:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e494:	7bbb      	ldrb	r3, [r7, #14]
}
 800e496:	4618      	mov	r0, r3
 800e498:	3710      	adds	r7, #16
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}

0800e49e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e49e:	b580      	push	{r7, lr}
 800e4a0:	b084      	sub	sp, #16
 800e4a2:	af00      	add	r7, sp, #0
 800e4a4:	6078      	str	r0, [r7, #4]
 800e4a6:	460b      	mov	r3, r1
 800e4a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e4b8:	78fa      	ldrb	r2, [r7, #3]
 800e4ba:	4611      	mov	r1, r2
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f7f6 ff52 	bl	8005366 <HAL_PCD_EP_ClrStall>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4c6:	7bfb      	ldrb	r3, [r7, #15]
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f000 f8cb 	bl	800e664 <USBD_Get_USB_Status>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	3710      	adds	r7, #16
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}

0800e4dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b085      	sub	sp, #20
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
 800e4e4:	460b      	mov	r3, r1
 800e4e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e4ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e4f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	da0c      	bge.n	800e512 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e4f8:	78fb      	ldrb	r3, [r7, #3]
 800e4fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e4fe:	68f9      	ldr	r1, [r7, #12]
 800e500:	1c5a      	adds	r2, r3, #1
 800e502:	4613      	mov	r3, r2
 800e504:	009b      	lsls	r3, r3, #2
 800e506:	4413      	add	r3, r2
 800e508:	00db      	lsls	r3, r3, #3
 800e50a:	440b      	add	r3, r1
 800e50c:	3302      	adds	r3, #2
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	e00b      	b.n	800e52a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e512:	78fb      	ldrb	r3, [r7, #3]
 800e514:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e518:	68f9      	ldr	r1, [r7, #12]
 800e51a:	4613      	mov	r3, r2
 800e51c:	009b      	lsls	r3, r3, #2
 800e51e:	4413      	add	r3, r2
 800e520:	00db      	lsls	r3, r3, #3
 800e522:	440b      	add	r3, r1
 800e524:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 800e528:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	3714      	adds	r7, #20
 800e52e:	46bd      	mov	sp, r7
 800e530:	bc80      	pop	{r7}
 800e532:	4770      	bx	lr

0800e534 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	460b      	mov	r3, r1
 800e53e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e540:	2300      	movs	r3, #0
 800e542:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e544:	2300      	movs	r3, #0
 800e546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e54e:	78fa      	ldrb	r2, [r7, #3]
 800e550:	4611      	mov	r1, r2
 800e552:	4618      	mov	r0, r3
 800e554:	f7f6 fd5e 	bl	8005014 <HAL_PCD_SetAddress>
 800e558:	4603      	mov	r3, r0
 800e55a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e55c:	7bfb      	ldrb	r3, [r7, #15]
 800e55e:	4618      	mov	r0, r3
 800e560:	f000 f880 	bl	800e664 <USBD_Get_USB_Status>
 800e564:	4603      	mov	r3, r0
 800e566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e568:	7bbb      	ldrb	r3, [r7, #14]
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3710      	adds	r7, #16
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}

0800e572 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e572:	b580      	push	{r7, lr}
 800e574:	b086      	sub	sp, #24
 800e576:	af00      	add	r7, sp, #0
 800e578:	60f8      	str	r0, [r7, #12]
 800e57a:	607a      	str	r2, [r7, #4]
 800e57c:	461a      	mov	r2, r3
 800e57e:	460b      	mov	r3, r1
 800e580:	72fb      	strb	r3, [r7, #11]
 800e582:	4613      	mov	r3, r2
 800e584:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e586:	2300      	movs	r3, #0
 800e588:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e58a:	2300      	movs	r3, #0
 800e58c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e594:	893b      	ldrh	r3, [r7, #8]
 800e596:	7af9      	ldrb	r1, [r7, #11]
 800e598:	687a      	ldr	r2, [r7, #4]
 800e59a:	f7f6 fe4d 	bl	8005238 <HAL_PCD_EP_Transmit>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5a2:	7dfb      	ldrb	r3, [r7, #23]
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f000 f85d 	bl	800e664 <USBD_Get_USB_Status>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e5ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3718      	adds	r7, #24
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b086      	sub	sp, #24
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	60f8      	str	r0, [r7, #12]
 800e5c0:	607a      	str	r2, [r7, #4]
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	460b      	mov	r3, r1
 800e5c6:	72fb      	strb	r3, [r7, #11]
 800e5c8:	4613      	mov	r3, r2
 800e5ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800e5da:	893b      	ldrh	r3, [r7, #8]
 800e5dc:	7af9      	ldrb	r1, [r7, #11]
 800e5de:	687a      	ldr	r2, [r7, #4]
 800e5e0:	f7f6 fde2 	bl	80051a8 <HAL_PCD_EP_Receive>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5e8:	7dfb      	ldrb	r3, [r7, #23]
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f000 f83a 	bl	800e664 <USBD_Get_USB_Status>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e5f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3718      	adds	r7, #24
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}

0800e5fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e5fe:	b580      	push	{r7, lr}
 800e600:	b082      	sub	sp, #8
 800e602:	af00      	add	r7, sp, #0
 800e604:	6078      	str	r0, [r7, #4]
 800e606:	460b      	mov	r3, r1
 800e608:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e610:	78fa      	ldrb	r2, [r7, #3]
 800e612:	4611      	mov	r1, r2
 800e614:	4618      	mov	r0, r3
 800e616:	f7f6 fdf8 	bl	800520a <HAL_PCD_EP_GetRxCount>
 800e61a:	4603      	mov	r3, r0
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3708      	adds	r7, #8
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}

0800e624 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e624:	b480      	push	{r7}
 800e626:	b083      	sub	sp, #12
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e62c:	4b02      	ldr	r3, [pc, #8]	@ (800e638 <USBD_static_malloc+0x14>)
}
 800e62e:	4618      	mov	r0, r3
 800e630:	370c      	adds	r7, #12
 800e632:	46bd      	mov	sp, r7
 800e634:	bc80      	pop	{r7}
 800e636:	4770      	bx	lr
 800e638:	2000190c 	.word	0x2000190c

0800e63c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b083      	sub	sp, #12
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]

}
 800e644:	bf00      	nop
 800e646:	370c      	adds	r7, #12
 800e648:	46bd      	mov	sp, r7
 800e64a:	bc80      	pop	{r7}
 800e64c:	4770      	bx	lr

0800e64e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e64e:	b480      	push	{r7}
 800e650:	b083      	sub	sp, #12
 800e652:	af00      	add	r7, sp, #0
 800e654:	6078      	str	r0, [r7, #4]
 800e656:	460b      	mov	r3, r1
 800e658:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800e65a:	bf00      	nop
 800e65c:	370c      	adds	r7, #12
 800e65e:	46bd      	mov	sp, r7
 800e660:	bc80      	pop	{r7}
 800e662:	4770      	bx	lr

0800e664 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e664:	b480      	push	{r7}
 800e666:	b085      	sub	sp, #20
 800e668:	af00      	add	r7, sp, #0
 800e66a:	4603      	mov	r3, r0
 800e66c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e66e:	2300      	movs	r3, #0
 800e670:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e672:	79fb      	ldrb	r3, [r7, #7]
 800e674:	2b03      	cmp	r3, #3
 800e676:	d817      	bhi.n	800e6a8 <USBD_Get_USB_Status+0x44>
 800e678:	a201      	add	r2, pc, #4	@ (adr r2, 800e680 <USBD_Get_USB_Status+0x1c>)
 800e67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e67e:	bf00      	nop
 800e680:	0800e691 	.word	0x0800e691
 800e684:	0800e697 	.word	0x0800e697
 800e688:	0800e69d 	.word	0x0800e69d
 800e68c:	0800e6a3 	.word	0x0800e6a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e690:	2300      	movs	r3, #0
 800e692:	73fb      	strb	r3, [r7, #15]
    break;
 800e694:	e00b      	b.n	800e6ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e696:	2302      	movs	r3, #2
 800e698:	73fb      	strb	r3, [r7, #15]
    break;
 800e69a:	e008      	b.n	800e6ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e69c:	2301      	movs	r3, #1
 800e69e:	73fb      	strb	r3, [r7, #15]
    break;
 800e6a0:	e005      	b.n	800e6ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e6a2:	2302      	movs	r3, #2
 800e6a4:	73fb      	strb	r3, [r7, #15]
    break;
 800e6a6:	e002      	b.n	800e6ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e6a8:	2302      	movs	r3, #2
 800e6aa:	73fb      	strb	r3, [r7, #15]
    break;
 800e6ac:	bf00      	nop
  }
  return usb_status;
 800e6ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3714      	adds	r7, #20
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bc80      	pop	{r7}
 800e6b8:	4770      	bx	lr
 800e6ba:	bf00      	nop

0800e6bc <__cvt>:
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6c2:	461d      	mov	r5, r3
 800e6c4:	bfbb      	ittet	lt
 800e6c6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800e6ca:	461d      	movlt	r5, r3
 800e6cc:	2300      	movge	r3, #0
 800e6ce:	232d      	movlt	r3, #45	@ 0x2d
 800e6d0:	b088      	sub	sp, #32
 800e6d2:	4614      	mov	r4, r2
 800e6d4:	bfb8      	it	lt
 800e6d6:	4614      	movlt	r4, r2
 800e6d8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e6da:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800e6dc:	7013      	strb	r3, [r2, #0]
 800e6de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e6e0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800e6e4:	f023 0820 	bic.w	r8, r3, #32
 800e6e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e6ec:	d005      	beq.n	800e6fa <__cvt+0x3e>
 800e6ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e6f2:	d100      	bne.n	800e6f6 <__cvt+0x3a>
 800e6f4:	3601      	adds	r6, #1
 800e6f6:	2302      	movs	r3, #2
 800e6f8:	e000      	b.n	800e6fc <__cvt+0x40>
 800e6fa:	2303      	movs	r3, #3
 800e6fc:	aa07      	add	r2, sp, #28
 800e6fe:	9204      	str	r2, [sp, #16]
 800e700:	aa06      	add	r2, sp, #24
 800e702:	e9cd a202 	strd	sl, r2, [sp, #8]
 800e706:	e9cd 3600 	strd	r3, r6, [sp]
 800e70a:	4622      	mov	r2, r4
 800e70c:	462b      	mov	r3, r5
 800e70e:	f001 f99b 	bl	800fa48 <_dtoa_r>
 800e712:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e716:	4607      	mov	r7, r0
 800e718:	d119      	bne.n	800e74e <__cvt+0x92>
 800e71a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e71c:	07db      	lsls	r3, r3, #31
 800e71e:	d50e      	bpl.n	800e73e <__cvt+0x82>
 800e720:	eb00 0906 	add.w	r9, r0, r6
 800e724:	2200      	movs	r2, #0
 800e726:	2300      	movs	r3, #0
 800e728:	4620      	mov	r0, r4
 800e72a:	4629      	mov	r1, r5
 800e72c:	f7f2 f9a8 	bl	8000a80 <__aeabi_dcmpeq>
 800e730:	b108      	cbz	r0, 800e736 <__cvt+0x7a>
 800e732:	f8cd 901c 	str.w	r9, [sp, #28]
 800e736:	2230      	movs	r2, #48	@ 0x30
 800e738:	9b07      	ldr	r3, [sp, #28]
 800e73a:	454b      	cmp	r3, r9
 800e73c:	d31e      	bcc.n	800e77c <__cvt+0xc0>
 800e73e:	4638      	mov	r0, r7
 800e740:	9b07      	ldr	r3, [sp, #28]
 800e742:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e744:	1bdb      	subs	r3, r3, r7
 800e746:	6013      	str	r3, [r2, #0]
 800e748:	b008      	add	sp, #32
 800e74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e74e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e752:	eb00 0906 	add.w	r9, r0, r6
 800e756:	d1e5      	bne.n	800e724 <__cvt+0x68>
 800e758:	7803      	ldrb	r3, [r0, #0]
 800e75a:	2b30      	cmp	r3, #48	@ 0x30
 800e75c:	d10a      	bne.n	800e774 <__cvt+0xb8>
 800e75e:	2200      	movs	r2, #0
 800e760:	2300      	movs	r3, #0
 800e762:	4620      	mov	r0, r4
 800e764:	4629      	mov	r1, r5
 800e766:	f7f2 f98b 	bl	8000a80 <__aeabi_dcmpeq>
 800e76a:	b918      	cbnz	r0, 800e774 <__cvt+0xb8>
 800e76c:	f1c6 0601 	rsb	r6, r6, #1
 800e770:	f8ca 6000 	str.w	r6, [sl]
 800e774:	f8da 3000 	ldr.w	r3, [sl]
 800e778:	4499      	add	r9, r3
 800e77a:	e7d3      	b.n	800e724 <__cvt+0x68>
 800e77c:	1c59      	adds	r1, r3, #1
 800e77e:	9107      	str	r1, [sp, #28]
 800e780:	701a      	strb	r2, [r3, #0]
 800e782:	e7d9      	b.n	800e738 <__cvt+0x7c>

0800e784 <__exponent>:
 800e784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e786:	2900      	cmp	r1, #0
 800e788:	bfb6      	itet	lt
 800e78a:	232d      	movlt	r3, #45	@ 0x2d
 800e78c:	232b      	movge	r3, #43	@ 0x2b
 800e78e:	4249      	neglt	r1, r1
 800e790:	2909      	cmp	r1, #9
 800e792:	7002      	strb	r2, [r0, #0]
 800e794:	7043      	strb	r3, [r0, #1]
 800e796:	dd29      	ble.n	800e7ec <__exponent+0x68>
 800e798:	f10d 0307 	add.w	r3, sp, #7
 800e79c:	461d      	mov	r5, r3
 800e79e:	270a      	movs	r7, #10
 800e7a0:	fbb1 f6f7 	udiv	r6, r1, r7
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	fb07 1416 	mls	r4, r7, r6, r1
 800e7aa:	3430      	adds	r4, #48	@ 0x30
 800e7ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e7b0:	460c      	mov	r4, r1
 800e7b2:	2c63      	cmp	r4, #99	@ 0x63
 800e7b4:	4631      	mov	r1, r6
 800e7b6:	f103 33ff 	add.w	r3, r3, #4294967295
 800e7ba:	dcf1      	bgt.n	800e7a0 <__exponent+0x1c>
 800e7bc:	3130      	adds	r1, #48	@ 0x30
 800e7be:	1e94      	subs	r4, r2, #2
 800e7c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e7c4:	4623      	mov	r3, r4
 800e7c6:	1c41      	adds	r1, r0, #1
 800e7c8:	42ab      	cmp	r3, r5
 800e7ca:	d30a      	bcc.n	800e7e2 <__exponent+0x5e>
 800e7cc:	f10d 0309 	add.w	r3, sp, #9
 800e7d0:	1a9b      	subs	r3, r3, r2
 800e7d2:	42ac      	cmp	r4, r5
 800e7d4:	bf88      	it	hi
 800e7d6:	2300      	movhi	r3, #0
 800e7d8:	3302      	adds	r3, #2
 800e7da:	4403      	add	r3, r0
 800e7dc:	1a18      	subs	r0, r3, r0
 800e7de:	b003      	add	sp, #12
 800e7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e7e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e7ea:	e7ed      	b.n	800e7c8 <__exponent+0x44>
 800e7ec:	2330      	movs	r3, #48	@ 0x30
 800e7ee:	3130      	adds	r1, #48	@ 0x30
 800e7f0:	7083      	strb	r3, [r0, #2]
 800e7f2:	70c1      	strb	r1, [r0, #3]
 800e7f4:	1d03      	adds	r3, r0, #4
 800e7f6:	e7f1      	b.n	800e7dc <__exponent+0x58>

0800e7f8 <_printf_float>:
 800e7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7fc:	b091      	sub	sp, #68	@ 0x44
 800e7fe:	460c      	mov	r4, r1
 800e800:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800e804:	4616      	mov	r6, r2
 800e806:	461f      	mov	r7, r3
 800e808:	4605      	mov	r5, r0
 800e80a:	f000 fffd 	bl	800f808 <_localeconv_r>
 800e80e:	6803      	ldr	r3, [r0, #0]
 800e810:	4618      	mov	r0, r3
 800e812:	9308      	str	r3, [sp, #32]
 800e814:	f7f1 fd08 	bl	8000228 <strlen>
 800e818:	2300      	movs	r3, #0
 800e81a:	930e      	str	r3, [sp, #56]	@ 0x38
 800e81c:	f8d8 3000 	ldr.w	r3, [r8]
 800e820:	9009      	str	r0, [sp, #36]	@ 0x24
 800e822:	3307      	adds	r3, #7
 800e824:	f023 0307 	bic.w	r3, r3, #7
 800e828:	f103 0208 	add.w	r2, r3, #8
 800e82c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e830:	f8d4 b000 	ldr.w	fp, [r4]
 800e834:	f8c8 2000 	str.w	r2, [r8]
 800e838:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e83c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e840:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e842:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800e846:	f04f 32ff 	mov.w	r2, #4294967295
 800e84a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e84e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e852:	4b9c      	ldr	r3, [pc, #624]	@ (800eac4 <_printf_float+0x2cc>)
 800e854:	f7f2 f946 	bl	8000ae4 <__aeabi_dcmpun>
 800e858:	bb70      	cbnz	r0, 800e8b8 <_printf_float+0xc0>
 800e85a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e85e:	f04f 32ff 	mov.w	r2, #4294967295
 800e862:	4b98      	ldr	r3, [pc, #608]	@ (800eac4 <_printf_float+0x2cc>)
 800e864:	f7f2 f920 	bl	8000aa8 <__aeabi_dcmple>
 800e868:	bb30      	cbnz	r0, 800e8b8 <_printf_float+0xc0>
 800e86a:	2200      	movs	r2, #0
 800e86c:	2300      	movs	r3, #0
 800e86e:	4640      	mov	r0, r8
 800e870:	4649      	mov	r1, r9
 800e872:	f7f2 f90f 	bl	8000a94 <__aeabi_dcmplt>
 800e876:	b110      	cbz	r0, 800e87e <_printf_float+0x86>
 800e878:	232d      	movs	r3, #45	@ 0x2d
 800e87a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e87e:	4a92      	ldr	r2, [pc, #584]	@ (800eac8 <_printf_float+0x2d0>)
 800e880:	4b92      	ldr	r3, [pc, #584]	@ (800eacc <_printf_float+0x2d4>)
 800e882:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e886:	bf94      	ite	ls
 800e888:	4690      	movls	r8, r2
 800e88a:	4698      	movhi	r8, r3
 800e88c:	2303      	movs	r3, #3
 800e88e:	f04f 0900 	mov.w	r9, #0
 800e892:	6123      	str	r3, [r4, #16]
 800e894:	f02b 0304 	bic.w	r3, fp, #4
 800e898:	6023      	str	r3, [r4, #0]
 800e89a:	4633      	mov	r3, r6
 800e89c:	4621      	mov	r1, r4
 800e89e:	4628      	mov	r0, r5
 800e8a0:	9700      	str	r7, [sp, #0]
 800e8a2:	aa0f      	add	r2, sp, #60	@ 0x3c
 800e8a4:	f000 f9d4 	bl	800ec50 <_printf_common>
 800e8a8:	3001      	adds	r0, #1
 800e8aa:	f040 8090 	bne.w	800e9ce <_printf_float+0x1d6>
 800e8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800e8b2:	b011      	add	sp, #68	@ 0x44
 800e8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8b8:	4642      	mov	r2, r8
 800e8ba:	464b      	mov	r3, r9
 800e8bc:	4640      	mov	r0, r8
 800e8be:	4649      	mov	r1, r9
 800e8c0:	f7f2 f910 	bl	8000ae4 <__aeabi_dcmpun>
 800e8c4:	b148      	cbz	r0, 800e8da <_printf_float+0xe2>
 800e8c6:	464b      	mov	r3, r9
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	bfb8      	it	lt
 800e8cc:	232d      	movlt	r3, #45	@ 0x2d
 800e8ce:	4a80      	ldr	r2, [pc, #512]	@ (800ead0 <_printf_float+0x2d8>)
 800e8d0:	bfb8      	it	lt
 800e8d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e8d6:	4b7f      	ldr	r3, [pc, #508]	@ (800ead4 <_printf_float+0x2dc>)
 800e8d8:	e7d3      	b.n	800e882 <_printf_float+0x8a>
 800e8da:	6863      	ldr	r3, [r4, #4]
 800e8dc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800e8e0:	1c5a      	adds	r2, r3, #1
 800e8e2:	d13f      	bne.n	800e964 <_printf_float+0x16c>
 800e8e4:	2306      	movs	r3, #6
 800e8e6:	6063      	str	r3, [r4, #4]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800e8ee:	6023      	str	r3, [r4, #0]
 800e8f0:	9206      	str	r2, [sp, #24]
 800e8f2:	aa0e      	add	r2, sp, #56	@ 0x38
 800e8f4:	e9cd a204 	strd	sl, r2, [sp, #16]
 800e8f8:	aa0d      	add	r2, sp, #52	@ 0x34
 800e8fa:	9203      	str	r2, [sp, #12]
 800e8fc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800e900:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e904:	6863      	ldr	r3, [r4, #4]
 800e906:	4642      	mov	r2, r8
 800e908:	9300      	str	r3, [sp, #0]
 800e90a:	4628      	mov	r0, r5
 800e90c:	464b      	mov	r3, r9
 800e90e:	910a      	str	r1, [sp, #40]	@ 0x28
 800e910:	f7ff fed4 	bl	800e6bc <__cvt>
 800e914:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e916:	4680      	mov	r8, r0
 800e918:	2947      	cmp	r1, #71	@ 0x47
 800e91a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e91c:	d128      	bne.n	800e970 <_printf_float+0x178>
 800e91e:	1cc8      	adds	r0, r1, #3
 800e920:	db02      	blt.n	800e928 <_printf_float+0x130>
 800e922:	6863      	ldr	r3, [r4, #4]
 800e924:	4299      	cmp	r1, r3
 800e926:	dd40      	ble.n	800e9aa <_printf_float+0x1b2>
 800e928:	f1aa 0a02 	sub.w	sl, sl, #2
 800e92c:	fa5f fa8a 	uxtb.w	sl, sl
 800e930:	4652      	mov	r2, sl
 800e932:	3901      	subs	r1, #1
 800e934:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e938:	910d      	str	r1, [sp, #52]	@ 0x34
 800e93a:	f7ff ff23 	bl	800e784 <__exponent>
 800e93e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e940:	4681      	mov	r9, r0
 800e942:	1813      	adds	r3, r2, r0
 800e944:	2a01      	cmp	r2, #1
 800e946:	6123      	str	r3, [r4, #16]
 800e948:	dc02      	bgt.n	800e950 <_printf_float+0x158>
 800e94a:	6822      	ldr	r2, [r4, #0]
 800e94c:	07d2      	lsls	r2, r2, #31
 800e94e:	d501      	bpl.n	800e954 <_printf_float+0x15c>
 800e950:	3301      	adds	r3, #1
 800e952:	6123      	str	r3, [r4, #16]
 800e954:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d09e      	beq.n	800e89a <_printf_float+0xa2>
 800e95c:	232d      	movs	r3, #45	@ 0x2d
 800e95e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e962:	e79a      	b.n	800e89a <_printf_float+0xa2>
 800e964:	2947      	cmp	r1, #71	@ 0x47
 800e966:	d1bf      	bne.n	800e8e8 <_printf_float+0xf0>
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d1bd      	bne.n	800e8e8 <_printf_float+0xf0>
 800e96c:	2301      	movs	r3, #1
 800e96e:	e7ba      	b.n	800e8e6 <_printf_float+0xee>
 800e970:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e974:	d9dc      	bls.n	800e930 <_printf_float+0x138>
 800e976:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e97a:	d118      	bne.n	800e9ae <_printf_float+0x1b6>
 800e97c:	2900      	cmp	r1, #0
 800e97e:	6863      	ldr	r3, [r4, #4]
 800e980:	dd0b      	ble.n	800e99a <_printf_float+0x1a2>
 800e982:	6121      	str	r1, [r4, #16]
 800e984:	b913      	cbnz	r3, 800e98c <_printf_float+0x194>
 800e986:	6822      	ldr	r2, [r4, #0]
 800e988:	07d0      	lsls	r0, r2, #31
 800e98a:	d502      	bpl.n	800e992 <_printf_float+0x19a>
 800e98c:	3301      	adds	r3, #1
 800e98e:	440b      	add	r3, r1
 800e990:	6123      	str	r3, [r4, #16]
 800e992:	f04f 0900 	mov.w	r9, #0
 800e996:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e998:	e7dc      	b.n	800e954 <_printf_float+0x15c>
 800e99a:	b913      	cbnz	r3, 800e9a2 <_printf_float+0x1aa>
 800e99c:	6822      	ldr	r2, [r4, #0]
 800e99e:	07d2      	lsls	r2, r2, #31
 800e9a0:	d501      	bpl.n	800e9a6 <_printf_float+0x1ae>
 800e9a2:	3302      	adds	r3, #2
 800e9a4:	e7f4      	b.n	800e990 <_printf_float+0x198>
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	e7f2      	b.n	800e990 <_printf_float+0x198>
 800e9aa:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e9ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9b0:	4299      	cmp	r1, r3
 800e9b2:	db05      	blt.n	800e9c0 <_printf_float+0x1c8>
 800e9b4:	6823      	ldr	r3, [r4, #0]
 800e9b6:	6121      	str	r1, [r4, #16]
 800e9b8:	07d8      	lsls	r0, r3, #31
 800e9ba:	d5ea      	bpl.n	800e992 <_printf_float+0x19a>
 800e9bc:	1c4b      	adds	r3, r1, #1
 800e9be:	e7e7      	b.n	800e990 <_printf_float+0x198>
 800e9c0:	2900      	cmp	r1, #0
 800e9c2:	bfcc      	ite	gt
 800e9c4:	2201      	movgt	r2, #1
 800e9c6:	f1c1 0202 	rsble	r2, r1, #2
 800e9ca:	4413      	add	r3, r2
 800e9cc:	e7e0      	b.n	800e990 <_printf_float+0x198>
 800e9ce:	6823      	ldr	r3, [r4, #0]
 800e9d0:	055a      	lsls	r2, r3, #21
 800e9d2:	d407      	bmi.n	800e9e4 <_printf_float+0x1ec>
 800e9d4:	6923      	ldr	r3, [r4, #16]
 800e9d6:	4642      	mov	r2, r8
 800e9d8:	4631      	mov	r1, r6
 800e9da:	4628      	mov	r0, r5
 800e9dc:	47b8      	blx	r7
 800e9de:	3001      	adds	r0, #1
 800e9e0:	d12b      	bne.n	800ea3a <_printf_float+0x242>
 800e9e2:	e764      	b.n	800e8ae <_printf_float+0xb6>
 800e9e4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e9e8:	f240 80dc 	bls.w	800eba4 <_printf_float+0x3ac>
 800e9ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	f7f2 f844 	bl	8000a80 <__aeabi_dcmpeq>
 800e9f8:	2800      	cmp	r0, #0
 800e9fa:	d033      	beq.n	800ea64 <_printf_float+0x26c>
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	4631      	mov	r1, r6
 800ea00:	4628      	mov	r0, r5
 800ea02:	4a35      	ldr	r2, [pc, #212]	@ (800ead8 <_printf_float+0x2e0>)
 800ea04:	47b8      	blx	r7
 800ea06:	3001      	adds	r0, #1
 800ea08:	f43f af51 	beq.w	800e8ae <_printf_float+0xb6>
 800ea0c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800ea10:	4543      	cmp	r3, r8
 800ea12:	db02      	blt.n	800ea1a <_printf_float+0x222>
 800ea14:	6823      	ldr	r3, [r4, #0]
 800ea16:	07d8      	lsls	r0, r3, #31
 800ea18:	d50f      	bpl.n	800ea3a <_printf_float+0x242>
 800ea1a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ea1e:	4631      	mov	r1, r6
 800ea20:	4628      	mov	r0, r5
 800ea22:	47b8      	blx	r7
 800ea24:	3001      	adds	r0, #1
 800ea26:	f43f af42 	beq.w	800e8ae <_printf_float+0xb6>
 800ea2a:	f04f 0900 	mov.w	r9, #0
 800ea2e:	f108 38ff 	add.w	r8, r8, #4294967295
 800ea32:	f104 0a1a 	add.w	sl, r4, #26
 800ea36:	45c8      	cmp	r8, r9
 800ea38:	dc09      	bgt.n	800ea4e <_printf_float+0x256>
 800ea3a:	6823      	ldr	r3, [r4, #0]
 800ea3c:	079b      	lsls	r3, r3, #30
 800ea3e:	f100 8102 	bmi.w	800ec46 <_printf_float+0x44e>
 800ea42:	68e0      	ldr	r0, [r4, #12]
 800ea44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea46:	4298      	cmp	r0, r3
 800ea48:	bfb8      	it	lt
 800ea4a:	4618      	movlt	r0, r3
 800ea4c:	e731      	b.n	800e8b2 <_printf_float+0xba>
 800ea4e:	2301      	movs	r3, #1
 800ea50:	4652      	mov	r2, sl
 800ea52:	4631      	mov	r1, r6
 800ea54:	4628      	mov	r0, r5
 800ea56:	47b8      	blx	r7
 800ea58:	3001      	adds	r0, #1
 800ea5a:	f43f af28 	beq.w	800e8ae <_printf_float+0xb6>
 800ea5e:	f109 0901 	add.w	r9, r9, #1
 800ea62:	e7e8      	b.n	800ea36 <_printf_float+0x23e>
 800ea64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	dc38      	bgt.n	800eadc <_printf_float+0x2e4>
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	4631      	mov	r1, r6
 800ea6e:	4628      	mov	r0, r5
 800ea70:	4a19      	ldr	r2, [pc, #100]	@ (800ead8 <_printf_float+0x2e0>)
 800ea72:	47b8      	blx	r7
 800ea74:	3001      	adds	r0, #1
 800ea76:	f43f af1a 	beq.w	800e8ae <_printf_float+0xb6>
 800ea7a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800ea7e:	ea59 0303 	orrs.w	r3, r9, r3
 800ea82:	d102      	bne.n	800ea8a <_printf_float+0x292>
 800ea84:	6823      	ldr	r3, [r4, #0]
 800ea86:	07d9      	lsls	r1, r3, #31
 800ea88:	d5d7      	bpl.n	800ea3a <_printf_float+0x242>
 800ea8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ea8e:	4631      	mov	r1, r6
 800ea90:	4628      	mov	r0, r5
 800ea92:	47b8      	blx	r7
 800ea94:	3001      	adds	r0, #1
 800ea96:	f43f af0a 	beq.w	800e8ae <_printf_float+0xb6>
 800ea9a:	f04f 0a00 	mov.w	sl, #0
 800ea9e:	f104 0b1a 	add.w	fp, r4, #26
 800eaa2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eaa4:	425b      	negs	r3, r3
 800eaa6:	4553      	cmp	r3, sl
 800eaa8:	dc01      	bgt.n	800eaae <_printf_float+0x2b6>
 800eaaa:	464b      	mov	r3, r9
 800eaac:	e793      	b.n	800e9d6 <_printf_float+0x1de>
 800eaae:	2301      	movs	r3, #1
 800eab0:	465a      	mov	r2, fp
 800eab2:	4631      	mov	r1, r6
 800eab4:	4628      	mov	r0, r5
 800eab6:	47b8      	blx	r7
 800eab8:	3001      	adds	r0, #1
 800eaba:	f43f aef8 	beq.w	800e8ae <_printf_float+0xb6>
 800eabe:	f10a 0a01 	add.w	sl, sl, #1
 800eac2:	e7ee      	b.n	800eaa2 <_printf_float+0x2aa>
 800eac4:	7fefffff 	.word	0x7fefffff
 800eac8:	08013552 	.word	0x08013552
 800eacc:	08013556 	.word	0x08013556
 800ead0:	0801355a 	.word	0x0801355a
 800ead4:	0801355e 	.word	0x0801355e
 800ead8:	08013562 	.word	0x08013562
 800eadc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eade:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800eae2:	4553      	cmp	r3, sl
 800eae4:	bfa8      	it	ge
 800eae6:	4653      	movge	r3, sl
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	4699      	mov	r9, r3
 800eaec:	dc36      	bgt.n	800eb5c <_printf_float+0x364>
 800eaee:	f04f 0b00 	mov.w	fp, #0
 800eaf2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eaf6:	f104 021a 	add.w	r2, r4, #26
 800eafa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eafc:	930a      	str	r3, [sp, #40]	@ 0x28
 800eafe:	eba3 0309 	sub.w	r3, r3, r9
 800eb02:	455b      	cmp	r3, fp
 800eb04:	dc31      	bgt.n	800eb6a <_printf_float+0x372>
 800eb06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eb08:	459a      	cmp	sl, r3
 800eb0a:	dc3a      	bgt.n	800eb82 <_printf_float+0x38a>
 800eb0c:	6823      	ldr	r3, [r4, #0]
 800eb0e:	07da      	lsls	r2, r3, #31
 800eb10:	d437      	bmi.n	800eb82 <_printf_float+0x38a>
 800eb12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eb14:	ebaa 0903 	sub.w	r9, sl, r3
 800eb18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb1a:	ebaa 0303 	sub.w	r3, sl, r3
 800eb1e:	4599      	cmp	r9, r3
 800eb20:	bfa8      	it	ge
 800eb22:	4699      	movge	r9, r3
 800eb24:	f1b9 0f00 	cmp.w	r9, #0
 800eb28:	dc33      	bgt.n	800eb92 <_printf_float+0x39a>
 800eb2a:	f04f 0800 	mov.w	r8, #0
 800eb2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb32:	f104 0b1a 	add.w	fp, r4, #26
 800eb36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eb38:	ebaa 0303 	sub.w	r3, sl, r3
 800eb3c:	eba3 0309 	sub.w	r3, r3, r9
 800eb40:	4543      	cmp	r3, r8
 800eb42:	f77f af7a 	ble.w	800ea3a <_printf_float+0x242>
 800eb46:	2301      	movs	r3, #1
 800eb48:	465a      	mov	r2, fp
 800eb4a:	4631      	mov	r1, r6
 800eb4c:	4628      	mov	r0, r5
 800eb4e:	47b8      	blx	r7
 800eb50:	3001      	adds	r0, #1
 800eb52:	f43f aeac 	beq.w	800e8ae <_printf_float+0xb6>
 800eb56:	f108 0801 	add.w	r8, r8, #1
 800eb5a:	e7ec      	b.n	800eb36 <_printf_float+0x33e>
 800eb5c:	4642      	mov	r2, r8
 800eb5e:	4631      	mov	r1, r6
 800eb60:	4628      	mov	r0, r5
 800eb62:	47b8      	blx	r7
 800eb64:	3001      	adds	r0, #1
 800eb66:	d1c2      	bne.n	800eaee <_printf_float+0x2f6>
 800eb68:	e6a1      	b.n	800e8ae <_printf_float+0xb6>
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	4631      	mov	r1, r6
 800eb6e:	4628      	mov	r0, r5
 800eb70:	920a      	str	r2, [sp, #40]	@ 0x28
 800eb72:	47b8      	blx	r7
 800eb74:	3001      	adds	r0, #1
 800eb76:	f43f ae9a 	beq.w	800e8ae <_printf_float+0xb6>
 800eb7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eb7c:	f10b 0b01 	add.w	fp, fp, #1
 800eb80:	e7bb      	b.n	800eafa <_printf_float+0x302>
 800eb82:	4631      	mov	r1, r6
 800eb84:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800eb88:	4628      	mov	r0, r5
 800eb8a:	47b8      	blx	r7
 800eb8c:	3001      	adds	r0, #1
 800eb8e:	d1c0      	bne.n	800eb12 <_printf_float+0x31a>
 800eb90:	e68d      	b.n	800e8ae <_printf_float+0xb6>
 800eb92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eb94:	464b      	mov	r3, r9
 800eb96:	4631      	mov	r1, r6
 800eb98:	4628      	mov	r0, r5
 800eb9a:	4442      	add	r2, r8
 800eb9c:	47b8      	blx	r7
 800eb9e:	3001      	adds	r0, #1
 800eba0:	d1c3      	bne.n	800eb2a <_printf_float+0x332>
 800eba2:	e684      	b.n	800e8ae <_printf_float+0xb6>
 800eba4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800eba8:	f1ba 0f01 	cmp.w	sl, #1
 800ebac:	dc01      	bgt.n	800ebb2 <_printf_float+0x3ba>
 800ebae:	07db      	lsls	r3, r3, #31
 800ebb0:	d536      	bpl.n	800ec20 <_printf_float+0x428>
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	4642      	mov	r2, r8
 800ebb6:	4631      	mov	r1, r6
 800ebb8:	4628      	mov	r0, r5
 800ebba:	47b8      	blx	r7
 800ebbc:	3001      	adds	r0, #1
 800ebbe:	f43f ae76 	beq.w	800e8ae <_printf_float+0xb6>
 800ebc2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ebc6:	4631      	mov	r1, r6
 800ebc8:	4628      	mov	r0, r5
 800ebca:	47b8      	blx	r7
 800ebcc:	3001      	adds	r0, #1
 800ebce:	f43f ae6e 	beq.w	800e8ae <_printf_float+0xb6>
 800ebd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	2300      	movs	r3, #0
 800ebda:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ebde:	f7f1 ff4f 	bl	8000a80 <__aeabi_dcmpeq>
 800ebe2:	b9c0      	cbnz	r0, 800ec16 <_printf_float+0x41e>
 800ebe4:	4653      	mov	r3, sl
 800ebe6:	f108 0201 	add.w	r2, r8, #1
 800ebea:	4631      	mov	r1, r6
 800ebec:	4628      	mov	r0, r5
 800ebee:	47b8      	blx	r7
 800ebf0:	3001      	adds	r0, #1
 800ebf2:	d10c      	bne.n	800ec0e <_printf_float+0x416>
 800ebf4:	e65b      	b.n	800e8ae <_printf_float+0xb6>
 800ebf6:	2301      	movs	r3, #1
 800ebf8:	465a      	mov	r2, fp
 800ebfa:	4631      	mov	r1, r6
 800ebfc:	4628      	mov	r0, r5
 800ebfe:	47b8      	blx	r7
 800ec00:	3001      	adds	r0, #1
 800ec02:	f43f ae54 	beq.w	800e8ae <_printf_float+0xb6>
 800ec06:	f108 0801 	add.w	r8, r8, #1
 800ec0a:	45d0      	cmp	r8, sl
 800ec0c:	dbf3      	blt.n	800ebf6 <_printf_float+0x3fe>
 800ec0e:	464b      	mov	r3, r9
 800ec10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ec14:	e6e0      	b.n	800e9d8 <_printf_float+0x1e0>
 800ec16:	f04f 0800 	mov.w	r8, #0
 800ec1a:	f104 0b1a 	add.w	fp, r4, #26
 800ec1e:	e7f4      	b.n	800ec0a <_printf_float+0x412>
 800ec20:	2301      	movs	r3, #1
 800ec22:	4642      	mov	r2, r8
 800ec24:	e7e1      	b.n	800ebea <_printf_float+0x3f2>
 800ec26:	2301      	movs	r3, #1
 800ec28:	464a      	mov	r2, r9
 800ec2a:	4631      	mov	r1, r6
 800ec2c:	4628      	mov	r0, r5
 800ec2e:	47b8      	blx	r7
 800ec30:	3001      	adds	r0, #1
 800ec32:	f43f ae3c 	beq.w	800e8ae <_printf_float+0xb6>
 800ec36:	f108 0801 	add.w	r8, r8, #1
 800ec3a:	68e3      	ldr	r3, [r4, #12]
 800ec3c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ec3e:	1a5b      	subs	r3, r3, r1
 800ec40:	4543      	cmp	r3, r8
 800ec42:	dcf0      	bgt.n	800ec26 <_printf_float+0x42e>
 800ec44:	e6fd      	b.n	800ea42 <_printf_float+0x24a>
 800ec46:	f04f 0800 	mov.w	r8, #0
 800ec4a:	f104 0919 	add.w	r9, r4, #25
 800ec4e:	e7f4      	b.n	800ec3a <_printf_float+0x442>

0800ec50 <_printf_common>:
 800ec50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec54:	4616      	mov	r6, r2
 800ec56:	4698      	mov	r8, r3
 800ec58:	688a      	ldr	r2, [r1, #8]
 800ec5a:	690b      	ldr	r3, [r1, #16]
 800ec5c:	4607      	mov	r7, r0
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	bfb8      	it	lt
 800ec62:	4613      	movlt	r3, r2
 800ec64:	6033      	str	r3, [r6, #0]
 800ec66:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ec6a:	460c      	mov	r4, r1
 800ec6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ec70:	b10a      	cbz	r2, 800ec76 <_printf_common+0x26>
 800ec72:	3301      	adds	r3, #1
 800ec74:	6033      	str	r3, [r6, #0]
 800ec76:	6823      	ldr	r3, [r4, #0]
 800ec78:	0699      	lsls	r1, r3, #26
 800ec7a:	bf42      	ittt	mi
 800ec7c:	6833      	ldrmi	r3, [r6, #0]
 800ec7e:	3302      	addmi	r3, #2
 800ec80:	6033      	strmi	r3, [r6, #0]
 800ec82:	6825      	ldr	r5, [r4, #0]
 800ec84:	f015 0506 	ands.w	r5, r5, #6
 800ec88:	d106      	bne.n	800ec98 <_printf_common+0x48>
 800ec8a:	f104 0a19 	add.w	sl, r4, #25
 800ec8e:	68e3      	ldr	r3, [r4, #12]
 800ec90:	6832      	ldr	r2, [r6, #0]
 800ec92:	1a9b      	subs	r3, r3, r2
 800ec94:	42ab      	cmp	r3, r5
 800ec96:	dc2b      	bgt.n	800ecf0 <_printf_common+0xa0>
 800ec98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ec9c:	6822      	ldr	r2, [r4, #0]
 800ec9e:	3b00      	subs	r3, #0
 800eca0:	bf18      	it	ne
 800eca2:	2301      	movne	r3, #1
 800eca4:	0692      	lsls	r2, r2, #26
 800eca6:	d430      	bmi.n	800ed0a <_printf_common+0xba>
 800eca8:	4641      	mov	r1, r8
 800ecaa:	4638      	mov	r0, r7
 800ecac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ecb0:	47c8      	blx	r9
 800ecb2:	3001      	adds	r0, #1
 800ecb4:	d023      	beq.n	800ecfe <_printf_common+0xae>
 800ecb6:	6823      	ldr	r3, [r4, #0]
 800ecb8:	6922      	ldr	r2, [r4, #16]
 800ecba:	f003 0306 	and.w	r3, r3, #6
 800ecbe:	2b04      	cmp	r3, #4
 800ecc0:	bf14      	ite	ne
 800ecc2:	2500      	movne	r5, #0
 800ecc4:	6833      	ldreq	r3, [r6, #0]
 800ecc6:	f04f 0600 	mov.w	r6, #0
 800ecca:	bf08      	it	eq
 800eccc:	68e5      	ldreq	r5, [r4, #12]
 800ecce:	f104 041a 	add.w	r4, r4, #26
 800ecd2:	bf08      	it	eq
 800ecd4:	1aed      	subeq	r5, r5, r3
 800ecd6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ecda:	bf08      	it	eq
 800ecdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ece0:	4293      	cmp	r3, r2
 800ece2:	bfc4      	itt	gt
 800ece4:	1a9b      	subgt	r3, r3, r2
 800ece6:	18ed      	addgt	r5, r5, r3
 800ece8:	42b5      	cmp	r5, r6
 800ecea:	d11a      	bne.n	800ed22 <_printf_common+0xd2>
 800ecec:	2000      	movs	r0, #0
 800ecee:	e008      	b.n	800ed02 <_printf_common+0xb2>
 800ecf0:	2301      	movs	r3, #1
 800ecf2:	4652      	mov	r2, sl
 800ecf4:	4641      	mov	r1, r8
 800ecf6:	4638      	mov	r0, r7
 800ecf8:	47c8      	blx	r9
 800ecfa:	3001      	adds	r0, #1
 800ecfc:	d103      	bne.n	800ed06 <_printf_common+0xb6>
 800ecfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ed02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed06:	3501      	adds	r5, #1
 800ed08:	e7c1      	b.n	800ec8e <_printf_common+0x3e>
 800ed0a:	2030      	movs	r0, #48	@ 0x30
 800ed0c:	18e1      	adds	r1, r4, r3
 800ed0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ed12:	1c5a      	adds	r2, r3, #1
 800ed14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ed18:	4422      	add	r2, r4
 800ed1a:	3302      	adds	r3, #2
 800ed1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ed20:	e7c2      	b.n	800eca8 <_printf_common+0x58>
 800ed22:	2301      	movs	r3, #1
 800ed24:	4622      	mov	r2, r4
 800ed26:	4641      	mov	r1, r8
 800ed28:	4638      	mov	r0, r7
 800ed2a:	47c8      	blx	r9
 800ed2c:	3001      	adds	r0, #1
 800ed2e:	d0e6      	beq.n	800ecfe <_printf_common+0xae>
 800ed30:	3601      	adds	r6, #1
 800ed32:	e7d9      	b.n	800ece8 <_printf_common+0x98>

0800ed34 <_printf_i>:
 800ed34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed38:	7e0f      	ldrb	r7, [r1, #24]
 800ed3a:	4691      	mov	r9, r2
 800ed3c:	2f78      	cmp	r7, #120	@ 0x78
 800ed3e:	4680      	mov	r8, r0
 800ed40:	460c      	mov	r4, r1
 800ed42:	469a      	mov	sl, r3
 800ed44:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ed46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ed4a:	d807      	bhi.n	800ed5c <_printf_i+0x28>
 800ed4c:	2f62      	cmp	r7, #98	@ 0x62
 800ed4e:	d80a      	bhi.n	800ed66 <_printf_i+0x32>
 800ed50:	2f00      	cmp	r7, #0
 800ed52:	f000 80d3 	beq.w	800eefc <_printf_i+0x1c8>
 800ed56:	2f58      	cmp	r7, #88	@ 0x58
 800ed58:	f000 80ba 	beq.w	800eed0 <_printf_i+0x19c>
 800ed5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ed64:	e03a      	b.n	800eddc <_printf_i+0xa8>
 800ed66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ed6a:	2b15      	cmp	r3, #21
 800ed6c:	d8f6      	bhi.n	800ed5c <_printf_i+0x28>
 800ed6e:	a101      	add	r1, pc, #4	@ (adr r1, 800ed74 <_printf_i+0x40>)
 800ed70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed74:	0800edcd 	.word	0x0800edcd
 800ed78:	0800ede1 	.word	0x0800ede1
 800ed7c:	0800ed5d 	.word	0x0800ed5d
 800ed80:	0800ed5d 	.word	0x0800ed5d
 800ed84:	0800ed5d 	.word	0x0800ed5d
 800ed88:	0800ed5d 	.word	0x0800ed5d
 800ed8c:	0800ede1 	.word	0x0800ede1
 800ed90:	0800ed5d 	.word	0x0800ed5d
 800ed94:	0800ed5d 	.word	0x0800ed5d
 800ed98:	0800ed5d 	.word	0x0800ed5d
 800ed9c:	0800ed5d 	.word	0x0800ed5d
 800eda0:	0800eee3 	.word	0x0800eee3
 800eda4:	0800ee0b 	.word	0x0800ee0b
 800eda8:	0800ee9d 	.word	0x0800ee9d
 800edac:	0800ed5d 	.word	0x0800ed5d
 800edb0:	0800ed5d 	.word	0x0800ed5d
 800edb4:	0800ef05 	.word	0x0800ef05
 800edb8:	0800ed5d 	.word	0x0800ed5d
 800edbc:	0800ee0b 	.word	0x0800ee0b
 800edc0:	0800ed5d 	.word	0x0800ed5d
 800edc4:	0800ed5d 	.word	0x0800ed5d
 800edc8:	0800eea5 	.word	0x0800eea5
 800edcc:	6833      	ldr	r3, [r6, #0]
 800edce:	1d1a      	adds	r2, r3, #4
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	6032      	str	r2, [r6, #0]
 800edd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800edd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eddc:	2301      	movs	r3, #1
 800edde:	e09e      	b.n	800ef1e <_printf_i+0x1ea>
 800ede0:	6833      	ldr	r3, [r6, #0]
 800ede2:	6820      	ldr	r0, [r4, #0]
 800ede4:	1d19      	adds	r1, r3, #4
 800ede6:	6031      	str	r1, [r6, #0]
 800ede8:	0606      	lsls	r6, r0, #24
 800edea:	d501      	bpl.n	800edf0 <_printf_i+0xbc>
 800edec:	681d      	ldr	r5, [r3, #0]
 800edee:	e003      	b.n	800edf8 <_printf_i+0xc4>
 800edf0:	0645      	lsls	r5, r0, #25
 800edf2:	d5fb      	bpl.n	800edec <_printf_i+0xb8>
 800edf4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800edf8:	2d00      	cmp	r5, #0
 800edfa:	da03      	bge.n	800ee04 <_printf_i+0xd0>
 800edfc:	232d      	movs	r3, #45	@ 0x2d
 800edfe:	426d      	negs	r5, r5
 800ee00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee04:	230a      	movs	r3, #10
 800ee06:	4859      	ldr	r0, [pc, #356]	@ (800ef6c <_printf_i+0x238>)
 800ee08:	e011      	b.n	800ee2e <_printf_i+0xfa>
 800ee0a:	6821      	ldr	r1, [r4, #0]
 800ee0c:	6833      	ldr	r3, [r6, #0]
 800ee0e:	0608      	lsls	r0, r1, #24
 800ee10:	f853 5b04 	ldr.w	r5, [r3], #4
 800ee14:	d402      	bmi.n	800ee1c <_printf_i+0xe8>
 800ee16:	0649      	lsls	r1, r1, #25
 800ee18:	bf48      	it	mi
 800ee1a:	b2ad      	uxthmi	r5, r5
 800ee1c:	2f6f      	cmp	r7, #111	@ 0x6f
 800ee1e:	6033      	str	r3, [r6, #0]
 800ee20:	bf14      	ite	ne
 800ee22:	230a      	movne	r3, #10
 800ee24:	2308      	moveq	r3, #8
 800ee26:	4851      	ldr	r0, [pc, #324]	@ (800ef6c <_printf_i+0x238>)
 800ee28:	2100      	movs	r1, #0
 800ee2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ee2e:	6866      	ldr	r6, [r4, #4]
 800ee30:	2e00      	cmp	r6, #0
 800ee32:	bfa8      	it	ge
 800ee34:	6821      	ldrge	r1, [r4, #0]
 800ee36:	60a6      	str	r6, [r4, #8]
 800ee38:	bfa4      	itt	ge
 800ee3a:	f021 0104 	bicge.w	r1, r1, #4
 800ee3e:	6021      	strge	r1, [r4, #0]
 800ee40:	b90d      	cbnz	r5, 800ee46 <_printf_i+0x112>
 800ee42:	2e00      	cmp	r6, #0
 800ee44:	d04b      	beq.n	800eede <_printf_i+0x1aa>
 800ee46:	4616      	mov	r6, r2
 800ee48:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee4c:	fb03 5711 	mls	r7, r3, r1, r5
 800ee50:	5dc7      	ldrb	r7, [r0, r7]
 800ee52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee56:	462f      	mov	r7, r5
 800ee58:	42bb      	cmp	r3, r7
 800ee5a:	460d      	mov	r5, r1
 800ee5c:	d9f4      	bls.n	800ee48 <_printf_i+0x114>
 800ee5e:	2b08      	cmp	r3, #8
 800ee60:	d10b      	bne.n	800ee7a <_printf_i+0x146>
 800ee62:	6823      	ldr	r3, [r4, #0]
 800ee64:	07df      	lsls	r7, r3, #31
 800ee66:	d508      	bpl.n	800ee7a <_printf_i+0x146>
 800ee68:	6923      	ldr	r3, [r4, #16]
 800ee6a:	6861      	ldr	r1, [r4, #4]
 800ee6c:	4299      	cmp	r1, r3
 800ee6e:	bfde      	ittt	le
 800ee70:	2330      	movle	r3, #48	@ 0x30
 800ee72:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ee76:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ee7a:	1b92      	subs	r2, r2, r6
 800ee7c:	6122      	str	r2, [r4, #16]
 800ee7e:	464b      	mov	r3, r9
 800ee80:	4621      	mov	r1, r4
 800ee82:	4640      	mov	r0, r8
 800ee84:	f8cd a000 	str.w	sl, [sp]
 800ee88:	aa03      	add	r2, sp, #12
 800ee8a:	f7ff fee1 	bl	800ec50 <_printf_common>
 800ee8e:	3001      	adds	r0, #1
 800ee90:	d14a      	bne.n	800ef28 <_printf_i+0x1f4>
 800ee92:	f04f 30ff 	mov.w	r0, #4294967295
 800ee96:	b004      	add	sp, #16
 800ee98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee9c:	6823      	ldr	r3, [r4, #0]
 800ee9e:	f043 0320 	orr.w	r3, r3, #32
 800eea2:	6023      	str	r3, [r4, #0]
 800eea4:	2778      	movs	r7, #120	@ 0x78
 800eea6:	4832      	ldr	r0, [pc, #200]	@ (800ef70 <_printf_i+0x23c>)
 800eea8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eeac:	6823      	ldr	r3, [r4, #0]
 800eeae:	6831      	ldr	r1, [r6, #0]
 800eeb0:	061f      	lsls	r7, r3, #24
 800eeb2:	f851 5b04 	ldr.w	r5, [r1], #4
 800eeb6:	d402      	bmi.n	800eebe <_printf_i+0x18a>
 800eeb8:	065f      	lsls	r7, r3, #25
 800eeba:	bf48      	it	mi
 800eebc:	b2ad      	uxthmi	r5, r5
 800eebe:	6031      	str	r1, [r6, #0]
 800eec0:	07d9      	lsls	r1, r3, #31
 800eec2:	bf44      	itt	mi
 800eec4:	f043 0320 	orrmi.w	r3, r3, #32
 800eec8:	6023      	strmi	r3, [r4, #0]
 800eeca:	b11d      	cbz	r5, 800eed4 <_printf_i+0x1a0>
 800eecc:	2310      	movs	r3, #16
 800eece:	e7ab      	b.n	800ee28 <_printf_i+0xf4>
 800eed0:	4826      	ldr	r0, [pc, #152]	@ (800ef6c <_printf_i+0x238>)
 800eed2:	e7e9      	b.n	800eea8 <_printf_i+0x174>
 800eed4:	6823      	ldr	r3, [r4, #0]
 800eed6:	f023 0320 	bic.w	r3, r3, #32
 800eeda:	6023      	str	r3, [r4, #0]
 800eedc:	e7f6      	b.n	800eecc <_printf_i+0x198>
 800eede:	4616      	mov	r6, r2
 800eee0:	e7bd      	b.n	800ee5e <_printf_i+0x12a>
 800eee2:	6833      	ldr	r3, [r6, #0]
 800eee4:	6825      	ldr	r5, [r4, #0]
 800eee6:	1d18      	adds	r0, r3, #4
 800eee8:	6961      	ldr	r1, [r4, #20]
 800eeea:	6030      	str	r0, [r6, #0]
 800eeec:	062e      	lsls	r6, r5, #24
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	d501      	bpl.n	800eef6 <_printf_i+0x1c2>
 800eef2:	6019      	str	r1, [r3, #0]
 800eef4:	e002      	b.n	800eefc <_printf_i+0x1c8>
 800eef6:	0668      	lsls	r0, r5, #25
 800eef8:	d5fb      	bpl.n	800eef2 <_printf_i+0x1be>
 800eefa:	8019      	strh	r1, [r3, #0]
 800eefc:	2300      	movs	r3, #0
 800eefe:	4616      	mov	r6, r2
 800ef00:	6123      	str	r3, [r4, #16]
 800ef02:	e7bc      	b.n	800ee7e <_printf_i+0x14a>
 800ef04:	6833      	ldr	r3, [r6, #0]
 800ef06:	2100      	movs	r1, #0
 800ef08:	1d1a      	adds	r2, r3, #4
 800ef0a:	6032      	str	r2, [r6, #0]
 800ef0c:	681e      	ldr	r6, [r3, #0]
 800ef0e:	6862      	ldr	r2, [r4, #4]
 800ef10:	4630      	mov	r0, r6
 800ef12:	f000 fcf0 	bl	800f8f6 <memchr>
 800ef16:	b108      	cbz	r0, 800ef1c <_printf_i+0x1e8>
 800ef18:	1b80      	subs	r0, r0, r6
 800ef1a:	6060      	str	r0, [r4, #4]
 800ef1c:	6863      	ldr	r3, [r4, #4]
 800ef1e:	6123      	str	r3, [r4, #16]
 800ef20:	2300      	movs	r3, #0
 800ef22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef26:	e7aa      	b.n	800ee7e <_printf_i+0x14a>
 800ef28:	4632      	mov	r2, r6
 800ef2a:	4649      	mov	r1, r9
 800ef2c:	4640      	mov	r0, r8
 800ef2e:	6923      	ldr	r3, [r4, #16]
 800ef30:	47d0      	blx	sl
 800ef32:	3001      	adds	r0, #1
 800ef34:	d0ad      	beq.n	800ee92 <_printf_i+0x15e>
 800ef36:	6823      	ldr	r3, [r4, #0]
 800ef38:	079b      	lsls	r3, r3, #30
 800ef3a:	d413      	bmi.n	800ef64 <_printf_i+0x230>
 800ef3c:	68e0      	ldr	r0, [r4, #12]
 800ef3e:	9b03      	ldr	r3, [sp, #12]
 800ef40:	4298      	cmp	r0, r3
 800ef42:	bfb8      	it	lt
 800ef44:	4618      	movlt	r0, r3
 800ef46:	e7a6      	b.n	800ee96 <_printf_i+0x162>
 800ef48:	2301      	movs	r3, #1
 800ef4a:	4632      	mov	r2, r6
 800ef4c:	4649      	mov	r1, r9
 800ef4e:	4640      	mov	r0, r8
 800ef50:	47d0      	blx	sl
 800ef52:	3001      	adds	r0, #1
 800ef54:	d09d      	beq.n	800ee92 <_printf_i+0x15e>
 800ef56:	3501      	adds	r5, #1
 800ef58:	68e3      	ldr	r3, [r4, #12]
 800ef5a:	9903      	ldr	r1, [sp, #12]
 800ef5c:	1a5b      	subs	r3, r3, r1
 800ef5e:	42ab      	cmp	r3, r5
 800ef60:	dcf2      	bgt.n	800ef48 <_printf_i+0x214>
 800ef62:	e7eb      	b.n	800ef3c <_printf_i+0x208>
 800ef64:	2500      	movs	r5, #0
 800ef66:	f104 0619 	add.w	r6, r4, #25
 800ef6a:	e7f5      	b.n	800ef58 <_printf_i+0x224>
 800ef6c:	08013564 	.word	0x08013564
 800ef70:	08013575 	.word	0x08013575

0800ef74 <_scanf_float>:
 800ef74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef78:	b087      	sub	sp, #28
 800ef7a:	9303      	str	r3, [sp, #12]
 800ef7c:	688b      	ldr	r3, [r1, #8]
 800ef7e:	4617      	mov	r7, r2
 800ef80:	1e5a      	subs	r2, r3, #1
 800ef82:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ef86:	bf82      	ittt	hi
 800ef88:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ef8c:	eb03 0b05 	addhi.w	fp, r3, r5
 800ef90:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ef94:	460a      	mov	r2, r1
 800ef96:	f04f 0500 	mov.w	r5, #0
 800ef9a:	bf88      	it	hi
 800ef9c:	608b      	strhi	r3, [r1, #8]
 800ef9e:	680b      	ldr	r3, [r1, #0]
 800efa0:	4680      	mov	r8, r0
 800efa2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800efa6:	f842 3b1c 	str.w	r3, [r2], #28
 800efaa:	460c      	mov	r4, r1
 800efac:	bf98      	it	ls
 800efae:	f04f 0b00 	movls.w	fp, #0
 800efb2:	4616      	mov	r6, r2
 800efb4:	46aa      	mov	sl, r5
 800efb6:	46a9      	mov	r9, r5
 800efb8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800efbc:	9201      	str	r2, [sp, #4]
 800efbe:	9502      	str	r5, [sp, #8]
 800efc0:	68a2      	ldr	r2, [r4, #8]
 800efc2:	b152      	cbz	r2, 800efda <_scanf_float+0x66>
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	2b4e      	cmp	r3, #78	@ 0x4e
 800efca:	d865      	bhi.n	800f098 <_scanf_float+0x124>
 800efcc:	2b40      	cmp	r3, #64	@ 0x40
 800efce:	d83d      	bhi.n	800f04c <_scanf_float+0xd8>
 800efd0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800efd4:	b2c8      	uxtb	r0, r1
 800efd6:	280e      	cmp	r0, #14
 800efd8:	d93b      	bls.n	800f052 <_scanf_float+0xde>
 800efda:	f1b9 0f00 	cmp.w	r9, #0
 800efde:	d003      	beq.n	800efe8 <_scanf_float+0x74>
 800efe0:	6823      	ldr	r3, [r4, #0]
 800efe2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800efe6:	6023      	str	r3, [r4, #0]
 800efe8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800efec:	f1ba 0f01 	cmp.w	sl, #1
 800eff0:	f200 8118 	bhi.w	800f224 <_scanf_float+0x2b0>
 800eff4:	9b01      	ldr	r3, [sp, #4]
 800eff6:	429e      	cmp	r6, r3
 800eff8:	f200 8109 	bhi.w	800f20e <_scanf_float+0x29a>
 800effc:	2001      	movs	r0, #1
 800effe:	b007      	add	sp, #28
 800f000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f004:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f008:	2a0d      	cmp	r2, #13
 800f00a:	d8e6      	bhi.n	800efda <_scanf_float+0x66>
 800f00c:	a101      	add	r1, pc, #4	@ (adr r1, 800f014 <_scanf_float+0xa0>)
 800f00e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f012:	bf00      	nop
 800f014:	0800f15b 	.word	0x0800f15b
 800f018:	0800efdb 	.word	0x0800efdb
 800f01c:	0800efdb 	.word	0x0800efdb
 800f020:	0800efdb 	.word	0x0800efdb
 800f024:	0800f1bb 	.word	0x0800f1bb
 800f028:	0800f193 	.word	0x0800f193
 800f02c:	0800efdb 	.word	0x0800efdb
 800f030:	0800efdb 	.word	0x0800efdb
 800f034:	0800f169 	.word	0x0800f169
 800f038:	0800efdb 	.word	0x0800efdb
 800f03c:	0800efdb 	.word	0x0800efdb
 800f040:	0800efdb 	.word	0x0800efdb
 800f044:	0800efdb 	.word	0x0800efdb
 800f048:	0800f121 	.word	0x0800f121
 800f04c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f050:	e7da      	b.n	800f008 <_scanf_float+0x94>
 800f052:	290e      	cmp	r1, #14
 800f054:	d8c1      	bhi.n	800efda <_scanf_float+0x66>
 800f056:	a001      	add	r0, pc, #4	@ (adr r0, 800f05c <_scanf_float+0xe8>)
 800f058:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f05c:	0800f111 	.word	0x0800f111
 800f060:	0800efdb 	.word	0x0800efdb
 800f064:	0800f111 	.word	0x0800f111
 800f068:	0800f1a7 	.word	0x0800f1a7
 800f06c:	0800efdb 	.word	0x0800efdb
 800f070:	0800f0b9 	.word	0x0800f0b9
 800f074:	0800f0f7 	.word	0x0800f0f7
 800f078:	0800f0f7 	.word	0x0800f0f7
 800f07c:	0800f0f7 	.word	0x0800f0f7
 800f080:	0800f0f7 	.word	0x0800f0f7
 800f084:	0800f0f7 	.word	0x0800f0f7
 800f088:	0800f0f7 	.word	0x0800f0f7
 800f08c:	0800f0f7 	.word	0x0800f0f7
 800f090:	0800f0f7 	.word	0x0800f0f7
 800f094:	0800f0f7 	.word	0x0800f0f7
 800f098:	2b6e      	cmp	r3, #110	@ 0x6e
 800f09a:	d809      	bhi.n	800f0b0 <_scanf_float+0x13c>
 800f09c:	2b60      	cmp	r3, #96	@ 0x60
 800f09e:	d8b1      	bhi.n	800f004 <_scanf_float+0x90>
 800f0a0:	2b54      	cmp	r3, #84	@ 0x54
 800f0a2:	d07b      	beq.n	800f19c <_scanf_float+0x228>
 800f0a4:	2b59      	cmp	r3, #89	@ 0x59
 800f0a6:	d198      	bne.n	800efda <_scanf_float+0x66>
 800f0a8:	2d07      	cmp	r5, #7
 800f0aa:	d196      	bne.n	800efda <_scanf_float+0x66>
 800f0ac:	2508      	movs	r5, #8
 800f0ae:	e02c      	b.n	800f10a <_scanf_float+0x196>
 800f0b0:	2b74      	cmp	r3, #116	@ 0x74
 800f0b2:	d073      	beq.n	800f19c <_scanf_float+0x228>
 800f0b4:	2b79      	cmp	r3, #121	@ 0x79
 800f0b6:	e7f6      	b.n	800f0a6 <_scanf_float+0x132>
 800f0b8:	6821      	ldr	r1, [r4, #0]
 800f0ba:	05c8      	lsls	r0, r1, #23
 800f0bc:	d51b      	bpl.n	800f0f6 <_scanf_float+0x182>
 800f0be:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f0c2:	6021      	str	r1, [r4, #0]
 800f0c4:	f109 0901 	add.w	r9, r9, #1
 800f0c8:	f1bb 0f00 	cmp.w	fp, #0
 800f0cc:	d003      	beq.n	800f0d6 <_scanf_float+0x162>
 800f0ce:	3201      	adds	r2, #1
 800f0d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f0d4:	60a2      	str	r2, [r4, #8]
 800f0d6:	68a3      	ldr	r3, [r4, #8]
 800f0d8:	3b01      	subs	r3, #1
 800f0da:	60a3      	str	r3, [r4, #8]
 800f0dc:	6923      	ldr	r3, [r4, #16]
 800f0de:	3301      	adds	r3, #1
 800f0e0:	6123      	str	r3, [r4, #16]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	3b01      	subs	r3, #1
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	607b      	str	r3, [r7, #4]
 800f0ea:	f340 8087 	ble.w	800f1fc <_scanf_float+0x288>
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	3301      	adds	r3, #1
 800f0f2:	603b      	str	r3, [r7, #0]
 800f0f4:	e764      	b.n	800efc0 <_scanf_float+0x4c>
 800f0f6:	eb1a 0105 	adds.w	r1, sl, r5
 800f0fa:	f47f af6e 	bne.w	800efda <_scanf_float+0x66>
 800f0fe:	460d      	mov	r5, r1
 800f100:	468a      	mov	sl, r1
 800f102:	6822      	ldr	r2, [r4, #0]
 800f104:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f108:	6022      	str	r2, [r4, #0]
 800f10a:	f806 3b01 	strb.w	r3, [r6], #1
 800f10e:	e7e2      	b.n	800f0d6 <_scanf_float+0x162>
 800f110:	6822      	ldr	r2, [r4, #0]
 800f112:	0610      	lsls	r0, r2, #24
 800f114:	f57f af61 	bpl.w	800efda <_scanf_float+0x66>
 800f118:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f11c:	6022      	str	r2, [r4, #0]
 800f11e:	e7f4      	b.n	800f10a <_scanf_float+0x196>
 800f120:	f1ba 0f00 	cmp.w	sl, #0
 800f124:	d10e      	bne.n	800f144 <_scanf_float+0x1d0>
 800f126:	f1b9 0f00 	cmp.w	r9, #0
 800f12a:	d10e      	bne.n	800f14a <_scanf_float+0x1d6>
 800f12c:	6822      	ldr	r2, [r4, #0]
 800f12e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f132:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f136:	d108      	bne.n	800f14a <_scanf_float+0x1d6>
 800f138:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f13c:	f04f 0a01 	mov.w	sl, #1
 800f140:	6022      	str	r2, [r4, #0]
 800f142:	e7e2      	b.n	800f10a <_scanf_float+0x196>
 800f144:	f1ba 0f02 	cmp.w	sl, #2
 800f148:	d055      	beq.n	800f1f6 <_scanf_float+0x282>
 800f14a:	2d01      	cmp	r5, #1
 800f14c:	d002      	beq.n	800f154 <_scanf_float+0x1e0>
 800f14e:	2d04      	cmp	r5, #4
 800f150:	f47f af43 	bne.w	800efda <_scanf_float+0x66>
 800f154:	3501      	adds	r5, #1
 800f156:	b2ed      	uxtb	r5, r5
 800f158:	e7d7      	b.n	800f10a <_scanf_float+0x196>
 800f15a:	f1ba 0f01 	cmp.w	sl, #1
 800f15e:	f47f af3c 	bne.w	800efda <_scanf_float+0x66>
 800f162:	f04f 0a02 	mov.w	sl, #2
 800f166:	e7d0      	b.n	800f10a <_scanf_float+0x196>
 800f168:	b97d      	cbnz	r5, 800f18a <_scanf_float+0x216>
 800f16a:	f1b9 0f00 	cmp.w	r9, #0
 800f16e:	f47f af37 	bne.w	800efe0 <_scanf_float+0x6c>
 800f172:	6822      	ldr	r2, [r4, #0]
 800f174:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f178:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f17c:	f040 8103 	bne.w	800f386 <_scanf_float+0x412>
 800f180:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f184:	2501      	movs	r5, #1
 800f186:	6022      	str	r2, [r4, #0]
 800f188:	e7bf      	b.n	800f10a <_scanf_float+0x196>
 800f18a:	2d03      	cmp	r5, #3
 800f18c:	d0e2      	beq.n	800f154 <_scanf_float+0x1e0>
 800f18e:	2d05      	cmp	r5, #5
 800f190:	e7de      	b.n	800f150 <_scanf_float+0x1dc>
 800f192:	2d02      	cmp	r5, #2
 800f194:	f47f af21 	bne.w	800efda <_scanf_float+0x66>
 800f198:	2503      	movs	r5, #3
 800f19a:	e7b6      	b.n	800f10a <_scanf_float+0x196>
 800f19c:	2d06      	cmp	r5, #6
 800f19e:	f47f af1c 	bne.w	800efda <_scanf_float+0x66>
 800f1a2:	2507      	movs	r5, #7
 800f1a4:	e7b1      	b.n	800f10a <_scanf_float+0x196>
 800f1a6:	6822      	ldr	r2, [r4, #0]
 800f1a8:	0591      	lsls	r1, r2, #22
 800f1aa:	f57f af16 	bpl.w	800efda <_scanf_float+0x66>
 800f1ae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f1b2:	6022      	str	r2, [r4, #0]
 800f1b4:	f8cd 9008 	str.w	r9, [sp, #8]
 800f1b8:	e7a7      	b.n	800f10a <_scanf_float+0x196>
 800f1ba:	6822      	ldr	r2, [r4, #0]
 800f1bc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f1c0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f1c4:	d006      	beq.n	800f1d4 <_scanf_float+0x260>
 800f1c6:	0550      	lsls	r0, r2, #21
 800f1c8:	f57f af07 	bpl.w	800efda <_scanf_float+0x66>
 800f1cc:	f1b9 0f00 	cmp.w	r9, #0
 800f1d0:	f000 80d9 	beq.w	800f386 <_scanf_float+0x412>
 800f1d4:	0591      	lsls	r1, r2, #22
 800f1d6:	bf58      	it	pl
 800f1d8:	9902      	ldrpl	r1, [sp, #8]
 800f1da:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f1de:	bf58      	it	pl
 800f1e0:	eba9 0101 	subpl.w	r1, r9, r1
 800f1e4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f1e8:	f04f 0900 	mov.w	r9, #0
 800f1ec:	bf58      	it	pl
 800f1ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f1f2:	6022      	str	r2, [r4, #0]
 800f1f4:	e789      	b.n	800f10a <_scanf_float+0x196>
 800f1f6:	f04f 0a03 	mov.w	sl, #3
 800f1fa:	e786      	b.n	800f10a <_scanf_float+0x196>
 800f1fc:	4639      	mov	r1, r7
 800f1fe:	4640      	mov	r0, r8
 800f200:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f204:	4798      	blx	r3
 800f206:	2800      	cmp	r0, #0
 800f208:	f43f aeda 	beq.w	800efc0 <_scanf_float+0x4c>
 800f20c:	e6e5      	b.n	800efda <_scanf_float+0x66>
 800f20e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f212:	463a      	mov	r2, r7
 800f214:	4640      	mov	r0, r8
 800f216:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f21a:	4798      	blx	r3
 800f21c:	6923      	ldr	r3, [r4, #16]
 800f21e:	3b01      	subs	r3, #1
 800f220:	6123      	str	r3, [r4, #16]
 800f222:	e6e7      	b.n	800eff4 <_scanf_float+0x80>
 800f224:	1e6b      	subs	r3, r5, #1
 800f226:	2b06      	cmp	r3, #6
 800f228:	d824      	bhi.n	800f274 <_scanf_float+0x300>
 800f22a:	2d02      	cmp	r5, #2
 800f22c:	d836      	bhi.n	800f29c <_scanf_float+0x328>
 800f22e:	9b01      	ldr	r3, [sp, #4]
 800f230:	429e      	cmp	r6, r3
 800f232:	f67f aee3 	bls.w	800effc <_scanf_float+0x88>
 800f236:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f23a:	463a      	mov	r2, r7
 800f23c:	4640      	mov	r0, r8
 800f23e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f242:	4798      	blx	r3
 800f244:	6923      	ldr	r3, [r4, #16]
 800f246:	3b01      	subs	r3, #1
 800f248:	6123      	str	r3, [r4, #16]
 800f24a:	e7f0      	b.n	800f22e <_scanf_float+0x2ba>
 800f24c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f250:	463a      	mov	r2, r7
 800f252:	4640      	mov	r0, r8
 800f254:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f258:	4798      	blx	r3
 800f25a:	6923      	ldr	r3, [r4, #16]
 800f25c:	3b01      	subs	r3, #1
 800f25e:	6123      	str	r3, [r4, #16]
 800f260:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f264:	fa5f fa8a 	uxtb.w	sl, sl
 800f268:	f1ba 0f02 	cmp.w	sl, #2
 800f26c:	d1ee      	bne.n	800f24c <_scanf_float+0x2d8>
 800f26e:	3d03      	subs	r5, #3
 800f270:	b2ed      	uxtb	r5, r5
 800f272:	1b76      	subs	r6, r6, r5
 800f274:	6823      	ldr	r3, [r4, #0]
 800f276:	05da      	lsls	r2, r3, #23
 800f278:	d530      	bpl.n	800f2dc <_scanf_float+0x368>
 800f27a:	055b      	lsls	r3, r3, #21
 800f27c:	d511      	bpl.n	800f2a2 <_scanf_float+0x32e>
 800f27e:	9b01      	ldr	r3, [sp, #4]
 800f280:	429e      	cmp	r6, r3
 800f282:	f67f aebb 	bls.w	800effc <_scanf_float+0x88>
 800f286:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f28a:	463a      	mov	r2, r7
 800f28c:	4640      	mov	r0, r8
 800f28e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f292:	4798      	blx	r3
 800f294:	6923      	ldr	r3, [r4, #16]
 800f296:	3b01      	subs	r3, #1
 800f298:	6123      	str	r3, [r4, #16]
 800f29a:	e7f0      	b.n	800f27e <_scanf_float+0x30a>
 800f29c:	46aa      	mov	sl, r5
 800f29e:	46b3      	mov	fp, r6
 800f2a0:	e7de      	b.n	800f260 <_scanf_float+0x2ec>
 800f2a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f2a6:	6923      	ldr	r3, [r4, #16]
 800f2a8:	2965      	cmp	r1, #101	@ 0x65
 800f2aa:	f103 33ff 	add.w	r3, r3, #4294967295
 800f2ae:	f106 35ff 	add.w	r5, r6, #4294967295
 800f2b2:	6123      	str	r3, [r4, #16]
 800f2b4:	d00c      	beq.n	800f2d0 <_scanf_float+0x35c>
 800f2b6:	2945      	cmp	r1, #69	@ 0x45
 800f2b8:	d00a      	beq.n	800f2d0 <_scanf_float+0x35c>
 800f2ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f2be:	463a      	mov	r2, r7
 800f2c0:	4640      	mov	r0, r8
 800f2c2:	4798      	blx	r3
 800f2c4:	6923      	ldr	r3, [r4, #16]
 800f2c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f2ca:	3b01      	subs	r3, #1
 800f2cc:	1eb5      	subs	r5, r6, #2
 800f2ce:	6123      	str	r3, [r4, #16]
 800f2d0:	463a      	mov	r2, r7
 800f2d2:	4640      	mov	r0, r8
 800f2d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f2d8:	4798      	blx	r3
 800f2da:	462e      	mov	r6, r5
 800f2dc:	6822      	ldr	r2, [r4, #0]
 800f2de:	f012 0210 	ands.w	r2, r2, #16
 800f2e2:	d001      	beq.n	800f2e8 <_scanf_float+0x374>
 800f2e4:	2000      	movs	r0, #0
 800f2e6:	e68a      	b.n	800effe <_scanf_float+0x8a>
 800f2e8:	7032      	strb	r2, [r6, #0]
 800f2ea:	6823      	ldr	r3, [r4, #0]
 800f2ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f2f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f2f4:	d11c      	bne.n	800f330 <_scanf_float+0x3bc>
 800f2f6:	9b02      	ldr	r3, [sp, #8]
 800f2f8:	454b      	cmp	r3, r9
 800f2fa:	eba3 0209 	sub.w	r2, r3, r9
 800f2fe:	d123      	bne.n	800f348 <_scanf_float+0x3d4>
 800f300:	2200      	movs	r2, #0
 800f302:	4640      	mov	r0, r8
 800f304:	9901      	ldr	r1, [sp, #4]
 800f306:	f002 fd07 	bl	8011d18 <_strtod_r>
 800f30a:	9b03      	ldr	r3, [sp, #12]
 800f30c:	6825      	ldr	r5, [r4, #0]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	f015 0f02 	tst.w	r5, #2
 800f314:	4606      	mov	r6, r0
 800f316:	460f      	mov	r7, r1
 800f318:	f103 0204 	add.w	r2, r3, #4
 800f31c:	d01f      	beq.n	800f35e <_scanf_float+0x3ea>
 800f31e:	9903      	ldr	r1, [sp, #12]
 800f320:	600a      	str	r2, [r1, #0]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	e9c3 6700 	strd	r6, r7, [r3]
 800f328:	68e3      	ldr	r3, [r4, #12]
 800f32a:	3301      	adds	r3, #1
 800f32c:	60e3      	str	r3, [r4, #12]
 800f32e:	e7d9      	b.n	800f2e4 <_scanf_float+0x370>
 800f330:	9b04      	ldr	r3, [sp, #16]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d0e4      	beq.n	800f300 <_scanf_float+0x38c>
 800f336:	9905      	ldr	r1, [sp, #20]
 800f338:	230a      	movs	r3, #10
 800f33a:	4640      	mov	r0, r8
 800f33c:	3101      	adds	r1, #1
 800f33e:	f002 fd6b 	bl	8011e18 <_strtol_r>
 800f342:	9b04      	ldr	r3, [sp, #16]
 800f344:	9e05      	ldr	r6, [sp, #20]
 800f346:	1ac2      	subs	r2, r0, r3
 800f348:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f34c:	429e      	cmp	r6, r3
 800f34e:	bf28      	it	cs
 800f350:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f354:	4630      	mov	r0, r6
 800f356:	490d      	ldr	r1, [pc, #52]	@ (800f38c <_scanf_float+0x418>)
 800f358:	f000 f956 	bl	800f608 <siprintf>
 800f35c:	e7d0      	b.n	800f300 <_scanf_float+0x38c>
 800f35e:	076d      	lsls	r5, r5, #29
 800f360:	d4dd      	bmi.n	800f31e <_scanf_float+0x3aa>
 800f362:	9d03      	ldr	r5, [sp, #12]
 800f364:	602a      	str	r2, [r5, #0]
 800f366:	681d      	ldr	r5, [r3, #0]
 800f368:	4602      	mov	r2, r0
 800f36a:	460b      	mov	r3, r1
 800f36c:	f7f1 fbba 	bl	8000ae4 <__aeabi_dcmpun>
 800f370:	b120      	cbz	r0, 800f37c <_scanf_float+0x408>
 800f372:	4807      	ldr	r0, [pc, #28]	@ (800f390 <_scanf_float+0x41c>)
 800f374:	f000 fadc 	bl	800f930 <nanf>
 800f378:	6028      	str	r0, [r5, #0]
 800f37a:	e7d5      	b.n	800f328 <_scanf_float+0x3b4>
 800f37c:	4630      	mov	r0, r6
 800f37e:	4639      	mov	r1, r7
 800f380:	f7f1 fc0e 	bl	8000ba0 <__aeabi_d2f>
 800f384:	e7f8      	b.n	800f378 <_scanf_float+0x404>
 800f386:	f04f 0900 	mov.w	r9, #0
 800f38a:	e62d      	b.n	800efe8 <_scanf_float+0x74>
 800f38c:	08013586 	.word	0x08013586
 800f390:	0801391d 	.word	0x0801391d

0800f394 <std>:
 800f394:	2300      	movs	r3, #0
 800f396:	b510      	push	{r4, lr}
 800f398:	4604      	mov	r4, r0
 800f39a:	e9c0 3300 	strd	r3, r3, [r0]
 800f39e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f3a2:	6083      	str	r3, [r0, #8]
 800f3a4:	8181      	strh	r1, [r0, #12]
 800f3a6:	6643      	str	r3, [r0, #100]	@ 0x64
 800f3a8:	81c2      	strh	r2, [r0, #14]
 800f3aa:	6183      	str	r3, [r0, #24]
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	2208      	movs	r2, #8
 800f3b0:	305c      	adds	r0, #92	@ 0x5c
 800f3b2:	f000 fa21 	bl	800f7f8 <memset>
 800f3b6:	4b0d      	ldr	r3, [pc, #52]	@ (800f3ec <std+0x58>)
 800f3b8:	6224      	str	r4, [r4, #32]
 800f3ba:	6263      	str	r3, [r4, #36]	@ 0x24
 800f3bc:	4b0c      	ldr	r3, [pc, #48]	@ (800f3f0 <std+0x5c>)
 800f3be:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f3c0:	4b0c      	ldr	r3, [pc, #48]	@ (800f3f4 <std+0x60>)
 800f3c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f3c4:	4b0c      	ldr	r3, [pc, #48]	@ (800f3f8 <std+0x64>)
 800f3c6:	6323      	str	r3, [r4, #48]	@ 0x30
 800f3c8:	4b0c      	ldr	r3, [pc, #48]	@ (800f3fc <std+0x68>)
 800f3ca:	429c      	cmp	r4, r3
 800f3cc:	d006      	beq.n	800f3dc <std+0x48>
 800f3ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f3d2:	4294      	cmp	r4, r2
 800f3d4:	d002      	beq.n	800f3dc <std+0x48>
 800f3d6:	33d0      	adds	r3, #208	@ 0xd0
 800f3d8:	429c      	cmp	r4, r3
 800f3da:	d105      	bne.n	800f3e8 <std+0x54>
 800f3dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3e4:	f000 ba84 	b.w	800f8f0 <__retarget_lock_init_recursive>
 800f3e8:	bd10      	pop	{r4, pc}
 800f3ea:	bf00      	nop
 800f3ec:	0800f649 	.word	0x0800f649
 800f3f0:	0800f66b 	.word	0x0800f66b
 800f3f4:	0800f6a3 	.word	0x0800f6a3
 800f3f8:	0800f6c7 	.word	0x0800f6c7
 800f3fc:	20001b2c 	.word	0x20001b2c

0800f400 <stdio_exit_handler>:
 800f400:	4a02      	ldr	r2, [pc, #8]	@ (800f40c <stdio_exit_handler+0xc>)
 800f402:	4903      	ldr	r1, [pc, #12]	@ (800f410 <stdio_exit_handler+0x10>)
 800f404:	4803      	ldr	r0, [pc, #12]	@ (800f414 <stdio_exit_handler+0x14>)
 800f406:	f000 b869 	b.w	800f4dc <_fwalk_sglue>
 800f40a:	bf00      	nop
 800f40c:	200001fc 	.word	0x200001fc
 800f410:	0801244d 	.word	0x0801244d
 800f414:	2000020c 	.word	0x2000020c

0800f418 <cleanup_stdio>:
 800f418:	6841      	ldr	r1, [r0, #4]
 800f41a:	4b0c      	ldr	r3, [pc, #48]	@ (800f44c <cleanup_stdio+0x34>)
 800f41c:	b510      	push	{r4, lr}
 800f41e:	4299      	cmp	r1, r3
 800f420:	4604      	mov	r4, r0
 800f422:	d001      	beq.n	800f428 <cleanup_stdio+0x10>
 800f424:	f003 f812 	bl	801244c <_fflush_r>
 800f428:	68a1      	ldr	r1, [r4, #8]
 800f42a:	4b09      	ldr	r3, [pc, #36]	@ (800f450 <cleanup_stdio+0x38>)
 800f42c:	4299      	cmp	r1, r3
 800f42e:	d002      	beq.n	800f436 <cleanup_stdio+0x1e>
 800f430:	4620      	mov	r0, r4
 800f432:	f003 f80b 	bl	801244c <_fflush_r>
 800f436:	68e1      	ldr	r1, [r4, #12]
 800f438:	4b06      	ldr	r3, [pc, #24]	@ (800f454 <cleanup_stdio+0x3c>)
 800f43a:	4299      	cmp	r1, r3
 800f43c:	d004      	beq.n	800f448 <cleanup_stdio+0x30>
 800f43e:	4620      	mov	r0, r4
 800f440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f444:	f003 b802 	b.w	801244c <_fflush_r>
 800f448:	bd10      	pop	{r4, pc}
 800f44a:	bf00      	nop
 800f44c:	20001b2c 	.word	0x20001b2c
 800f450:	20001b94 	.word	0x20001b94
 800f454:	20001bfc 	.word	0x20001bfc

0800f458 <global_stdio_init.part.0>:
 800f458:	b510      	push	{r4, lr}
 800f45a:	4b0b      	ldr	r3, [pc, #44]	@ (800f488 <global_stdio_init.part.0+0x30>)
 800f45c:	4c0b      	ldr	r4, [pc, #44]	@ (800f48c <global_stdio_init.part.0+0x34>)
 800f45e:	4a0c      	ldr	r2, [pc, #48]	@ (800f490 <global_stdio_init.part.0+0x38>)
 800f460:	4620      	mov	r0, r4
 800f462:	601a      	str	r2, [r3, #0]
 800f464:	2104      	movs	r1, #4
 800f466:	2200      	movs	r2, #0
 800f468:	f7ff ff94 	bl	800f394 <std>
 800f46c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f470:	2201      	movs	r2, #1
 800f472:	2109      	movs	r1, #9
 800f474:	f7ff ff8e 	bl	800f394 <std>
 800f478:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f47c:	2202      	movs	r2, #2
 800f47e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f482:	2112      	movs	r1, #18
 800f484:	f7ff bf86 	b.w	800f394 <std>
 800f488:	20001c64 	.word	0x20001c64
 800f48c:	20001b2c 	.word	0x20001b2c
 800f490:	0800f401 	.word	0x0800f401

0800f494 <__sfp_lock_acquire>:
 800f494:	4801      	ldr	r0, [pc, #4]	@ (800f49c <__sfp_lock_acquire+0x8>)
 800f496:	f000 ba2c 	b.w	800f8f2 <__retarget_lock_acquire_recursive>
 800f49a:	bf00      	nop
 800f49c:	20001c6d 	.word	0x20001c6d

0800f4a0 <__sfp_lock_release>:
 800f4a0:	4801      	ldr	r0, [pc, #4]	@ (800f4a8 <__sfp_lock_release+0x8>)
 800f4a2:	f000 ba27 	b.w	800f8f4 <__retarget_lock_release_recursive>
 800f4a6:	bf00      	nop
 800f4a8:	20001c6d 	.word	0x20001c6d

0800f4ac <__sinit>:
 800f4ac:	b510      	push	{r4, lr}
 800f4ae:	4604      	mov	r4, r0
 800f4b0:	f7ff fff0 	bl	800f494 <__sfp_lock_acquire>
 800f4b4:	6a23      	ldr	r3, [r4, #32]
 800f4b6:	b11b      	cbz	r3, 800f4c0 <__sinit+0x14>
 800f4b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4bc:	f7ff bff0 	b.w	800f4a0 <__sfp_lock_release>
 800f4c0:	4b04      	ldr	r3, [pc, #16]	@ (800f4d4 <__sinit+0x28>)
 800f4c2:	6223      	str	r3, [r4, #32]
 800f4c4:	4b04      	ldr	r3, [pc, #16]	@ (800f4d8 <__sinit+0x2c>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d1f5      	bne.n	800f4b8 <__sinit+0xc>
 800f4cc:	f7ff ffc4 	bl	800f458 <global_stdio_init.part.0>
 800f4d0:	e7f2      	b.n	800f4b8 <__sinit+0xc>
 800f4d2:	bf00      	nop
 800f4d4:	0800f419 	.word	0x0800f419
 800f4d8:	20001c64 	.word	0x20001c64

0800f4dc <_fwalk_sglue>:
 800f4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4e0:	4607      	mov	r7, r0
 800f4e2:	4688      	mov	r8, r1
 800f4e4:	4614      	mov	r4, r2
 800f4e6:	2600      	movs	r6, #0
 800f4e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f4ec:	f1b9 0901 	subs.w	r9, r9, #1
 800f4f0:	d505      	bpl.n	800f4fe <_fwalk_sglue+0x22>
 800f4f2:	6824      	ldr	r4, [r4, #0]
 800f4f4:	2c00      	cmp	r4, #0
 800f4f6:	d1f7      	bne.n	800f4e8 <_fwalk_sglue+0xc>
 800f4f8:	4630      	mov	r0, r6
 800f4fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4fe:	89ab      	ldrh	r3, [r5, #12]
 800f500:	2b01      	cmp	r3, #1
 800f502:	d907      	bls.n	800f514 <_fwalk_sglue+0x38>
 800f504:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f508:	3301      	adds	r3, #1
 800f50a:	d003      	beq.n	800f514 <_fwalk_sglue+0x38>
 800f50c:	4629      	mov	r1, r5
 800f50e:	4638      	mov	r0, r7
 800f510:	47c0      	blx	r8
 800f512:	4306      	orrs	r6, r0
 800f514:	3568      	adds	r5, #104	@ 0x68
 800f516:	e7e9      	b.n	800f4ec <_fwalk_sglue+0x10>

0800f518 <iprintf>:
 800f518:	b40f      	push	{r0, r1, r2, r3}
 800f51a:	b507      	push	{r0, r1, r2, lr}
 800f51c:	4906      	ldr	r1, [pc, #24]	@ (800f538 <iprintf+0x20>)
 800f51e:	ab04      	add	r3, sp, #16
 800f520:	6808      	ldr	r0, [r1, #0]
 800f522:	f853 2b04 	ldr.w	r2, [r3], #4
 800f526:	6881      	ldr	r1, [r0, #8]
 800f528:	9301      	str	r3, [sp, #4]
 800f52a:	f002 fdf7 	bl	801211c <_vfiprintf_r>
 800f52e:	b003      	add	sp, #12
 800f530:	f85d eb04 	ldr.w	lr, [sp], #4
 800f534:	b004      	add	sp, #16
 800f536:	4770      	bx	lr
 800f538:	20000208 	.word	0x20000208

0800f53c <putchar>:
 800f53c:	4b02      	ldr	r3, [pc, #8]	@ (800f548 <putchar+0xc>)
 800f53e:	4601      	mov	r1, r0
 800f540:	6818      	ldr	r0, [r3, #0]
 800f542:	6882      	ldr	r2, [r0, #8]
 800f544:	f003 b80b 	b.w	801255e <_putc_r>
 800f548:	20000208 	.word	0x20000208

0800f54c <_puts_r>:
 800f54c:	6a03      	ldr	r3, [r0, #32]
 800f54e:	b570      	push	{r4, r5, r6, lr}
 800f550:	4605      	mov	r5, r0
 800f552:	460e      	mov	r6, r1
 800f554:	6884      	ldr	r4, [r0, #8]
 800f556:	b90b      	cbnz	r3, 800f55c <_puts_r+0x10>
 800f558:	f7ff ffa8 	bl	800f4ac <__sinit>
 800f55c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f55e:	07db      	lsls	r3, r3, #31
 800f560:	d405      	bmi.n	800f56e <_puts_r+0x22>
 800f562:	89a3      	ldrh	r3, [r4, #12]
 800f564:	0598      	lsls	r0, r3, #22
 800f566:	d402      	bmi.n	800f56e <_puts_r+0x22>
 800f568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f56a:	f000 f9c2 	bl	800f8f2 <__retarget_lock_acquire_recursive>
 800f56e:	89a3      	ldrh	r3, [r4, #12]
 800f570:	0719      	lsls	r1, r3, #28
 800f572:	d502      	bpl.n	800f57a <_puts_r+0x2e>
 800f574:	6923      	ldr	r3, [r4, #16]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d135      	bne.n	800f5e6 <_puts_r+0x9a>
 800f57a:	4621      	mov	r1, r4
 800f57c:	4628      	mov	r0, r5
 800f57e:	f000 f8e5 	bl	800f74c <__swsetup_r>
 800f582:	b380      	cbz	r0, 800f5e6 <_puts_r+0x9a>
 800f584:	f04f 35ff 	mov.w	r5, #4294967295
 800f588:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f58a:	07da      	lsls	r2, r3, #31
 800f58c:	d405      	bmi.n	800f59a <_puts_r+0x4e>
 800f58e:	89a3      	ldrh	r3, [r4, #12]
 800f590:	059b      	lsls	r3, r3, #22
 800f592:	d402      	bmi.n	800f59a <_puts_r+0x4e>
 800f594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f596:	f000 f9ad 	bl	800f8f4 <__retarget_lock_release_recursive>
 800f59a:	4628      	mov	r0, r5
 800f59c:	bd70      	pop	{r4, r5, r6, pc}
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	da04      	bge.n	800f5ac <_puts_r+0x60>
 800f5a2:	69a2      	ldr	r2, [r4, #24]
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	dc17      	bgt.n	800f5d8 <_puts_r+0x8c>
 800f5a8:	290a      	cmp	r1, #10
 800f5aa:	d015      	beq.n	800f5d8 <_puts_r+0x8c>
 800f5ac:	6823      	ldr	r3, [r4, #0]
 800f5ae:	1c5a      	adds	r2, r3, #1
 800f5b0:	6022      	str	r2, [r4, #0]
 800f5b2:	7019      	strb	r1, [r3, #0]
 800f5b4:	68a3      	ldr	r3, [r4, #8]
 800f5b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f5ba:	3b01      	subs	r3, #1
 800f5bc:	60a3      	str	r3, [r4, #8]
 800f5be:	2900      	cmp	r1, #0
 800f5c0:	d1ed      	bne.n	800f59e <_puts_r+0x52>
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	da11      	bge.n	800f5ea <_puts_r+0x9e>
 800f5c6:	4622      	mov	r2, r4
 800f5c8:	210a      	movs	r1, #10
 800f5ca:	4628      	mov	r0, r5
 800f5cc:	f000 f87f 	bl	800f6ce <__swbuf_r>
 800f5d0:	3001      	adds	r0, #1
 800f5d2:	d0d7      	beq.n	800f584 <_puts_r+0x38>
 800f5d4:	250a      	movs	r5, #10
 800f5d6:	e7d7      	b.n	800f588 <_puts_r+0x3c>
 800f5d8:	4622      	mov	r2, r4
 800f5da:	4628      	mov	r0, r5
 800f5dc:	f000 f877 	bl	800f6ce <__swbuf_r>
 800f5e0:	3001      	adds	r0, #1
 800f5e2:	d1e7      	bne.n	800f5b4 <_puts_r+0x68>
 800f5e4:	e7ce      	b.n	800f584 <_puts_r+0x38>
 800f5e6:	3e01      	subs	r6, #1
 800f5e8:	e7e4      	b.n	800f5b4 <_puts_r+0x68>
 800f5ea:	6823      	ldr	r3, [r4, #0]
 800f5ec:	1c5a      	adds	r2, r3, #1
 800f5ee:	6022      	str	r2, [r4, #0]
 800f5f0:	220a      	movs	r2, #10
 800f5f2:	701a      	strb	r2, [r3, #0]
 800f5f4:	e7ee      	b.n	800f5d4 <_puts_r+0x88>
	...

0800f5f8 <puts>:
 800f5f8:	4b02      	ldr	r3, [pc, #8]	@ (800f604 <puts+0xc>)
 800f5fa:	4601      	mov	r1, r0
 800f5fc:	6818      	ldr	r0, [r3, #0]
 800f5fe:	f7ff bfa5 	b.w	800f54c <_puts_r>
 800f602:	bf00      	nop
 800f604:	20000208 	.word	0x20000208

0800f608 <siprintf>:
 800f608:	b40e      	push	{r1, r2, r3}
 800f60a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f60e:	b500      	push	{lr}
 800f610:	b09c      	sub	sp, #112	@ 0x70
 800f612:	ab1d      	add	r3, sp, #116	@ 0x74
 800f614:	9002      	str	r0, [sp, #8]
 800f616:	9006      	str	r0, [sp, #24]
 800f618:	9107      	str	r1, [sp, #28]
 800f61a:	9104      	str	r1, [sp, #16]
 800f61c:	4808      	ldr	r0, [pc, #32]	@ (800f640 <siprintf+0x38>)
 800f61e:	4909      	ldr	r1, [pc, #36]	@ (800f644 <siprintf+0x3c>)
 800f620:	f853 2b04 	ldr.w	r2, [r3], #4
 800f624:	9105      	str	r1, [sp, #20]
 800f626:	6800      	ldr	r0, [r0, #0]
 800f628:	a902      	add	r1, sp, #8
 800f62a:	9301      	str	r3, [sp, #4]
 800f62c:	f002 fc52 	bl	8011ed4 <_svfiprintf_r>
 800f630:	2200      	movs	r2, #0
 800f632:	9b02      	ldr	r3, [sp, #8]
 800f634:	701a      	strb	r2, [r3, #0]
 800f636:	b01c      	add	sp, #112	@ 0x70
 800f638:	f85d eb04 	ldr.w	lr, [sp], #4
 800f63c:	b003      	add	sp, #12
 800f63e:	4770      	bx	lr
 800f640:	20000208 	.word	0x20000208
 800f644:	ffff0208 	.word	0xffff0208

0800f648 <__sread>:
 800f648:	b510      	push	{r4, lr}
 800f64a:	460c      	mov	r4, r1
 800f64c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f650:	f000 f900 	bl	800f854 <_read_r>
 800f654:	2800      	cmp	r0, #0
 800f656:	bfab      	itete	ge
 800f658:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f65a:	89a3      	ldrhlt	r3, [r4, #12]
 800f65c:	181b      	addge	r3, r3, r0
 800f65e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f662:	bfac      	ite	ge
 800f664:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f666:	81a3      	strhlt	r3, [r4, #12]
 800f668:	bd10      	pop	{r4, pc}

0800f66a <__swrite>:
 800f66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f66e:	461f      	mov	r7, r3
 800f670:	898b      	ldrh	r3, [r1, #12]
 800f672:	4605      	mov	r5, r0
 800f674:	05db      	lsls	r3, r3, #23
 800f676:	460c      	mov	r4, r1
 800f678:	4616      	mov	r6, r2
 800f67a:	d505      	bpl.n	800f688 <__swrite+0x1e>
 800f67c:	2302      	movs	r3, #2
 800f67e:	2200      	movs	r2, #0
 800f680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f684:	f000 f8d4 	bl	800f830 <_lseek_r>
 800f688:	89a3      	ldrh	r3, [r4, #12]
 800f68a:	4632      	mov	r2, r6
 800f68c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f690:	81a3      	strh	r3, [r4, #12]
 800f692:	4628      	mov	r0, r5
 800f694:	463b      	mov	r3, r7
 800f696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f69a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f69e:	f000 b8eb 	b.w	800f878 <_write_r>

0800f6a2 <__sseek>:
 800f6a2:	b510      	push	{r4, lr}
 800f6a4:	460c      	mov	r4, r1
 800f6a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6aa:	f000 f8c1 	bl	800f830 <_lseek_r>
 800f6ae:	1c43      	adds	r3, r0, #1
 800f6b0:	89a3      	ldrh	r3, [r4, #12]
 800f6b2:	bf15      	itete	ne
 800f6b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f6b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f6ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f6be:	81a3      	strheq	r3, [r4, #12]
 800f6c0:	bf18      	it	ne
 800f6c2:	81a3      	strhne	r3, [r4, #12]
 800f6c4:	bd10      	pop	{r4, pc}

0800f6c6 <__sclose>:
 800f6c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6ca:	f000 b8a1 	b.w	800f810 <_close_r>

0800f6ce <__swbuf_r>:
 800f6ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6d0:	460e      	mov	r6, r1
 800f6d2:	4614      	mov	r4, r2
 800f6d4:	4605      	mov	r5, r0
 800f6d6:	b118      	cbz	r0, 800f6e0 <__swbuf_r+0x12>
 800f6d8:	6a03      	ldr	r3, [r0, #32]
 800f6da:	b90b      	cbnz	r3, 800f6e0 <__swbuf_r+0x12>
 800f6dc:	f7ff fee6 	bl	800f4ac <__sinit>
 800f6e0:	69a3      	ldr	r3, [r4, #24]
 800f6e2:	60a3      	str	r3, [r4, #8]
 800f6e4:	89a3      	ldrh	r3, [r4, #12]
 800f6e6:	071a      	lsls	r2, r3, #28
 800f6e8:	d501      	bpl.n	800f6ee <__swbuf_r+0x20>
 800f6ea:	6923      	ldr	r3, [r4, #16]
 800f6ec:	b943      	cbnz	r3, 800f700 <__swbuf_r+0x32>
 800f6ee:	4621      	mov	r1, r4
 800f6f0:	4628      	mov	r0, r5
 800f6f2:	f000 f82b 	bl	800f74c <__swsetup_r>
 800f6f6:	b118      	cbz	r0, 800f700 <__swbuf_r+0x32>
 800f6f8:	f04f 37ff 	mov.w	r7, #4294967295
 800f6fc:	4638      	mov	r0, r7
 800f6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f700:	6823      	ldr	r3, [r4, #0]
 800f702:	6922      	ldr	r2, [r4, #16]
 800f704:	b2f6      	uxtb	r6, r6
 800f706:	1a98      	subs	r0, r3, r2
 800f708:	6963      	ldr	r3, [r4, #20]
 800f70a:	4637      	mov	r7, r6
 800f70c:	4283      	cmp	r3, r0
 800f70e:	dc05      	bgt.n	800f71c <__swbuf_r+0x4e>
 800f710:	4621      	mov	r1, r4
 800f712:	4628      	mov	r0, r5
 800f714:	f002 fe9a 	bl	801244c <_fflush_r>
 800f718:	2800      	cmp	r0, #0
 800f71a:	d1ed      	bne.n	800f6f8 <__swbuf_r+0x2a>
 800f71c:	68a3      	ldr	r3, [r4, #8]
 800f71e:	3b01      	subs	r3, #1
 800f720:	60a3      	str	r3, [r4, #8]
 800f722:	6823      	ldr	r3, [r4, #0]
 800f724:	1c5a      	adds	r2, r3, #1
 800f726:	6022      	str	r2, [r4, #0]
 800f728:	701e      	strb	r6, [r3, #0]
 800f72a:	6962      	ldr	r2, [r4, #20]
 800f72c:	1c43      	adds	r3, r0, #1
 800f72e:	429a      	cmp	r2, r3
 800f730:	d004      	beq.n	800f73c <__swbuf_r+0x6e>
 800f732:	89a3      	ldrh	r3, [r4, #12]
 800f734:	07db      	lsls	r3, r3, #31
 800f736:	d5e1      	bpl.n	800f6fc <__swbuf_r+0x2e>
 800f738:	2e0a      	cmp	r6, #10
 800f73a:	d1df      	bne.n	800f6fc <__swbuf_r+0x2e>
 800f73c:	4621      	mov	r1, r4
 800f73e:	4628      	mov	r0, r5
 800f740:	f002 fe84 	bl	801244c <_fflush_r>
 800f744:	2800      	cmp	r0, #0
 800f746:	d0d9      	beq.n	800f6fc <__swbuf_r+0x2e>
 800f748:	e7d6      	b.n	800f6f8 <__swbuf_r+0x2a>
	...

0800f74c <__swsetup_r>:
 800f74c:	b538      	push	{r3, r4, r5, lr}
 800f74e:	4b29      	ldr	r3, [pc, #164]	@ (800f7f4 <__swsetup_r+0xa8>)
 800f750:	4605      	mov	r5, r0
 800f752:	6818      	ldr	r0, [r3, #0]
 800f754:	460c      	mov	r4, r1
 800f756:	b118      	cbz	r0, 800f760 <__swsetup_r+0x14>
 800f758:	6a03      	ldr	r3, [r0, #32]
 800f75a:	b90b      	cbnz	r3, 800f760 <__swsetup_r+0x14>
 800f75c:	f7ff fea6 	bl	800f4ac <__sinit>
 800f760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f764:	0719      	lsls	r1, r3, #28
 800f766:	d422      	bmi.n	800f7ae <__swsetup_r+0x62>
 800f768:	06da      	lsls	r2, r3, #27
 800f76a:	d407      	bmi.n	800f77c <__swsetup_r+0x30>
 800f76c:	2209      	movs	r2, #9
 800f76e:	602a      	str	r2, [r5, #0]
 800f770:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f774:	f04f 30ff 	mov.w	r0, #4294967295
 800f778:	81a3      	strh	r3, [r4, #12]
 800f77a:	e033      	b.n	800f7e4 <__swsetup_r+0x98>
 800f77c:	0758      	lsls	r0, r3, #29
 800f77e:	d512      	bpl.n	800f7a6 <__swsetup_r+0x5a>
 800f780:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f782:	b141      	cbz	r1, 800f796 <__swsetup_r+0x4a>
 800f784:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f788:	4299      	cmp	r1, r3
 800f78a:	d002      	beq.n	800f792 <__swsetup_r+0x46>
 800f78c:	4628      	mov	r0, r5
 800f78e:	f000 ff23 	bl	80105d8 <_free_r>
 800f792:	2300      	movs	r3, #0
 800f794:	6363      	str	r3, [r4, #52]	@ 0x34
 800f796:	89a3      	ldrh	r3, [r4, #12]
 800f798:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f79c:	81a3      	strh	r3, [r4, #12]
 800f79e:	2300      	movs	r3, #0
 800f7a0:	6063      	str	r3, [r4, #4]
 800f7a2:	6923      	ldr	r3, [r4, #16]
 800f7a4:	6023      	str	r3, [r4, #0]
 800f7a6:	89a3      	ldrh	r3, [r4, #12]
 800f7a8:	f043 0308 	orr.w	r3, r3, #8
 800f7ac:	81a3      	strh	r3, [r4, #12]
 800f7ae:	6923      	ldr	r3, [r4, #16]
 800f7b0:	b94b      	cbnz	r3, 800f7c6 <__swsetup_r+0x7a>
 800f7b2:	89a3      	ldrh	r3, [r4, #12]
 800f7b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f7b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f7bc:	d003      	beq.n	800f7c6 <__swsetup_r+0x7a>
 800f7be:	4621      	mov	r1, r4
 800f7c0:	4628      	mov	r0, r5
 800f7c2:	f002 fe90 	bl	80124e6 <__smakebuf_r>
 800f7c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7ca:	f013 0201 	ands.w	r2, r3, #1
 800f7ce:	d00a      	beq.n	800f7e6 <__swsetup_r+0x9a>
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	60a2      	str	r2, [r4, #8]
 800f7d4:	6962      	ldr	r2, [r4, #20]
 800f7d6:	4252      	negs	r2, r2
 800f7d8:	61a2      	str	r2, [r4, #24]
 800f7da:	6922      	ldr	r2, [r4, #16]
 800f7dc:	b942      	cbnz	r2, 800f7f0 <__swsetup_r+0xa4>
 800f7de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f7e2:	d1c5      	bne.n	800f770 <__swsetup_r+0x24>
 800f7e4:	bd38      	pop	{r3, r4, r5, pc}
 800f7e6:	0799      	lsls	r1, r3, #30
 800f7e8:	bf58      	it	pl
 800f7ea:	6962      	ldrpl	r2, [r4, #20]
 800f7ec:	60a2      	str	r2, [r4, #8]
 800f7ee:	e7f4      	b.n	800f7da <__swsetup_r+0x8e>
 800f7f0:	2000      	movs	r0, #0
 800f7f2:	e7f7      	b.n	800f7e4 <__swsetup_r+0x98>
 800f7f4:	20000208 	.word	0x20000208

0800f7f8 <memset>:
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	4402      	add	r2, r0
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	d100      	bne.n	800f802 <memset+0xa>
 800f800:	4770      	bx	lr
 800f802:	f803 1b01 	strb.w	r1, [r3], #1
 800f806:	e7f9      	b.n	800f7fc <memset+0x4>

0800f808 <_localeconv_r>:
 800f808:	4800      	ldr	r0, [pc, #0]	@ (800f80c <_localeconv_r+0x4>)
 800f80a:	4770      	bx	lr
 800f80c:	20000348 	.word	0x20000348

0800f810 <_close_r>:
 800f810:	b538      	push	{r3, r4, r5, lr}
 800f812:	2300      	movs	r3, #0
 800f814:	4d05      	ldr	r5, [pc, #20]	@ (800f82c <_close_r+0x1c>)
 800f816:	4604      	mov	r4, r0
 800f818:	4608      	mov	r0, r1
 800f81a:	602b      	str	r3, [r5, #0]
 800f81c:	f7f2 fbf3 	bl	8002006 <_close>
 800f820:	1c43      	adds	r3, r0, #1
 800f822:	d102      	bne.n	800f82a <_close_r+0x1a>
 800f824:	682b      	ldr	r3, [r5, #0]
 800f826:	b103      	cbz	r3, 800f82a <_close_r+0x1a>
 800f828:	6023      	str	r3, [r4, #0]
 800f82a:	bd38      	pop	{r3, r4, r5, pc}
 800f82c:	20001c68 	.word	0x20001c68

0800f830 <_lseek_r>:
 800f830:	b538      	push	{r3, r4, r5, lr}
 800f832:	4604      	mov	r4, r0
 800f834:	4608      	mov	r0, r1
 800f836:	4611      	mov	r1, r2
 800f838:	2200      	movs	r2, #0
 800f83a:	4d05      	ldr	r5, [pc, #20]	@ (800f850 <_lseek_r+0x20>)
 800f83c:	602a      	str	r2, [r5, #0]
 800f83e:	461a      	mov	r2, r3
 800f840:	f7f2 fc05 	bl	800204e <_lseek>
 800f844:	1c43      	adds	r3, r0, #1
 800f846:	d102      	bne.n	800f84e <_lseek_r+0x1e>
 800f848:	682b      	ldr	r3, [r5, #0]
 800f84a:	b103      	cbz	r3, 800f84e <_lseek_r+0x1e>
 800f84c:	6023      	str	r3, [r4, #0]
 800f84e:	bd38      	pop	{r3, r4, r5, pc}
 800f850:	20001c68 	.word	0x20001c68

0800f854 <_read_r>:
 800f854:	b538      	push	{r3, r4, r5, lr}
 800f856:	4604      	mov	r4, r0
 800f858:	4608      	mov	r0, r1
 800f85a:	4611      	mov	r1, r2
 800f85c:	2200      	movs	r2, #0
 800f85e:	4d05      	ldr	r5, [pc, #20]	@ (800f874 <_read_r+0x20>)
 800f860:	602a      	str	r2, [r5, #0]
 800f862:	461a      	mov	r2, r3
 800f864:	f7f2 fb96 	bl	8001f94 <_read>
 800f868:	1c43      	adds	r3, r0, #1
 800f86a:	d102      	bne.n	800f872 <_read_r+0x1e>
 800f86c:	682b      	ldr	r3, [r5, #0]
 800f86e:	b103      	cbz	r3, 800f872 <_read_r+0x1e>
 800f870:	6023      	str	r3, [r4, #0]
 800f872:	bd38      	pop	{r3, r4, r5, pc}
 800f874:	20001c68 	.word	0x20001c68

0800f878 <_write_r>:
 800f878:	b538      	push	{r3, r4, r5, lr}
 800f87a:	4604      	mov	r4, r0
 800f87c:	4608      	mov	r0, r1
 800f87e:	4611      	mov	r1, r2
 800f880:	2200      	movs	r2, #0
 800f882:	4d05      	ldr	r5, [pc, #20]	@ (800f898 <_write_r+0x20>)
 800f884:	602a      	str	r2, [r5, #0]
 800f886:	461a      	mov	r2, r3
 800f888:	f7f2 fba1 	bl	8001fce <_write>
 800f88c:	1c43      	adds	r3, r0, #1
 800f88e:	d102      	bne.n	800f896 <_write_r+0x1e>
 800f890:	682b      	ldr	r3, [r5, #0]
 800f892:	b103      	cbz	r3, 800f896 <_write_r+0x1e>
 800f894:	6023      	str	r3, [r4, #0]
 800f896:	bd38      	pop	{r3, r4, r5, pc}
 800f898:	20001c68 	.word	0x20001c68

0800f89c <__errno>:
 800f89c:	4b01      	ldr	r3, [pc, #4]	@ (800f8a4 <__errno+0x8>)
 800f89e:	6818      	ldr	r0, [r3, #0]
 800f8a0:	4770      	bx	lr
 800f8a2:	bf00      	nop
 800f8a4:	20000208 	.word	0x20000208

0800f8a8 <__libc_init_array>:
 800f8a8:	b570      	push	{r4, r5, r6, lr}
 800f8aa:	2600      	movs	r6, #0
 800f8ac:	4d0c      	ldr	r5, [pc, #48]	@ (800f8e0 <__libc_init_array+0x38>)
 800f8ae:	4c0d      	ldr	r4, [pc, #52]	@ (800f8e4 <__libc_init_array+0x3c>)
 800f8b0:	1b64      	subs	r4, r4, r5
 800f8b2:	10a4      	asrs	r4, r4, #2
 800f8b4:	42a6      	cmp	r6, r4
 800f8b6:	d109      	bne.n	800f8cc <__libc_init_array+0x24>
 800f8b8:	f003 fb08 	bl	8012ecc <_init>
 800f8bc:	2600      	movs	r6, #0
 800f8be:	4d0a      	ldr	r5, [pc, #40]	@ (800f8e8 <__libc_init_array+0x40>)
 800f8c0:	4c0a      	ldr	r4, [pc, #40]	@ (800f8ec <__libc_init_array+0x44>)
 800f8c2:	1b64      	subs	r4, r4, r5
 800f8c4:	10a4      	asrs	r4, r4, #2
 800f8c6:	42a6      	cmp	r6, r4
 800f8c8:	d105      	bne.n	800f8d6 <__libc_init_array+0x2e>
 800f8ca:	bd70      	pop	{r4, r5, r6, pc}
 800f8cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8d0:	4798      	blx	r3
 800f8d2:	3601      	adds	r6, #1
 800f8d4:	e7ee      	b.n	800f8b4 <__libc_init_array+0xc>
 800f8d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8da:	4798      	blx	r3
 800f8dc:	3601      	adds	r6, #1
 800f8de:	e7f2      	b.n	800f8c6 <__libc_init_array+0x1e>
 800f8e0:	08013988 	.word	0x08013988
 800f8e4:	08013988 	.word	0x08013988
 800f8e8:	08013988 	.word	0x08013988
 800f8ec:	0801398c 	.word	0x0801398c

0800f8f0 <__retarget_lock_init_recursive>:
 800f8f0:	4770      	bx	lr

0800f8f2 <__retarget_lock_acquire_recursive>:
 800f8f2:	4770      	bx	lr

0800f8f4 <__retarget_lock_release_recursive>:
 800f8f4:	4770      	bx	lr

0800f8f6 <memchr>:
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	b510      	push	{r4, lr}
 800f8fa:	b2c9      	uxtb	r1, r1
 800f8fc:	4402      	add	r2, r0
 800f8fe:	4293      	cmp	r3, r2
 800f900:	4618      	mov	r0, r3
 800f902:	d101      	bne.n	800f908 <memchr+0x12>
 800f904:	2000      	movs	r0, #0
 800f906:	e003      	b.n	800f910 <memchr+0x1a>
 800f908:	7804      	ldrb	r4, [r0, #0]
 800f90a:	3301      	adds	r3, #1
 800f90c:	428c      	cmp	r4, r1
 800f90e:	d1f6      	bne.n	800f8fe <memchr+0x8>
 800f910:	bd10      	pop	{r4, pc}

0800f912 <memcpy>:
 800f912:	440a      	add	r2, r1
 800f914:	4291      	cmp	r1, r2
 800f916:	f100 33ff 	add.w	r3, r0, #4294967295
 800f91a:	d100      	bne.n	800f91e <memcpy+0xc>
 800f91c:	4770      	bx	lr
 800f91e:	b510      	push	{r4, lr}
 800f920:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f924:	4291      	cmp	r1, r2
 800f926:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f92a:	d1f9      	bne.n	800f920 <memcpy+0xe>
 800f92c:	bd10      	pop	{r4, pc}
	...

0800f930 <nanf>:
 800f930:	4800      	ldr	r0, [pc, #0]	@ (800f934 <nanf+0x4>)
 800f932:	4770      	bx	lr
 800f934:	7fc00000 	.word	0x7fc00000

0800f938 <quorem>:
 800f938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f93c:	6903      	ldr	r3, [r0, #16]
 800f93e:	690c      	ldr	r4, [r1, #16]
 800f940:	4607      	mov	r7, r0
 800f942:	42a3      	cmp	r3, r4
 800f944:	db7e      	blt.n	800fa44 <quorem+0x10c>
 800f946:	3c01      	subs	r4, #1
 800f948:	00a3      	lsls	r3, r4, #2
 800f94a:	f100 0514 	add.w	r5, r0, #20
 800f94e:	f101 0814 	add.w	r8, r1, #20
 800f952:	9300      	str	r3, [sp, #0]
 800f954:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f958:	9301      	str	r3, [sp, #4]
 800f95a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f95e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f962:	3301      	adds	r3, #1
 800f964:	429a      	cmp	r2, r3
 800f966:	fbb2 f6f3 	udiv	r6, r2, r3
 800f96a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f96e:	d32e      	bcc.n	800f9ce <quorem+0x96>
 800f970:	f04f 0a00 	mov.w	sl, #0
 800f974:	46c4      	mov	ip, r8
 800f976:	46ae      	mov	lr, r5
 800f978:	46d3      	mov	fp, sl
 800f97a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f97e:	b298      	uxth	r0, r3
 800f980:	fb06 a000 	mla	r0, r6, r0, sl
 800f984:	0c1b      	lsrs	r3, r3, #16
 800f986:	0c02      	lsrs	r2, r0, #16
 800f988:	fb06 2303 	mla	r3, r6, r3, r2
 800f98c:	f8de 2000 	ldr.w	r2, [lr]
 800f990:	b280      	uxth	r0, r0
 800f992:	b292      	uxth	r2, r2
 800f994:	1a12      	subs	r2, r2, r0
 800f996:	445a      	add	r2, fp
 800f998:	f8de 0000 	ldr.w	r0, [lr]
 800f99c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f9a0:	b29b      	uxth	r3, r3
 800f9a2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f9a6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f9aa:	b292      	uxth	r2, r2
 800f9ac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f9b0:	45e1      	cmp	r9, ip
 800f9b2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f9b6:	f84e 2b04 	str.w	r2, [lr], #4
 800f9ba:	d2de      	bcs.n	800f97a <quorem+0x42>
 800f9bc:	9b00      	ldr	r3, [sp, #0]
 800f9be:	58eb      	ldr	r3, [r5, r3]
 800f9c0:	b92b      	cbnz	r3, 800f9ce <quorem+0x96>
 800f9c2:	9b01      	ldr	r3, [sp, #4]
 800f9c4:	3b04      	subs	r3, #4
 800f9c6:	429d      	cmp	r5, r3
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	d32f      	bcc.n	800fa2c <quorem+0xf4>
 800f9cc:	613c      	str	r4, [r7, #16]
 800f9ce:	4638      	mov	r0, r7
 800f9d0:	f001 f9c2 	bl	8010d58 <__mcmp>
 800f9d4:	2800      	cmp	r0, #0
 800f9d6:	db25      	blt.n	800fa24 <quorem+0xec>
 800f9d8:	4629      	mov	r1, r5
 800f9da:	2000      	movs	r0, #0
 800f9dc:	f858 2b04 	ldr.w	r2, [r8], #4
 800f9e0:	f8d1 c000 	ldr.w	ip, [r1]
 800f9e4:	fa1f fe82 	uxth.w	lr, r2
 800f9e8:	fa1f f38c 	uxth.w	r3, ip
 800f9ec:	eba3 030e 	sub.w	r3, r3, lr
 800f9f0:	4403      	add	r3, r0
 800f9f2:	0c12      	lsrs	r2, r2, #16
 800f9f4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f9f8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f9fc:	b29b      	uxth	r3, r3
 800f9fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa02:	45c1      	cmp	r9, r8
 800fa04:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fa08:	f841 3b04 	str.w	r3, [r1], #4
 800fa0c:	d2e6      	bcs.n	800f9dc <quorem+0xa4>
 800fa0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa16:	b922      	cbnz	r2, 800fa22 <quorem+0xea>
 800fa18:	3b04      	subs	r3, #4
 800fa1a:	429d      	cmp	r5, r3
 800fa1c:	461a      	mov	r2, r3
 800fa1e:	d30b      	bcc.n	800fa38 <quorem+0x100>
 800fa20:	613c      	str	r4, [r7, #16]
 800fa22:	3601      	adds	r6, #1
 800fa24:	4630      	mov	r0, r6
 800fa26:	b003      	add	sp, #12
 800fa28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa2c:	6812      	ldr	r2, [r2, #0]
 800fa2e:	3b04      	subs	r3, #4
 800fa30:	2a00      	cmp	r2, #0
 800fa32:	d1cb      	bne.n	800f9cc <quorem+0x94>
 800fa34:	3c01      	subs	r4, #1
 800fa36:	e7c6      	b.n	800f9c6 <quorem+0x8e>
 800fa38:	6812      	ldr	r2, [r2, #0]
 800fa3a:	3b04      	subs	r3, #4
 800fa3c:	2a00      	cmp	r2, #0
 800fa3e:	d1ef      	bne.n	800fa20 <quorem+0xe8>
 800fa40:	3c01      	subs	r4, #1
 800fa42:	e7ea      	b.n	800fa1a <quorem+0xe2>
 800fa44:	2000      	movs	r0, #0
 800fa46:	e7ee      	b.n	800fa26 <quorem+0xee>

0800fa48 <_dtoa_r>:
 800fa48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa4c:	4614      	mov	r4, r2
 800fa4e:	461d      	mov	r5, r3
 800fa50:	69c7      	ldr	r7, [r0, #28]
 800fa52:	b097      	sub	sp, #92	@ 0x5c
 800fa54:	4683      	mov	fp, r0
 800fa56:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800fa5a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800fa5c:	b97f      	cbnz	r7, 800fa7e <_dtoa_r+0x36>
 800fa5e:	2010      	movs	r0, #16
 800fa60:	f000 fe02 	bl	8010668 <malloc>
 800fa64:	4602      	mov	r2, r0
 800fa66:	f8cb 001c 	str.w	r0, [fp, #28]
 800fa6a:	b920      	cbnz	r0, 800fa76 <_dtoa_r+0x2e>
 800fa6c:	21ef      	movs	r1, #239	@ 0xef
 800fa6e:	4ba8      	ldr	r3, [pc, #672]	@ (800fd10 <_dtoa_r+0x2c8>)
 800fa70:	48a8      	ldr	r0, [pc, #672]	@ (800fd14 <_dtoa_r+0x2cc>)
 800fa72:	f002 fe0d 	bl	8012690 <__assert_func>
 800fa76:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fa7a:	6007      	str	r7, [r0, #0]
 800fa7c:	60c7      	str	r7, [r0, #12]
 800fa7e:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fa82:	6819      	ldr	r1, [r3, #0]
 800fa84:	b159      	cbz	r1, 800fa9e <_dtoa_r+0x56>
 800fa86:	685a      	ldr	r2, [r3, #4]
 800fa88:	2301      	movs	r3, #1
 800fa8a:	4093      	lsls	r3, r2
 800fa8c:	604a      	str	r2, [r1, #4]
 800fa8e:	608b      	str	r3, [r1, #8]
 800fa90:	4658      	mov	r0, fp
 800fa92:	f000 fedf 	bl	8010854 <_Bfree>
 800fa96:	2200      	movs	r2, #0
 800fa98:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fa9c:	601a      	str	r2, [r3, #0]
 800fa9e:	1e2b      	subs	r3, r5, #0
 800faa0:	bfaf      	iteee	ge
 800faa2:	2300      	movge	r3, #0
 800faa4:	2201      	movlt	r2, #1
 800faa6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800faaa:	9303      	strlt	r3, [sp, #12]
 800faac:	bfa8      	it	ge
 800faae:	6033      	strge	r3, [r6, #0]
 800fab0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800fab4:	4b98      	ldr	r3, [pc, #608]	@ (800fd18 <_dtoa_r+0x2d0>)
 800fab6:	bfb8      	it	lt
 800fab8:	6032      	strlt	r2, [r6, #0]
 800faba:	ea33 0308 	bics.w	r3, r3, r8
 800fabe:	d112      	bne.n	800fae6 <_dtoa_r+0x9e>
 800fac0:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fac4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800fac6:	6013      	str	r3, [r2, #0]
 800fac8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800facc:	4323      	orrs	r3, r4
 800face:	f000 8550 	beq.w	8010572 <_dtoa_r+0xb2a>
 800fad2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800fad4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800fd1c <_dtoa_r+0x2d4>
 800fad8:	2b00      	cmp	r3, #0
 800fada:	f000 8552 	beq.w	8010582 <_dtoa_r+0xb3a>
 800fade:	f10a 0303 	add.w	r3, sl, #3
 800fae2:	f000 bd4c 	b.w	801057e <_dtoa_r+0xb36>
 800fae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800faea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800faee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800faf2:	2200      	movs	r2, #0
 800faf4:	2300      	movs	r3, #0
 800faf6:	f7f0 ffc3 	bl	8000a80 <__aeabi_dcmpeq>
 800fafa:	4607      	mov	r7, r0
 800fafc:	b158      	cbz	r0, 800fb16 <_dtoa_r+0xce>
 800fafe:	2301      	movs	r3, #1
 800fb00:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800fb02:	6013      	str	r3, [r2, #0]
 800fb04:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800fb06:	b113      	cbz	r3, 800fb0e <_dtoa_r+0xc6>
 800fb08:	4b85      	ldr	r3, [pc, #532]	@ (800fd20 <_dtoa_r+0x2d8>)
 800fb0a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800fb0c:	6013      	str	r3, [r2, #0]
 800fb0e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800fd24 <_dtoa_r+0x2dc>
 800fb12:	f000 bd36 	b.w	8010582 <_dtoa_r+0xb3a>
 800fb16:	ab14      	add	r3, sp, #80	@ 0x50
 800fb18:	9301      	str	r3, [sp, #4]
 800fb1a:	ab15      	add	r3, sp, #84	@ 0x54
 800fb1c:	9300      	str	r3, [sp, #0]
 800fb1e:	4658      	mov	r0, fp
 800fb20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fb24:	f001 fa30 	bl	8010f88 <__d2b>
 800fb28:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800fb2c:	4681      	mov	r9, r0
 800fb2e:	2e00      	cmp	r6, #0
 800fb30:	d077      	beq.n	800fc22 <_dtoa_r+0x1da>
 800fb32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fb36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fb38:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fb3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb40:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fb44:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fb48:	9712      	str	r7, [sp, #72]	@ 0x48
 800fb4a:	4619      	mov	r1, r3
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	4b76      	ldr	r3, [pc, #472]	@ (800fd28 <_dtoa_r+0x2e0>)
 800fb50:	f7f0 fb76 	bl	8000240 <__aeabi_dsub>
 800fb54:	a368      	add	r3, pc, #416	@ (adr r3, 800fcf8 <_dtoa_r+0x2b0>)
 800fb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb5a:	f7f0 fd29 	bl	80005b0 <__aeabi_dmul>
 800fb5e:	a368      	add	r3, pc, #416	@ (adr r3, 800fd00 <_dtoa_r+0x2b8>)
 800fb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb64:	f7f0 fb6e 	bl	8000244 <__adddf3>
 800fb68:	4604      	mov	r4, r0
 800fb6a:	4630      	mov	r0, r6
 800fb6c:	460d      	mov	r5, r1
 800fb6e:	f7f0 fcb5 	bl	80004dc <__aeabi_i2d>
 800fb72:	a365      	add	r3, pc, #404	@ (adr r3, 800fd08 <_dtoa_r+0x2c0>)
 800fb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb78:	f7f0 fd1a 	bl	80005b0 <__aeabi_dmul>
 800fb7c:	4602      	mov	r2, r0
 800fb7e:	460b      	mov	r3, r1
 800fb80:	4620      	mov	r0, r4
 800fb82:	4629      	mov	r1, r5
 800fb84:	f7f0 fb5e 	bl	8000244 <__adddf3>
 800fb88:	4604      	mov	r4, r0
 800fb8a:	460d      	mov	r5, r1
 800fb8c:	f7f0 ffc0 	bl	8000b10 <__aeabi_d2iz>
 800fb90:	2200      	movs	r2, #0
 800fb92:	4607      	mov	r7, r0
 800fb94:	2300      	movs	r3, #0
 800fb96:	4620      	mov	r0, r4
 800fb98:	4629      	mov	r1, r5
 800fb9a:	f7f0 ff7b 	bl	8000a94 <__aeabi_dcmplt>
 800fb9e:	b140      	cbz	r0, 800fbb2 <_dtoa_r+0x16a>
 800fba0:	4638      	mov	r0, r7
 800fba2:	f7f0 fc9b 	bl	80004dc <__aeabi_i2d>
 800fba6:	4622      	mov	r2, r4
 800fba8:	462b      	mov	r3, r5
 800fbaa:	f7f0 ff69 	bl	8000a80 <__aeabi_dcmpeq>
 800fbae:	b900      	cbnz	r0, 800fbb2 <_dtoa_r+0x16a>
 800fbb0:	3f01      	subs	r7, #1
 800fbb2:	2f16      	cmp	r7, #22
 800fbb4:	d853      	bhi.n	800fc5e <_dtoa_r+0x216>
 800fbb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fbba:	4b5c      	ldr	r3, [pc, #368]	@ (800fd2c <_dtoa_r+0x2e4>)
 800fbbc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc4:	f7f0 ff66 	bl	8000a94 <__aeabi_dcmplt>
 800fbc8:	2800      	cmp	r0, #0
 800fbca:	d04a      	beq.n	800fc62 <_dtoa_r+0x21a>
 800fbcc:	2300      	movs	r3, #0
 800fbce:	3f01      	subs	r7, #1
 800fbd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fbd2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fbd4:	1b9b      	subs	r3, r3, r6
 800fbd6:	1e5a      	subs	r2, r3, #1
 800fbd8:	bf46      	itte	mi
 800fbda:	f1c3 0801 	rsbmi	r8, r3, #1
 800fbde:	2300      	movmi	r3, #0
 800fbe0:	f04f 0800 	movpl.w	r8, #0
 800fbe4:	9209      	str	r2, [sp, #36]	@ 0x24
 800fbe6:	bf48      	it	mi
 800fbe8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800fbea:	2f00      	cmp	r7, #0
 800fbec:	db3b      	blt.n	800fc66 <_dtoa_r+0x21e>
 800fbee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbf0:	970e      	str	r7, [sp, #56]	@ 0x38
 800fbf2:	443b      	add	r3, r7
 800fbf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbfa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800fbfc:	2b09      	cmp	r3, #9
 800fbfe:	d866      	bhi.n	800fcce <_dtoa_r+0x286>
 800fc00:	2b05      	cmp	r3, #5
 800fc02:	bfc4      	itt	gt
 800fc04:	3b04      	subgt	r3, #4
 800fc06:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800fc08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800fc0a:	bfc8      	it	gt
 800fc0c:	2400      	movgt	r4, #0
 800fc0e:	f1a3 0302 	sub.w	r3, r3, #2
 800fc12:	bfd8      	it	le
 800fc14:	2401      	movle	r4, #1
 800fc16:	2b03      	cmp	r3, #3
 800fc18:	d864      	bhi.n	800fce4 <_dtoa_r+0x29c>
 800fc1a:	e8df f003 	tbb	[pc, r3]
 800fc1e:	382b      	.short	0x382b
 800fc20:	5636      	.short	0x5636
 800fc22:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800fc26:	441e      	add	r6, r3
 800fc28:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fc2c:	2b20      	cmp	r3, #32
 800fc2e:	bfc1      	itttt	gt
 800fc30:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fc34:	fa08 f803 	lslgt.w	r8, r8, r3
 800fc38:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fc3c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fc40:	bfd6      	itet	le
 800fc42:	f1c3 0320 	rsble	r3, r3, #32
 800fc46:	ea48 0003 	orrgt.w	r0, r8, r3
 800fc4a:	fa04 f003 	lslle.w	r0, r4, r3
 800fc4e:	f7f0 fc35 	bl	80004bc <__aeabi_ui2d>
 800fc52:	2201      	movs	r2, #1
 800fc54:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fc58:	3e01      	subs	r6, #1
 800fc5a:	9212      	str	r2, [sp, #72]	@ 0x48
 800fc5c:	e775      	b.n	800fb4a <_dtoa_r+0x102>
 800fc5e:	2301      	movs	r3, #1
 800fc60:	e7b6      	b.n	800fbd0 <_dtoa_r+0x188>
 800fc62:	900f      	str	r0, [sp, #60]	@ 0x3c
 800fc64:	e7b5      	b.n	800fbd2 <_dtoa_r+0x18a>
 800fc66:	427b      	negs	r3, r7
 800fc68:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	eba8 0807 	sub.w	r8, r8, r7
 800fc70:	930e      	str	r3, [sp, #56]	@ 0x38
 800fc72:	e7c2      	b.n	800fbfa <_dtoa_r+0x1b2>
 800fc74:	2300      	movs	r3, #0
 800fc76:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	dc35      	bgt.n	800fcea <_dtoa_r+0x2a2>
 800fc7e:	2301      	movs	r3, #1
 800fc80:	461a      	mov	r2, r3
 800fc82:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800fc86:	9221      	str	r2, [sp, #132]	@ 0x84
 800fc88:	e00b      	b.n	800fca2 <_dtoa_r+0x25a>
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	e7f3      	b.n	800fc76 <_dtoa_r+0x22e>
 800fc8e:	2300      	movs	r3, #0
 800fc90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fc94:	18fb      	adds	r3, r7, r3
 800fc96:	9308      	str	r3, [sp, #32]
 800fc98:	3301      	adds	r3, #1
 800fc9a:	2b01      	cmp	r3, #1
 800fc9c:	9307      	str	r3, [sp, #28]
 800fc9e:	bfb8      	it	lt
 800fca0:	2301      	movlt	r3, #1
 800fca2:	2100      	movs	r1, #0
 800fca4:	2204      	movs	r2, #4
 800fca6:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fcaa:	f102 0514 	add.w	r5, r2, #20
 800fcae:	429d      	cmp	r5, r3
 800fcb0:	d91f      	bls.n	800fcf2 <_dtoa_r+0x2aa>
 800fcb2:	6041      	str	r1, [r0, #4]
 800fcb4:	4658      	mov	r0, fp
 800fcb6:	f000 fd8d 	bl	80107d4 <_Balloc>
 800fcba:	4682      	mov	sl, r0
 800fcbc:	2800      	cmp	r0, #0
 800fcbe:	d139      	bne.n	800fd34 <_dtoa_r+0x2ec>
 800fcc0:	4602      	mov	r2, r0
 800fcc2:	f240 11af 	movw	r1, #431	@ 0x1af
 800fcc6:	4b1a      	ldr	r3, [pc, #104]	@ (800fd30 <_dtoa_r+0x2e8>)
 800fcc8:	e6d2      	b.n	800fa70 <_dtoa_r+0x28>
 800fcca:	2301      	movs	r3, #1
 800fccc:	e7e0      	b.n	800fc90 <_dtoa_r+0x248>
 800fcce:	2401      	movs	r4, #1
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fcd4:	9320      	str	r3, [sp, #128]	@ 0x80
 800fcd6:	f04f 33ff 	mov.w	r3, #4294967295
 800fcda:	2200      	movs	r2, #0
 800fcdc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800fce0:	2312      	movs	r3, #18
 800fce2:	e7d0      	b.n	800fc86 <_dtoa_r+0x23e>
 800fce4:	2301      	movs	r3, #1
 800fce6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fce8:	e7f5      	b.n	800fcd6 <_dtoa_r+0x28e>
 800fcea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fcec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800fcf0:	e7d7      	b.n	800fca2 <_dtoa_r+0x25a>
 800fcf2:	3101      	adds	r1, #1
 800fcf4:	0052      	lsls	r2, r2, #1
 800fcf6:	e7d8      	b.n	800fcaa <_dtoa_r+0x262>
 800fcf8:	636f4361 	.word	0x636f4361
 800fcfc:	3fd287a7 	.word	0x3fd287a7
 800fd00:	8b60c8b3 	.word	0x8b60c8b3
 800fd04:	3fc68a28 	.word	0x3fc68a28
 800fd08:	509f79fb 	.word	0x509f79fb
 800fd0c:	3fd34413 	.word	0x3fd34413
 800fd10:	08013598 	.word	0x08013598
 800fd14:	080135af 	.word	0x080135af
 800fd18:	7ff00000 	.word	0x7ff00000
 800fd1c:	08013594 	.word	0x08013594
 800fd20:	08013563 	.word	0x08013563
 800fd24:	08013562 	.word	0x08013562
 800fd28:	3ff80000 	.word	0x3ff80000
 800fd2c:	080136a8 	.word	0x080136a8
 800fd30:	08013607 	.word	0x08013607
 800fd34:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fd38:	6018      	str	r0, [r3, #0]
 800fd3a:	9b07      	ldr	r3, [sp, #28]
 800fd3c:	2b0e      	cmp	r3, #14
 800fd3e:	f200 80a4 	bhi.w	800fe8a <_dtoa_r+0x442>
 800fd42:	2c00      	cmp	r4, #0
 800fd44:	f000 80a1 	beq.w	800fe8a <_dtoa_r+0x442>
 800fd48:	2f00      	cmp	r7, #0
 800fd4a:	dd33      	ble.n	800fdb4 <_dtoa_r+0x36c>
 800fd4c:	4b86      	ldr	r3, [pc, #536]	@ (800ff68 <_dtoa_r+0x520>)
 800fd4e:	f007 020f 	and.w	r2, r7, #15
 800fd52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd56:	05f8      	lsls	r0, r7, #23
 800fd58:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fd5c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800fd60:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fd64:	d516      	bpl.n	800fd94 <_dtoa_r+0x34c>
 800fd66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fd6a:	4b80      	ldr	r3, [pc, #512]	@ (800ff6c <_dtoa_r+0x524>)
 800fd6c:	2603      	movs	r6, #3
 800fd6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fd72:	f7f0 fd47 	bl	8000804 <__aeabi_ddiv>
 800fd76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd7a:	f004 040f 	and.w	r4, r4, #15
 800fd7e:	4d7b      	ldr	r5, [pc, #492]	@ (800ff6c <_dtoa_r+0x524>)
 800fd80:	b954      	cbnz	r4, 800fd98 <_dtoa_r+0x350>
 800fd82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd8a:	f7f0 fd3b 	bl	8000804 <__aeabi_ddiv>
 800fd8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd92:	e028      	b.n	800fde6 <_dtoa_r+0x39e>
 800fd94:	2602      	movs	r6, #2
 800fd96:	e7f2      	b.n	800fd7e <_dtoa_r+0x336>
 800fd98:	07e1      	lsls	r1, r4, #31
 800fd9a:	d508      	bpl.n	800fdae <_dtoa_r+0x366>
 800fd9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fda0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fda4:	f7f0 fc04 	bl	80005b0 <__aeabi_dmul>
 800fda8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fdac:	3601      	adds	r6, #1
 800fdae:	1064      	asrs	r4, r4, #1
 800fdb0:	3508      	adds	r5, #8
 800fdb2:	e7e5      	b.n	800fd80 <_dtoa_r+0x338>
 800fdb4:	f000 80d2 	beq.w	800ff5c <_dtoa_r+0x514>
 800fdb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fdbc:	427c      	negs	r4, r7
 800fdbe:	4b6a      	ldr	r3, [pc, #424]	@ (800ff68 <_dtoa_r+0x520>)
 800fdc0:	f004 020f 	and.w	r2, r4, #15
 800fdc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdcc:	f7f0 fbf0 	bl	80005b0 <__aeabi_dmul>
 800fdd0:	2602      	movs	r6, #2
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fdd8:	4d64      	ldr	r5, [pc, #400]	@ (800ff6c <_dtoa_r+0x524>)
 800fdda:	1124      	asrs	r4, r4, #4
 800fddc:	2c00      	cmp	r4, #0
 800fdde:	f040 80b2 	bne.w	800ff46 <_dtoa_r+0x4fe>
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d1d3      	bne.n	800fd8e <_dtoa_r+0x346>
 800fde6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fdea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	f000 80b7 	beq.w	800ff60 <_dtoa_r+0x518>
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	4620      	mov	r0, r4
 800fdf6:	4629      	mov	r1, r5
 800fdf8:	4b5d      	ldr	r3, [pc, #372]	@ (800ff70 <_dtoa_r+0x528>)
 800fdfa:	f7f0 fe4b 	bl	8000a94 <__aeabi_dcmplt>
 800fdfe:	2800      	cmp	r0, #0
 800fe00:	f000 80ae 	beq.w	800ff60 <_dtoa_r+0x518>
 800fe04:	9b07      	ldr	r3, [sp, #28]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	f000 80aa 	beq.w	800ff60 <_dtoa_r+0x518>
 800fe0c:	9b08      	ldr	r3, [sp, #32]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	dd37      	ble.n	800fe82 <_dtoa_r+0x43a>
 800fe12:	1e7b      	subs	r3, r7, #1
 800fe14:	4620      	mov	r0, r4
 800fe16:	9304      	str	r3, [sp, #16]
 800fe18:	2200      	movs	r2, #0
 800fe1a:	4629      	mov	r1, r5
 800fe1c:	4b55      	ldr	r3, [pc, #340]	@ (800ff74 <_dtoa_r+0x52c>)
 800fe1e:	f7f0 fbc7 	bl	80005b0 <__aeabi_dmul>
 800fe22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe26:	9c08      	ldr	r4, [sp, #32]
 800fe28:	3601      	adds	r6, #1
 800fe2a:	4630      	mov	r0, r6
 800fe2c:	f7f0 fb56 	bl	80004dc <__aeabi_i2d>
 800fe30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fe34:	f7f0 fbbc 	bl	80005b0 <__aeabi_dmul>
 800fe38:	2200      	movs	r2, #0
 800fe3a:	4b4f      	ldr	r3, [pc, #316]	@ (800ff78 <_dtoa_r+0x530>)
 800fe3c:	f7f0 fa02 	bl	8000244 <__adddf3>
 800fe40:	4605      	mov	r5, r0
 800fe42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fe46:	2c00      	cmp	r4, #0
 800fe48:	f040 809a 	bne.w	800ff80 <_dtoa_r+0x538>
 800fe4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe50:	2200      	movs	r2, #0
 800fe52:	4b4a      	ldr	r3, [pc, #296]	@ (800ff7c <_dtoa_r+0x534>)
 800fe54:	f7f0 f9f4 	bl	8000240 <__aeabi_dsub>
 800fe58:	4602      	mov	r2, r0
 800fe5a:	460b      	mov	r3, r1
 800fe5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fe60:	462a      	mov	r2, r5
 800fe62:	4633      	mov	r3, r6
 800fe64:	f7f0 fe34 	bl	8000ad0 <__aeabi_dcmpgt>
 800fe68:	2800      	cmp	r0, #0
 800fe6a:	f040 828e 	bne.w	801038a <_dtoa_r+0x942>
 800fe6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe72:	462a      	mov	r2, r5
 800fe74:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fe78:	f7f0 fe0c 	bl	8000a94 <__aeabi_dcmplt>
 800fe7c:	2800      	cmp	r0, #0
 800fe7e:	f040 8127 	bne.w	80100d0 <_dtoa_r+0x688>
 800fe82:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800fe86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800fe8a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	f2c0 8163 	blt.w	8010158 <_dtoa_r+0x710>
 800fe92:	2f0e      	cmp	r7, #14
 800fe94:	f300 8160 	bgt.w	8010158 <_dtoa_r+0x710>
 800fe98:	4b33      	ldr	r3, [pc, #204]	@ (800ff68 <_dtoa_r+0x520>)
 800fe9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fe9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800fea2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800fea6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	da03      	bge.n	800feb4 <_dtoa_r+0x46c>
 800feac:	9b07      	ldr	r3, [sp, #28]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	f340 8100 	ble.w	80100b4 <_dtoa_r+0x66c>
 800feb4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800feb8:	4656      	mov	r6, sl
 800feba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800febe:	4620      	mov	r0, r4
 800fec0:	4629      	mov	r1, r5
 800fec2:	f7f0 fc9f 	bl	8000804 <__aeabi_ddiv>
 800fec6:	f7f0 fe23 	bl	8000b10 <__aeabi_d2iz>
 800feca:	4680      	mov	r8, r0
 800fecc:	f7f0 fb06 	bl	80004dc <__aeabi_i2d>
 800fed0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fed4:	f7f0 fb6c 	bl	80005b0 <__aeabi_dmul>
 800fed8:	4602      	mov	r2, r0
 800feda:	460b      	mov	r3, r1
 800fedc:	4620      	mov	r0, r4
 800fede:	4629      	mov	r1, r5
 800fee0:	f7f0 f9ae 	bl	8000240 <__aeabi_dsub>
 800fee4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fee8:	9d07      	ldr	r5, [sp, #28]
 800feea:	f806 4b01 	strb.w	r4, [r6], #1
 800feee:	eba6 040a 	sub.w	r4, r6, sl
 800fef2:	42a5      	cmp	r5, r4
 800fef4:	4602      	mov	r2, r0
 800fef6:	460b      	mov	r3, r1
 800fef8:	f040 8116 	bne.w	8010128 <_dtoa_r+0x6e0>
 800fefc:	f7f0 f9a2 	bl	8000244 <__adddf3>
 800ff00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff04:	4604      	mov	r4, r0
 800ff06:	460d      	mov	r5, r1
 800ff08:	f7f0 fde2 	bl	8000ad0 <__aeabi_dcmpgt>
 800ff0c:	2800      	cmp	r0, #0
 800ff0e:	f040 80f8 	bne.w	8010102 <_dtoa_r+0x6ba>
 800ff12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff16:	4620      	mov	r0, r4
 800ff18:	4629      	mov	r1, r5
 800ff1a:	f7f0 fdb1 	bl	8000a80 <__aeabi_dcmpeq>
 800ff1e:	b118      	cbz	r0, 800ff28 <_dtoa_r+0x4e0>
 800ff20:	f018 0f01 	tst.w	r8, #1
 800ff24:	f040 80ed 	bne.w	8010102 <_dtoa_r+0x6ba>
 800ff28:	4649      	mov	r1, r9
 800ff2a:	4658      	mov	r0, fp
 800ff2c:	f000 fc92 	bl	8010854 <_Bfree>
 800ff30:	2300      	movs	r3, #0
 800ff32:	7033      	strb	r3, [r6, #0]
 800ff34:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ff36:	3701      	adds	r7, #1
 800ff38:	601f      	str	r7, [r3, #0]
 800ff3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	f000 8320 	beq.w	8010582 <_dtoa_r+0xb3a>
 800ff42:	601e      	str	r6, [r3, #0]
 800ff44:	e31d      	b.n	8010582 <_dtoa_r+0xb3a>
 800ff46:	07e2      	lsls	r2, r4, #31
 800ff48:	d505      	bpl.n	800ff56 <_dtoa_r+0x50e>
 800ff4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ff4e:	f7f0 fb2f 	bl	80005b0 <__aeabi_dmul>
 800ff52:	2301      	movs	r3, #1
 800ff54:	3601      	adds	r6, #1
 800ff56:	1064      	asrs	r4, r4, #1
 800ff58:	3508      	adds	r5, #8
 800ff5a:	e73f      	b.n	800fddc <_dtoa_r+0x394>
 800ff5c:	2602      	movs	r6, #2
 800ff5e:	e742      	b.n	800fde6 <_dtoa_r+0x39e>
 800ff60:	9c07      	ldr	r4, [sp, #28]
 800ff62:	9704      	str	r7, [sp, #16]
 800ff64:	e761      	b.n	800fe2a <_dtoa_r+0x3e2>
 800ff66:	bf00      	nop
 800ff68:	080136a8 	.word	0x080136a8
 800ff6c:	08013680 	.word	0x08013680
 800ff70:	3ff00000 	.word	0x3ff00000
 800ff74:	40240000 	.word	0x40240000
 800ff78:	401c0000 	.word	0x401c0000
 800ff7c:	40140000 	.word	0x40140000
 800ff80:	4b70      	ldr	r3, [pc, #448]	@ (8010144 <_dtoa_r+0x6fc>)
 800ff82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ff84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ff88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ff8c:	4454      	add	r4, sl
 800ff8e:	2900      	cmp	r1, #0
 800ff90:	d045      	beq.n	801001e <_dtoa_r+0x5d6>
 800ff92:	2000      	movs	r0, #0
 800ff94:	496c      	ldr	r1, [pc, #432]	@ (8010148 <_dtoa_r+0x700>)
 800ff96:	f7f0 fc35 	bl	8000804 <__aeabi_ddiv>
 800ff9a:	4633      	mov	r3, r6
 800ff9c:	462a      	mov	r2, r5
 800ff9e:	f7f0 f94f 	bl	8000240 <__aeabi_dsub>
 800ffa2:	4656      	mov	r6, sl
 800ffa4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ffa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffac:	f7f0 fdb0 	bl	8000b10 <__aeabi_d2iz>
 800ffb0:	4605      	mov	r5, r0
 800ffb2:	f7f0 fa93 	bl	80004dc <__aeabi_i2d>
 800ffb6:	4602      	mov	r2, r0
 800ffb8:	460b      	mov	r3, r1
 800ffba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffbe:	f7f0 f93f 	bl	8000240 <__aeabi_dsub>
 800ffc2:	4602      	mov	r2, r0
 800ffc4:	460b      	mov	r3, r1
 800ffc6:	3530      	adds	r5, #48	@ 0x30
 800ffc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ffcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ffd0:	f806 5b01 	strb.w	r5, [r6], #1
 800ffd4:	f7f0 fd5e 	bl	8000a94 <__aeabi_dcmplt>
 800ffd8:	2800      	cmp	r0, #0
 800ffda:	d163      	bne.n	80100a4 <_dtoa_r+0x65c>
 800ffdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ffe0:	2000      	movs	r0, #0
 800ffe2:	495a      	ldr	r1, [pc, #360]	@ (801014c <_dtoa_r+0x704>)
 800ffe4:	f7f0 f92c 	bl	8000240 <__aeabi_dsub>
 800ffe8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ffec:	f7f0 fd52 	bl	8000a94 <__aeabi_dcmplt>
 800fff0:	2800      	cmp	r0, #0
 800fff2:	f040 8087 	bne.w	8010104 <_dtoa_r+0x6bc>
 800fff6:	42a6      	cmp	r6, r4
 800fff8:	f43f af43 	beq.w	800fe82 <_dtoa_r+0x43a>
 800fffc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010000:	2200      	movs	r2, #0
 8010002:	4b53      	ldr	r3, [pc, #332]	@ (8010150 <_dtoa_r+0x708>)
 8010004:	f7f0 fad4 	bl	80005b0 <__aeabi_dmul>
 8010008:	2200      	movs	r2, #0
 801000a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801000e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010012:	4b4f      	ldr	r3, [pc, #316]	@ (8010150 <_dtoa_r+0x708>)
 8010014:	f7f0 facc 	bl	80005b0 <__aeabi_dmul>
 8010018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801001c:	e7c4      	b.n	800ffa8 <_dtoa_r+0x560>
 801001e:	4631      	mov	r1, r6
 8010020:	4628      	mov	r0, r5
 8010022:	f7f0 fac5 	bl	80005b0 <__aeabi_dmul>
 8010026:	4656      	mov	r6, sl
 8010028:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801002c:	9413      	str	r4, [sp, #76]	@ 0x4c
 801002e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010032:	f7f0 fd6d 	bl	8000b10 <__aeabi_d2iz>
 8010036:	4605      	mov	r5, r0
 8010038:	f7f0 fa50 	bl	80004dc <__aeabi_i2d>
 801003c:	4602      	mov	r2, r0
 801003e:	460b      	mov	r3, r1
 8010040:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010044:	f7f0 f8fc 	bl	8000240 <__aeabi_dsub>
 8010048:	4602      	mov	r2, r0
 801004a:	460b      	mov	r3, r1
 801004c:	3530      	adds	r5, #48	@ 0x30
 801004e:	f806 5b01 	strb.w	r5, [r6], #1
 8010052:	42a6      	cmp	r6, r4
 8010054:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010058:	f04f 0200 	mov.w	r2, #0
 801005c:	d124      	bne.n	80100a8 <_dtoa_r+0x660>
 801005e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010062:	4b39      	ldr	r3, [pc, #228]	@ (8010148 <_dtoa_r+0x700>)
 8010064:	f7f0 f8ee 	bl	8000244 <__adddf3>
 8010068:	4602      	mov	r2, r0
 801006a:	460b      	mov	r3, r1
 801006c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010070:	f7f0 fd2e 	bl	8000ad0 <__aeabi_dcmpgt>
 8010074:	2800      	cmp	r0, #0
 8010076:	d145      	bne.n	8010104 <_dtoa_r+0x6bc>
 8010078:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801007c:	2000      	movs	r0, #0
 801007e:	4932      	ldr	r1, [pc, #200]	@ (8010148 <_dtoa_r+0x700>)
 8010080:	f7f0 f8de 	bl	8000240 <__aeabi_dsub>
 8010084:	4602      	mov	r2, r0
 8010086:	460b      	mov	r3, r1
 8010088:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801008c:	f7f0 fd02 	bl	8000a94 <__aeabi_dcmplt>
 8010090:	2800      	cmp	r0, #0
 8010092:	f43f aef6 	beq.w	800fe82 <_dtoa_r+0x43a>
 8010096:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010098:	1e73      	subs	r3, r6, #1
 801009a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801009c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80100a0:	2b30      	cmp	r3, #48	@ 0x30
 80100a2:	d0f8      	beq.n	8010096 <_dtoa_r+0x64e>
 80100a4:	9f04      	ldr	r7, [sp, #16]
 80100a6:	e73f      	b.n	800ff28 <_dtoa_r+0x4e0>
 80100a8:	4b29      	ldr	r3, [pc, #164]	@ (8010150 <_dtoa_r+0x708>)
 80100aa:	f7f0 fa81 	bl	80005b0 <__aeabi_dmul>
 80100ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100b2:	e7bc      	b.n	801002e <_dtoa_r+0x5e6>
 80100b4:	d10c      	bne.n	80100d0 <_dtoa_r+0x688>
 80100b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80100ba:	2200      	movs	r2, #0
 80100bc:	4b25      	ldr	r3, [pc, #148]	@ (8010154 <_dtoa_r+0x70c>)
 80100be:	f7f0 fa77 	bl	80005b0 <__aeabi_dmul>
 80100c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100c6:	f7f0 fcf9 	bl	8000abc <__aeabi_dcmpge>
 80100ca:	2800      	cmp	r0, #0
 80100cc:	f000 815b 	beq.w	8010386 <_dtoa_r+0x93e>
 80100d0:	2400      	movs	r4, #0
 80100d2:	4625      	mov	r5, r4
 80100d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80100d6:	4656      	mov	r6, sl
 80100d8:	43db      	mvns	r3, r3
 80100da:	9304      	str	r3, [sp, #16]
 80100dc:	2700      	movs	r7, #0
 80100de:	4621      	mov	r1, r4
 80100e0:	4658      	mov	r0, fp
 80100e2:	f000 fbb7 	bl	8010854 <_Bfree>
 80100e6:	2d00      	cmp	r5, #0
 80100e8:	d0dc      	beq.n	80100a4 <_dtoa_r+0x65c>
 80100ea:	b12f      	cbz	r7, 80100f8 <_dtoa_r+0x6b0>
 80100ec:	42af      	cmp	r7, r5
 80100ee:	d003      	beq.n	80100f8 <_dtoa_r+0x6b0>
 80100f0:	4639      	mov	r1, r7
 80100f2:	4658      	mov	r0, fp
 80100f4:	f000 fbae 	bl	8010854 <_Bfree>
 80100f8:	4629      	mov	r1, r5
 80100fa:	4658      	mov	r0, fp
 80100fc:	f000 fbaa 	bl	8010854 <_Bfree>
 8010100:	e7d0      	b.n	80100a4 <_dtoa_r+0x65c>
 8010102:	9704      	str	r7, [sp, #16]
 8010104:	4633      	mov	r3, r6
 8010106:	461e      	mov	r6, r3
 8010108:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801010c:	2a39      	cmp	r2, #57	@ 0x39
 801010e:	d107      	bne.n	8010120 <_dtoa_r+0x6d8>
 8010110:	459a      	cmp	sl, r3
 8010112:	d1f8      	bne.n	8010106 <_dtoa_r+0x6be>
 8010114:	9a04      	ldr	r2, [sp, #16]
 8010116:	3201      	adds	r2, #1
 8010118:	9204      	str	r2, [sp, #16]
 801011a:	2230      	movs	r2, #48	@ 0x30
 801011c:	f88a 2000 	strb.w	r2, [sl]
 8010120:	781a      	ldrb	r2, [r3, #0]
 8010122:	3201      	adds	r2, #1
 8010124:	701a      	strb	r2, [r3, #0]
 8010126:	e7bd      	b.n	80100a4 <_dtoa_r+0x65c>
 8010128:	2200      	movs	r2, #0
 801012a:	4b09      	ldr	r3, [pc, #36]	@ (8010150 <_dtoa_r+0x708>)
 801012c:	f7f0 fa40 	bl	80005b0 <__aeabi_dmul>
 8010130:	2200      	movs	r2, #0
 8010132:	2300      	movs	r3, #0
 8010134:	4604      	mov	r4, r0
 8010136:	460d      	mov	r5, r1
 8010138:	f7f0 fca2 	bl	8000a80 <__aeabi_dcmpeq>
 801013c:	2800      	cmp	r0, #0
 801013e:	f43f aebc 	beq.w	800feba <_dtoa_r+0x472>
 8010142:	e6f1      	b.n	800ff28 <_dtoa_r+0x4e0>
 8010144:	080136a8 	.word	0x080136a8
 8010148:	3fe00000 	.word	0x3fe00000
 801014c:	3ff00000 	.word	0x3ff00000
 8010150:	40240000 	.word	0x40240000
 8010154:	40140000 	.word	0x40140000
 8010158:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801015a:	2a00      	cmp	r2, #0
 801015c:	f000 80db 	beq.w	8010316 <_dtoa_r+0x8ce>
 8010160:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010162:	2a01      	cmp	r2, #1
 8010164:	f300 80bf 	bgt.w	80102e6 <_dtoa_r+0x89e>
 8010168:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801016a:	2a00      	cmp	r2, #0
 801016c:	f000 80b7 	beq.w	80102de <_dtoa_r+0x896>
 8010170:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010174:	4646      	mov	r6, r8
 8010176:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010178:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801017a:	2101      	movs	r1, #1
 801017c:	441a      	add	r2, r3
 801017e:	4658      	mov	r0, fp
 8010180:	4498      	add	r8, r3
 8010182:	9209      	str	r2, [sp, #36]	@ 0x24
 8010184:	f000 fc64 	bl	8010a50 <__i2b>
 8010188:	4605      	mov	r5, r0
 801018a:	b15e      	cbz	r6, 80101a4 <_dtoa_r+0x75c>
 801018c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801018e:	2b00      	cmp	r3, #0
 8010190:	dd08      	ble.n	80101a4 <_dtoa_r+0x75c>
 8010192:	42b3      	cmp	r3, r6
 8010194:	bfa8      	it	ge
 8010196:	4633      	movge	r3, r6
 8010198:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801019a:	eba8 0803 	sub.w	r8, r8, r3
 801019e:	1af6      	subs	r6, r6, r3
 80101a0:	1ad3      	subs	r3, r2, r3
 80101a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80101a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80101a6:	b1f3      	cbz	r3, 80101e6 <_dtoa_r+0x79e>
 80101a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	f000 80b7 	beq.w	801031e <_dtoa_r+0x8d6>
 80101b0:	b18c      	cbz	r4, 80101d6 <_dtoa_r+0x78e>
 80101b2:	4629      	mov	r1, r5
 80101b4:	4622      	mov	r2, r4
 80101b6:	4658      	mov	r0, fp
 80101b8:	f000 fd08 	bl	8010bcc <__pow5mult>
 80101bc:	464a      	mov	r2, r9
 80101be:	4601      	mov	r1, r0
 80101c0:	4605      	mov	r5, r0
 80101c2:	4658      	mov	r0, fp
 80101c4:	f000 fc5a 	bl	8010a7c <__multiply>
 80101c8:	4649      	mov	r1, r9
 80101ca:	9004      	str	r0, [sp, #16]
 80101cc:	4658      	mov	r0, fp
 80101ce:	f000 fb41 	bl	8010854 <_Bfree>
 80101d2:	9b04      	ldr	r3, [sp, #16]
 80101d4:	4699      	mov	r9, r3
 80101d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80101d8:	1b1a      	subs	r2, r3, r4
 80101da:	d004      	beq.n	80101e6 <_dtoa_r+0x79e>
 80101dc:	4649      	mov	r1, r9
 80101de:	4658      	mov	r0, fp
 80101e0:	f000 fcf4 	bl	8010bcc <__pow5mult>
 80101e4:	4681      	mov	r9, r0
 80101e6:	2101      	movs	r1, #1
 80101e8:	4658      	mov	r0, fp
 80101ea:	f000 fc31 	bl	8010a50 <__i2b>
 80101ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80101f0:	4604      	mov	r4, r0
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	f000 81c9 	beq.w	801058a <_dtoa_r+0xb42>
 80101f8:	461a      	mov	r2, r3
 80101fa:	4601      	mov	r1, r0
 80101fc:	4658      	mov	r0, fp
 80101fe:	f000 fce5 	bl	8010bcc <__pow5mult>
 8010202:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010204:	4604      	mov	r4, r0
 8010206:	2b01      	cmp	r3, #1
 8010208:	f300 808f 	bgt.w	801032a <_dtoa_r+0x8e2>
 801020c:	9b02      	ldr	r3, [sp, #8]
 801020e:	2b00      	cmp	r3, #0
 8010210:	f040 8087 	bne.w	8010322 <_dtoa_r+0x8da>
 8010214:	9b03      	ldr	r3, [sp, #12]
 8010216:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801021a:	2b00      	cmp	r3, #0
 801021c:	f040 8083 	bne.w	8010326 <_dtoa_r+0x8de>
 8010220:	9b03      	ldr	r3, [sp, #12]
 8010222:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010226:	0d1b      	lsrs	r3, r3, #20
 8010228:	051b      	lsls	r3, r3, #20
 801022a:	b12b      	cbz	r3, 8010238 <_dtoa_r+0x7f0>
 801022c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801022e:	f108 0801 	add.w	r8, r8, #1
 8010232:	3301      	adds	r3, #1
 8010234:	9309      	str	r3, [sp, #36]	@ 0x24
 8010236:	2301      	movs	r3, #1
 8010238:	930a      	str	r3, [sp, #40]	@ 0x28
 801023a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801023c:	2b00      	cmp	r3, #0
 801023e:	f000 81aa 	beq.w	8010596 <_dtoa_r+0xb4e>
 8010242:	6923      	ldr	r3, [r4, #16]
 8010244:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010248:	6918      	ldr	r0, [r3, #16]
 801024a:	f000 fbb5 	bl	80109b8 <__hi0bits>
 801024e:	f1c0 0020 	rsb	r0, r0, #32
 8010252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010254:	4418      	add	r0, r3
 8010256:	f010 001f 	ands.w	r0, r0, #31
 801025a:	d071      	beq.n	8010340 <_dtoa_r+0x8f8>
 801025c:	f1c0 0320 	rsb	r3, r0, #32
 8010260:	2b04      	cmp	r3, #4
 8010262:	dd65      	ble.n	8010330 <_dtoa_r+0x8e8>
 8010264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010266:	f1c0 001c 	rsb	r0, r0, #28
 801026a:	4403      	add	r3, r0
 801026c:	4480      	add	r8, r0
 801026e:	4406      	add	r6, r0
 8010270:	9309      	str	r3, [sp, #36]	@ 0x24
 8010272:	f1b8 0f00 	cmp.w	r8, #0
 8010276:	dd05      	ble.n	8010284 <_dtoa_r+0x83c>
 8010278:	4649      	mov	r1, r9
 801027a:	4642      	mov	r2, r8
 801027c:	4658      	mov	r0, fp
 801027e:	f000 fcff 	bl	8010c80 <__lshift>
 8010282:	4681      	mov	r9, r0
 8010284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010286:	2b00      	cmp	r3, #0
 8010288:	dd05      	ble.n	8010296 <_dtoa_r+0x84e>
 801028a:	4621      	mov	r1, r4
 801028c:	461a      	mov	r2, r3
 801028e:	4658      	mov	r0, fp
 8010290:	f000 fcf6 	bl	8010c80 <__lshift>
 8010294:	4604      	mov	r4, r0
 8010296:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010298:	2b00      	cmp	r3, #0
 801029a:	d053      	beq.n	8010344 <_dtoa_r+0x8fc>
 801029c:	4621      	mov	r1, r4
 801029e:	4648      	mov	r0, r9
 80102a0:	f000 fd5a 	bl	8010d58 <__mcmp>
 80102a4:	2800      	cmp	r0, #0
 80102a6:	da4d      	bge.n	8010344 <_dtoa_r+0x8fc>
 80102a8:	1e7b      	subs	r3, r7, #1
 80102aa:	4649      	mov	r1, r9
 80102ac:	9304      	str	r3, [sp, #16]
 80102ae:	220a      	movs	r2, #10
 80102b0:	2300      	movs	r3, #0
 80102b2:	4658      	mov	r0, fp
 80102b4:	f000 faf0 	bl	8010898 <__multadd>
 80102b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80102ba:	4681      	mov	r9, r0
 80102bc:	2b00      	cmp	r3, #0
 80102be:	f000 816c 	beq.w	801059a <_dtoa_r+0xb52>
 80102c2:	2300      	movs	r3, #0
 80102c4:	4629      	mov	r1, r5
 80102c6:	220a      	movs	r2, #10
 80102c8:	4658      	mov	r0, fp
 80102ca:	f000 fae5 	bl	8010898 <__multadd>
 80102ce:	9b08      	ldr	r3, [sp, #32]
 80102d0:	4605      	mov	r5, r0
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	dc61      	bgt.n	801039a <_dtoa_r+0x952>
 80102d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80102d8:	2b02      	cmp	r3, #2
 80102da:	dc3b      	bgt.n	8010354 <_dtoa_r+0x90c>
 80102dc:	e05d      	b.n	801039a <_dtoa_r+0x952>
 80102de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80102e0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80102e4:	e746      	b.n	8010174 <_dtoa_r+0x72c>
 80102e6:	9b07      	ldr	r3, [sp, #28]
 80102e8:	1e5c      	subs	r4, r3, #1
 80102ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102ec:	42a3      	cmp	r3, r4
 80102ee:	bfbf      	itttt	lt
 80102f0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80102f2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80102f4:	1ae3      	sublt	r3, r4, r3
 80102f6:	18d2      	addlt	r2, r2, r3
 80102f8:	bfa8      	it	ge
 80102fa:	1b1c      	subge	r4, r3, r4
 80102fc:	9b07      	ldr	r3, [sp, #28]
 80102fe:	bfbe      	ittt	lt
 8010300:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010302:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8010304:	2400      	movlt	r4, #0
 8010306:	2b00      	cmp	r3, #0
 8010308:	bfb5      	itete	lt
 801030a:	eba8 0603 	sublt.w	r6, r8, r3
 801030e:	4646      	movge	r6, r8
 8010310:	2300      	movlt	r3, #0
 8010312:	9b07      	ldrge	r3, [sp, #28]
 8010314:	e730      	b.n	8010178 <_dtoa_r+0x730>
 8010316:	4646      	mov	r6, r8
 8010318:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801031a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801031c:	e735      	b.n	801018a <_dtoa_r+0x742>
 801031e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010320:	e75c      	b.n	80101dc <_dtoa_r+0x794>
 8010322:	2300      	movs	r3, #0
 8010324:	e788      	b.n	8010238 <_dtoa_r+0x7f0>
 8010326:	9b02      	ldr	r3, [sp, #8]
 8010328:	e786      	b.n	8010238 <_dtoa_r+0x7f0>
 801032a:	2300      	movs	r3, #0
 801032c:	930a      	str	r3, [sp, #40]	@ 0x28
 801032e:	e788      	b.n	8010242 <_dtoa_r+0x7fa>
 8010330:	d09f      	beq.n	8010272 <_dtoa_r+0x82a>
 8010332:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010334:	331c      	adds	r3, #28
 8010336:	441a      	add	r2, r3
 8010338:	4498      	add	r8, r3
 801033a:	441e      	add	r6, r3
 801033c:	9209      	str	r2, [sp, #36]	@ 0x24
 801033e:	e798      	b.n	8010272 <_dtoa_r+0x82a>
 8010340:	4603      	mov	r3, r0
 8010342:	e7f6      	b.n	8010332 <_dtoa_r+0x8ea>
 8010344:	9b07      	ldr	r3, [sp, #28]
 8010346:	9704      	str	r7, [sp, #16]
 8010348:	2b00      	cmp	r3, #0
 801034a:	dc20      	bgt.n	801038e <_dtoa_r+0x946>
 801034c:	9308      	str	r3, [sp, #32]
 801034e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8010350:	2b02      	cmp	r3, #2
 8010352:	dd1e      	ble.n	8010392 <_dtoa_r+0x94a>
 8010354:	9b08      	ldr	r3, [sp, #32]
 8010356:	2b00      	cmp	r3, #0
 8010358:	f47f aebc 	bne.w	80100d4 <_dtoa_r+0x68c>
 801035c:	4621      	mov	r1, r4
 801035e:	2205      	movs	r2, #5
 8010360:	4658      	mov	r0, fp
 8010362:	f000 fa99 	bl	8010898 <__multadd>
 8010366:	4601      	mov	r1, r0
 8010368:	4604      	mov	r4, r0
 801036a:	4648      	mov	r0, r9
 801036c:	f000 fcf4 	bl	8010d58 <__mcmp>
 8010370:	2800      	cmp	r0, #0
 8010372:	f77f aeaf 	ble.w	80100d4 <_dtoa_r+0x68c>
 8010376:	2331      	movs	r3, #49	@ 0x31
 8010378:	4656      	mov	r6, sl
 801037a:	f806 3b01 	strb.w	r3, [r6], #1
 801037e:	9b04      	ldr	r3, [sp, #16]
 8010380:	3301      	adds	r3, #1
 8010382:	9304      	str	r3, [sp, #16]
 8010384:	e6aa      	b.n	80100dc <_dtoa_r+0x694>
 8010386:	9c07      	ldr	r4, [sp, #28]
 8010388:	9704      	str	r7, [sp, #16]
 801038a:	4625      	mov	r5, r4
 801038c:	e7f3      	b.n	8010376 <_dtoa_r+0x92e>
 801038e:	9b07      	ldr	r3, [sp, #28]
 8010390:	9308      	str	r3, [sp, #32]
 8010392:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010394:	2b00      	cmp	r3, #0
 8010396:	f000 8104 	beq.w	80105a2 <_dtoa_r+0xb5a>
 801039a:	2e00      	cmp	r6, #0
 801039c:	dd05      	ble.n	80103aa <_dtoa_r+0x962>
 801039e:	4629      	mov	r1, r5
 80103a0:	4632      	mov	r2, r6
 80103a2:	4658      	mov	r0, fp
 80103a4:	f000 fc6c 	bl	8010c80 <__lshift>
 80103a8:	4605      	mov	r5, r0
 80103aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d05a      	beq.n	8010466 <_dtoa_r+0xa1e>
 80103b0:	4658      	mov	r0, fp
 80103b2:	6869      	ldr	r1, [r5, #4]
 80103b4:	f000 fa0e 	bl	80107d4 <_Balloc>
 80103b8:	4606      	mov	r6, r0
 80103ba:	b928      	cbnz	r0, 80103c8 <_dtoa_r+0x980>
 80103bc:	4602      	mov	r2, r0
 80103be:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80103c2:	4b83      	ldr	r3, [pc, #524]	@ (80105d0 <_dtoa_r+0xb88>)
 80103c4:	f7ff bb54 	b.w	800fa70 <_dtoa_r+0x28>
 80103c8:	692a      	ldr	r2, [r5, #16]
 80103ca:	f105 010c 	add.w	r1, r5, #12
 80103ce:	3202      	adds	r2, #2
 80103d0:	0092      	lsls	r2, r2, #2
 80103d2:	300c      	adds	r0, #12
 80103d4:	f7ff fa9d 	bl	800f912 <memcpy>
 80103d8:	2201      	movs	r2, #1
 80103da:	4631      	mov	r1, r6
 80103dc:	4658      	mov	r0, fp
 80103de:	f000 fc4f 	bl	8010c80 <__lshift>
 80103e2:	462f      	mov	r7, r5
 80103e4:	4605      	mov	r5, r0
 80103e6:	f10a 0301 	add.w	r3, sl, #1
 80103ea:	9307      	str	r3, [sp, #28]
 80103ec:	9b08      	ldr	r3, [sp, #32]
 80103ee:	4453      	add	r3, sl
 80103f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80103f2:	9b02      	ldr	r3, [sp, #8]
 80103f4:	f003 0301 	and.w	r3, r3, #1
 80103f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80103fa:	9b07      	ldr	r3, [sp, #28]
 80103fc:	4621      	mov	r1, r4
 80103fe:	3b01      	subs	r3, #1
 8010400:	4648      	mov	r0, r9
 8010402:	9302      	str	r3, [sp, #8]
 8010404:	f7ff fa98 	bl	800f938 <quorem>
 8010408:	4639      	mov	r1, r7
 801040a:	9008      	str	r0, [sp, #32]
 801040c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010410:	4648      	mov	r0, r9
 8010412:	f000 fca1 	bl	8010d58 <__mcmp>
 8010416:	462a      	mov	r2, r5
 8010418:	9009      	str	r0, [sp, #36]	@ 0x24
 801041a:	4621      	mov	r1, r4
 801041c:	4658      	mov	r0, fp
 801041e:	f000 fcb7 	bl	8010d90 <__mdiff>
 8010422:	68c2      	ldr	r2, [r0, #12]
 8010424:	4606      	mov	r6, r0
 8010426:	bb02      	cbnz	r2, 801046a <_dtoa_r+0xa22>
 8010428:	4601      	mov	r1, r0
 801042a:	4648      	mov	r0, r9
 801042c:	f000 fc94 	bl	8010d58 <__mcmp>
 8010430:	4602      	mov	r2, r0
 8010432:	4631      	mov	r1, r6
 8010434:	4658      	mov	r0, fp
 8010436:	920c      	str	r2, [sp, #48]	@ 0x30
 8010438:	f000 fa0c 	bl	8010854 <_Bfree>
 801043c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801043e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010440:	9e07      	ldr	r6, [sp, #28]
 8010442:	ea43 0102 	orr.w	r1, r3, r2
 8010446:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010448:	4319      	orrs	r1, r3
 801044a:	d110      	bne.n	801046e <_dtoa_r+0xa26>
 801044c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010450:	d029      	beq.n	80104a6 <_dtoa_r+0xa5e>
 8010452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010454:	2b00      	cmp	r3, #0
 8010456:	dd02      	ble.n	801045e <_dtoa_r+0xa16>
 8010458:	9b08      	ldr	r3, [sp, #32]
 801045a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801045e:	9b02      	ldr	r3, [sp, #8]
 8010460:	f883 8000 	strb.w	r8, [r3]
 8010464:	e63b      	b.n	80100de <_dtoa_r+0x696>
 8010466:	4628      	mov	r0, r5
 8010468:	e7bb      	b.n	80103e2 <_dtoa_r+0x99a>
 801046a:	2201      	movs	r2, #1
 801046c:	e7e1      	b.n	8010432 <_dtoa_r+0x9ea>
 801046e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010470:	2b00      	cmp	r3, #0
 8010472:	db04      	blt.n	801047e <_dtoa_r+0xa36>
 8010474:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8010476:	430b      	orrs	r3, r1
 8010478:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801047a:	430b      	orrs	r3, r1
 801047c:	d120      	bne.n	80104c0 <_dtoa_r+0xa78>
 801047e:	2a00      	cmp	r2, #0
 8010480:	dded      	ble.n	801045e <_dtoa_r+0xa16>
 8010482:	4649      	mov	r1, r9
 8010484:	2201      	movs	r2, #1
 8010486:	4658      	mov	r0, fp
 8010488:	f000 fbfa 	bl	8010c80 <__lshift>
 801048c:	4621      	mov	r1, r4
 801048e:	4681      	mov	r9, r0
 8010490:	f000 fc62 	bl	8010d58 <__mcmp>
 8010494:	2800      	cmp	r0, #0
 8010496:	dc03      	bgt.n	80104a0 <_dtoa_r+0xa58>
 8010498:	d1e1      	bne.n	801045e <_dtoa_r+0xa16>
 801049a:	f018 0f01 	tst.w	r8, #1
 801049e:	d0de      	beq.n	801045e <_dtoa_r+0xa16>
 80104a0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80104a4:	d1d8      	bne.n	8010458 <_dtoa_r+0xa10>
 80104a6:	2339      	movs	r3, #57	@ 0x39
 80104a8:	9a02      	ldr	r2, [sp, #8]
 80104aa:	7013      	strb	r3, [r2, #0]
 80104ac:	4633      	mov	r3, r6
 80104ae:	461e      	mov	r6, r3
 80104b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80104b4:	3b01      	subs	r3, #1
 80104b6:	2a39      	cmp	r2, #57	@ 0x39
 80104b8:	d052      	beq.n	8010560 <_dtoa_r+0xb18>
 80104ba:	3201      	adds	r2, #1
 80104bc:	701a      	strb	r2, [r3, #0]
 80104be:	e60e      	b.n	80100de <_dtoa_r+0x696>
 80104c0:	2a00      	cmp	r2, #0
 80104c2:	dd07      	ble.n	80104d4 <_dtoa_r+0xa8c>
 80104c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80104c8:	d0ed      	beq.n	80104a6 <_dtoa_r+0xa5e>
 80104ca:	9a02      	ldr	r2, [sp, #8]
 80104cc:	f108 0301 	add.w	r3, r8, #1
 80104d0:	7013      	strb	r3, [r2, #0]
 80104d2:	e604      	b.n	80100de <_dtoa_r+0x696>
 80104d4:	9b07      	ldr	r3, [sp, #28]
 80104d6:	9a07      	ldr	r2, [sp, #28]
 80104d8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80104dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80104de:	4293      	cmp	r3, r2
 80104e0:	d028      	beq.n	8010534 <_dtoa_r+0xaec>
 80104e2:	4649      	mov	r1, r9
 80104e4:	2300      	movs	r3, #0
 80104e6:	220a      	movs	r2, #10
 80104e8:	4658      	mov	r0, fp
 80104ea:	f000 f9d5 	bl	8010898 <__multadd>
 80104ee:	42af      	cmp	r7, r5
 80104f0:	4681      	mov	r9, r0
 80104f2:	f04f 0300 	mov.w	r3, #0
 80104f6:	f04f 020a 	mov.w	r2, #10
 80104fa:	4639      	mov	r1, r7
 80104fc:	4658      	mov	r0, fp
 80104fe:	d107      	bne.n	8010510 <_dtoa_r+0xac8>
 8010500:	f000 f9ca 	bl	8010898 <__multadd>
 8010504:	4607      	mov	r7, r0
 8010506:	4605      	mov	r5, r0
 8010508:	9b07      	ldr	r3, [sp, #28]
 801050a:	3301      	adds	r3, #1
 801050c:	9307      	str	r3, [sp, #28]
 801050e:	e774      	b.n	80103fa <_dtoa_r+0x9b2>
 8010510:	f000 f9c2 	bl	8010898 <__multadd>
 8010514:	4629      	mov	r1, r5
 8010516:	4607      	mov	r7, r0
 8010518:	2300      	movs	r3, #0
 801051a:	220a      	movs	r2, #10
 801051c:	4658      	mov	r0, fp
 801051e:	f000 f9bb 	bl	8010898 <__multadd>
 8010522:	4605      	mov	r5, r0
 8010524:	e7f0      	b.n	8010508 <_dtoa_r+0xac0>
 8010526:	9b08      	ldr	r3, [sp, #32]
 8010528:	2700      	movs	r7, #0
 801052a:	2b00      	cmp	r3, #0
 801052c:	bfcc      	ite	gt
 801052e:	461e      	movgt	r6, r3
 8010530:	2601      	movle	r6, #1
 8010532:	4456      	add	r6, sl
 8010534:	4649      	mov	r1, r9
 8010536:	2201      	movs	r2, #1
 8010538:	4658      	mov	r0, fp
 801053a:	f000 fba1 	bl	8010c80 <__lshift>
 801053e:	4621      	mov	r1, r4
 8010540:	4681      	mov	r9, r0
 8010542:	f000 fc09 	bl	8010d58 <__mcmp>
 8010546:	2800      	cmp	r0, #0
 8010548:	dcb0      	bgt.n	80104ac <_dtoa_r+0xa64>
 801054a:	d102      	bne.n	8010552 <_dtoa_r+0xb0a>
 801054c:	f018 0f01 	tst.w	r8, #1
 8010550:	d1ac      	bne.n	80104ac <_dtoa_r+0xa64>
 8010552:	4633      	mov	r3, r6
 8010554:	461e      	mov	r6, r3
 8010556:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801055a:	2a30      	cmp	r2, #48	@ 0x30
 801055c:	d0fa      	beq.n	8010554 <_dtoa_r+0xb0c>
 801055e:	e5be      	b.n	80100de <_dtoa_r+0x696>
 8010560:	459a      	cmp	sl, r3
 8010562:	d1a4      	bne.n	80104ae <_dtoa_r+0xa66>
 8010564:	9b04      	ldr	r3, [sp, #16]
 8010566:	3301      	adds	r3, #1
 8010568:	9304      	str	r3, [sp, #16]
 801056a:	2331      	movs	r3, #49	@ 0x31
 801056c:	f88a 3000 	strb.w	r3, [sl]
 8010570:	e5b5      	b.n	80100de <_dtoa_r+0x696>
 8010572:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8010574:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80105d4 <_dtoa_r+0xb8c>
 8010578:	b11b      	cbz	r3, 8010582 <_dtoa_r+0xb3a>
 801057a:	f10a 0308 	add.w	r3, sl, #8
 801057e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8010580:	6013      	str	r3, [r2, #0]
 8010582:	4650      	mov	r0, sl
 8010584:	b017      	add	sp, #92	@ 0x5c
 8010586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801058a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801058c:	2b01      	cmp	r3, #1
 801058e:	f77f ae3d 	ble.w	801020c <_dtoa_r+0x7c4>
 8010592:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010594:	930a      	str	r3, [sp, #40]	@ 0x28
 8010596:	2001      	movs	r0, #1
 8010598:	e65b      	b.n	8010252 <_dtoa_r+0x80a>
 801059a:	9b08      	ldr	r3, [sp, #32]
 801059c:	2b00      	cmp	r3, #0
 801059e:	f77f aed6 	ble.w	801034e <_dtoa_r+0x906>
 80105a2:	4656      	mov	r6, sl
 80105a4:	4621      	mov	r1, r4
 80105a6:	4648      	mov	r0, r9
 80105a8:	f7ff f9c6 	bl	800f938 <quorem>
 80105ac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80105b0:	9b08      	ldr	r3, [sp, #32]
 80105b2:	f806 8b01 	strb.w	r8, [r6], #1
 80105b6:	eba6 020a 	sub.w	r2, r6, sl
 80105ba:	4293      	cmp	r3, r2
 80105bc:	ddb3      	ble.n	8010526 <_dtoa_r+0xade>
 80105be:	4649      	mov	r1, r9
 80105c0:	2300      	movs	r3, #0
 80105c2:	220a      	movs	r2, #10
 80105c4:	4658      	mov	r0, fp
 80105c6:	f000 f967 	bl	8010898 <__multadd>
 80105ca:	4681      	mov	r9, r0
 80105cc:	e7ea      	b.n	80105a4 <_dtoa_r+0xb5c>
 80105ce:	bf00      	nop
 80105d0:	08013607 	.word	0x08013607
 80105d4:	0801358b 	.word	0x0801358b

080105d8 <_free_r>:
 80105d8:	b538      	push	{r3, r4, r5, lr}
 80105da:	4605      	mov	r5, r0
 80105dc:	2900      	cmp	r1, #0
 80105de:	d040      	beq.n	8010662 <_free_r+0x8a>
 80105e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105e4:	1f0c      	subs	r4, r1, #4
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	bfb8      	it	lt
 80105ea:	18e4      	addlt	r4, r4, r3
 80105ec:	f000 f8e6 	bl	80107bc <__malloc_lock>
 80105f0:	4a1c      	ldr	r2, [pc, #112]	@ (8010664 <_free_r+0x8c>)
 80105f2:	6813      	ldr	r3, [r2, #0]
 80105f4:	b933      	cbnz	r3, 8010604 <_free_r+0x2c>
 80105f6:	6063      	str	r3, [r4, #4]
 80105f8:	6014      	str	r4, [r2, #0]
 80105fa:	4628      	mov	r0, r5
 80105fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010600:	f000 b8e2 	b.w	80107c8 <__malloc_unlock>
 8010604:	42a3      	cmp	r3, r4
 8010606:	d908      	bls.n	801061a <_free_r+0x42>
 8010608:	6820      	ldr	r0, [r4, #0]
 801060a:	1821      	adds	r1, r4, r0
 801060c:	428b      	cmp	r3, r1
 801060e:	bf01      	itttt	eq
 8010610:	6819      	ldreq	r1, [r3, #0]
 8010612:	685b      	ldreq	r3, [r3, #4]
 8010614:	1809      	addeq	r1, r1, r0
 8010616:	6021      	streq	r1, [r4, #0]
 8010618:	e7ed      	b.n	80105f6 <_free_r+0x1e>
 801061a:	461a      	mov	r2, r3
 801061c:	685b      	ldr	r3, [r3, #4]
 801061e:	b10b      	cbz	r3, 8010624 <_free_r+0x4c>
 8010620:	42a3      	cmp	r3, r4
 8010622:	d9fa      	bls.n	801061a <_free_r+0x42>
 8010624:	6811      	ldr	r1, [r2, #0]
 8010626:	1850      	adds	r0, r2, r1
 8010628:	42a0      	cmp	r0, r4
 801062a:	d10b      	bne.n	8010644 <_free_r+0x6c>
 801062c:	6820      	ldr	r0, [r4, #0]
 801062e:	4401      	add	r1, r0
 8010630:	1850      	adds	r0, r2, r1
 8010632:	4283      	cmp	r3, r0
 8010634:	6011      	str	r1, [r2, #0]
 8010636:	d1e0      	bne.n	80105fa <_free_r+0x22>
 8010638:	6818      	ldr	r0, [r3, #0]
 801063a:	685b      	ldr	r3, [r3, #4]
 801063c:	4408      	add	r0, r1
 801063e:	6010      	str	r0, [r2, #0]
 8010640:	6053      	str	r3, [r2, #4]
 8010642:	e7da      	b.n	80105fa <_free_r+0x22>
 8010644:	d902      	bls.n	801064c <_free_r+0x74>
 8010646:	230c      	movs	r3, #12
 8010648:	602b      	str	r3, [r5, #0]
 801064a:	e7d6      	b.n	80105fa <_free_r+0x22>
 801064c:	6820      	ldr	r0, [r4, #0]
 801064e:	1821      	adds	r1, r4, r0
 8010650:	428b      	cmp	r3, r1
 8010652:	bf01      	itttt	eq
 8010654:	6819      	ldreq	r1, [r3, #0]
 8010656:	685b      	ldreq	r3, [r3, #4]
 8010658:	1809      	addeq	r1, r1, r0
 801065a:	6021      	streq	r1, [r4, #0]
 801065c:	6063      	str	r3, [r4, #4]
 801065e:	6054      	str	r4, [r2, #4]
 8010660:	e7cb      	b.n	80105fa <_free_r+0x22>
 8010662:	bd38      	pop	{r3, r4, r5, pc}
 8010664:	20001c74 	.word	0x20001c74

08010668 <malloc>:
 8010668:	4b02      	ldr	r3, [pc, #8]	@ (8010674 <malloc+0xc>)
 801066a:	4601      	mov	r1, r0
 801066c:	6818      	ldr	r0, [r3, #0]
 801066e:	f000 b825 	b.w	80106bc <_malloc_r>
 8010672:	bf00      	nop
 8010674:	20000208 	.word	0x20000208

08010678 <sbrk_aligned>:
 8010678:	b570      	push	{r4, r5, r6, lr}
 801067a:	4e0f      	ldr	r6, [pc, #60]	@ (80106b8 <sbrk_aligned+0x40>)
 801067c:	460c      	mov	r4, r1
 801067e:	6831      	ldr	r1, [r6, #0]
 8010680:	4605      	mov	r5, r0
 8010682:	b911      	cbnz	r1, 801068a <sbrk_aligned+0x12>
 8010684:	f001 ffee 	bl	8012664 <_sbrk_r>
 8010688:	6030      	str	r0, [r6, #0]
 801068a:	4621      	mov	r1, r4
 801068c:	4628      	mov	r0, r5
 801068e:	f001 ffe9 	bl	8012664 <_sbrk_r>
 8010692:	1c43      	adds	r3, r0, #1
 8010694:	d103      	bne.n	801069e <sbrk_aligned+0x26>
 8010696:	f04f 34ff 	mov.w	r4, #4294967295
 801069a:	4620      	mov	r0, r4
 801069c:	bd70      	pop	{r4, r5, r6, pc}
 801069e:	1cc4      	adds	r4, r0, #3
 80106a0:	f024 0403 	bic.w	r4, r4, #3
 80106a4:	42a0      	cmp	r0, r4
 80106a6:	d0f8      	beq.n	801069a <sbrk_aligned+0x22>
 80106a8:	1a21      	subs	r1, r4, r0
 80106aa:	4628      	mov	r0, r5
 80106ac:	f001 ffda 	bl	8012664 <_sbrk_r>
 80106b0:	3001      	adds	r0, #1
 80106b2:	d1f2      	bne.n	801069a <sbrk_aligned+0x22>
 80106b4:	e7ef      	b.n	8010696 <sbrk_aligned+0x1e>
 80106b6:	bf00      	nop
 80106b8:	20001c70 	.word	0x20001c70

080106bc <_malloc_r>:
 80106bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106c0:	1ccd      	adds	r5, r1, #3
 80106c2:	f025 0503 	bic.w	r5, r5, #3
 80106c6:	3508      	adds	r5, #8
 80106c8:	2d0c      	cmp	r5, #12
 80106ca:	bf38      	it	cc
 80106cc:	250c      	movcc	r5, #12
 80106ce:	2d00      	cmp	r5, #0
 80106d0:	4606      	mov	r6, r0
 80106d2:	db01      	blt.n	80106d8 <_malloc_r+0x1c>
 80106d4:	42a9      	cmp	r1, r5
 80106d6:	d904      	bls.n	80106e2 <_malloc_r+0x26>
 80106d8:	230c      	movs	r3, #12
 80106da:	6033      	str	r3, [r6, #0]
 80106dc:	2000      	movs	r0, #0
 80106de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80107b8 <_malloc_r+0xfc>
 80106e6:	f000 f869 	bl	80107bc <__malloc_lock>
 80106ea:	f8d8 3000 	ldr.w	r3, [r8]
 80106ee:	461c      	mov	r4, r3
 80106f0:	bb44      	cbnz	r4, 8010744 <_malloc_r+0x88>
 80106f2:	4629      	mov	r1, r5
 80106f4:	4630      	mov	r0, r6
 80106f6:	f7ff ffbf 	bl	8010678 <sbrk_aligned>
 80106fa:	1c43      	adds	r3, r0, #1
 80106fc:	4604      	mov	r4, r0
 80106fe:	d158      	bne.n	80107b2 <_malloc_r+0xf6>
 8010700:	f8d8 4000 	ldr.w	r4, [r8]
 8010704:	4627      	mov	r7, r4
 8010706:	2f00      	cmp	r7, #0
 8010708:	d143      	bne.n	8010792 <_malloc_r+0xd6>
 801070a:	2c00      	cmp	r4, #0
 801070c:	d04b      	beq.n	80107a6 <_malloc_r+0xea>
 801070e:	6823      	ldr	r3, [r4, #0]
 8010710:	4639      	mov	r1, r7
 8010712:	4630      	mov	r0, r6
 8010714:	eb04 0903 	add.w	r9, r4, r3
 8010718:	f001 ffa4 	bl	8012664 <_sbrk_r>
 801071c:	4581      	cmp	r9, r0
 801071e:	d142      	bne.n	80107a6 <_malloc_r+0xea>
 8010720:	6821      	ldr	r1, [r4, #0]
 8010722:	4630      	mov	r0, r6
 8010724:	1a6d      	subs	r5, r5, r1
 8010726:	4629      	mov	r1, r5
 8010728:	f7ff ffa6 	bl	8010678 <sbrk_aligned>
 801072c:	3001      	adds	r0, #1
 801072e:	d03a      	beq.n	80107a6 <_malloc_r+0xea>
 8010730:	6823      	ldr	r3, [r4, #0]
 8010732:	442b      	add	r3, r5
 8010734:	6023      	str	r3, [r4, #0]
 8010736:	f8d8 3000 	ldr.w	r3, [r8]
 801073a:	685a      	ldr	r2, [r3, #4]
 801073c:	bb62      	cbnz	r2, 8010798 <_malloc_r+0xdc>
 801073e:	f8c8 7000 	str.w	r7, [r8]
 8010742:	e00f      	b.n	8010764 <_malloc_r+0xa8>
 8010744:	6822      	ldr	r2, [r4, #0]
 8010746:	1b52      	subs	r2, r2, r5
 8010748:	d420      	bmi.n	801078c <_malloc_r+0xd0>
 801074a:	2a0b      	cmp	r2, #11
 801074c:	d917      	bls.n	801077e <_malloc_r+0xc2>
 801074e:	1961      	adds	r1, r4, r5
 8010750:	42a3      	cmp	r3, r4
 8010752:	6025      	str	r5, [r4, #0]
 8010754:	bf18      	it	ne
 8010756:	6059      	strne	r1, [r3, #4]
 8010758:	6863      	ldr	r3, [r4, #4]
 801075a:	bf08      	it	eq
 801075c:	f8c8 1000 	streq.w	r1, [r8]
 8010760:	5162      	str	r2, [r4, r5]
 8010762:	604b      	str	r3, [r1, #4]
 8010764:	4630      	mov	r0, r6
 8010766:	f000 f82f 	bl	80107c8 <__malloc_unlock>
 801076a:	f104 000b 	add.w	r0, r4, #11
 801076e:	1d23      	adds	r3, r4, #4
 8010770:	f020 0007 	bic.w	r0, r0, #7
 8010774:	1ac2      	subs	r2, r0, r3
 8010776:	bf1c      	itt	ne
 8010778:	1a1b      	subne	r3, r3, r0
 801077a:	50a3      	strne	r3, [r4, r2]
 801077c:	e7af      	b.n	80106de <_malloc_r+0x22>
 801077e:	6862      	ldr	r2, [r4, #4]
 8010780:	42a3      	cmp	r3, r4
 8010782:	bf0c      	ite	eq
 8010784:	f8c8 2000 	streq.w	r2, [r8]
 8010788:	605a      	strne	r2, [r3, #4]
 801078a:	e7eb      	b.n	8010764 <_malloc_r+0xa8>
 801078c:	4623      	mov	r3, r4
 801078e:	6864      	ldr	r4, [r4, #4]
 8010790:	e7ae      	b.n	80106f0 <_malloc_r+0x34>
 8010792:	463c      	mov	r4, r7
 8010794:	687f      	ldr	r7, [r7, #4]
 8010796:	e7b6      	b.n	8010706 <_malloc_r+0x4a>
 8010798:	461a      	mov	r2, r3
 801079a:	685b      	ldr	r3, [r3, #4]
 801079c:	42a3      	cmp	r3, r4
 801079e:	d1fb      	bne.n	8010798 <_malloc_r+0xdc>
 80107a0:	2300      	movs	r3, #0
 80107a2:	6053      	str	r3, [r2, #4]
 80107a4:	e7de      	b.n	8010764 <_malloc_r+0xa8>
 80107a6:	230c      	movs	r3, #12
 80107a8:	4630      	mov	r0, r6
 80107aa:	6033      	str	r3, [r6, #0]
 80107ac:	f000 f80c 	bl	80107c8 <__malloc_unlock>
 80107b0:	e794      	b.n	80106dc <_malloc_r+0x20>
 80107b2:	6005      	str	r5, [r0, #0]
 80107b4:	e7d6      	b.n	8010764 <_malloc_r+0xa8>
 80107b6:	bf00      	nop
 80107b8:	20001c74 	.word	0x20001c74

080107bc <__malloc_lock>:
 80107bc:	4801      	ldr	r0, [pc, #4]	@ (80107c4 <__malloc_lock+0x8>)
 80107be:	f7ff b898 	b.w	800f8f2 <__retarget_lock_acquire_recursive>
 80107c2:	bf00      	nop
 80107c4:	20001c6c 	.word	0x20001c6c

080107c8 <__malloc_unlock>:
 80107c8:	4801      	ldr	r0, [pc, #4]	@ (80107d0 <__malloc_unlock+0x8>)
 80107ca:	f7ff b893 	b.w	800f8f4 <__retarget_lock_release_recursive>
 80107ce:	bf00      	nop
 80107d0:	20001c6c 	.word	0x20001c6c

080107d4 <_Balloc>:
 80107d4:	b570      	push	{r4, r5, r6, lr}
 80107d6:	69c6      	ldr	r6, [r0, #28]
 80107d8:	4604      	mov	r4, r0
 80107da:	460d      	mov	r5, r1
 80107dc:	b976      	cbnz	r6, 80107fc <_Balloc+0x28>
 80107de:	2010      	movs	r0, #16
 80107e0:	f7ff ff42 	bl	8010668 <malloc>
 80107e4:	4602      	mov	r2, r0
 80107e6:	61e0      	str	r0, [r4, #28]
 80107e8:	b920      	cbnz	r0, 80107f4 <_Balloc+0x20>
 80107ea:	216b      	movs	r1, #107	@ 0x6b
 80107ec:	4b17      	ldr	r3, [pc, #92]	@ (801084c <_Balloc+0x78>)
 80107ee:	4818      	ldr	r0, [pc, #96]	@ (8010850 <_Balloc+0x7c>)
 80107f0:	f001 ff4e 	bl	8012690 <__assert_func>
 80107f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80107f8:	6006      	str	r6, [r0, #0]
 80107fa:	60c6      	str	r6, [r0, #12]
 80107fc:	69e6      	ldr	r6, [r4, #28]
 80107fe:	68f3      	ldr	r3, [r6, #12]
 8010800:	b183      	cbz	r3, 8010824 <_Balloc+0x50>
 8010802:	69e3      	ldr	r3, [r4, #28]
 8010804:	68db      	ldr	r3, [r3, #12]
 8010806:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801080a:	b9b8      	cbnz	r0, 801083c <_Balloc+0x68>
 801080c:	2101      	movs	r1, #1
 801080e:	fa01 f605 	lsl.w	r6, r1, r5
 8010812:	1d72      	adds	r2, r6, #5
 8010814:	4620      	mov	r0, r4
 8010816:	0092      	lsls	r2, r2, #2
 8010818:	f001 ff58 	bl	80126cc <_calloc_r>
 801081c:	b160      	cbz	r0, 8010838 <_Balloc+0x64>
 801081e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010822:	e00e      	b.n	8010842 <_Balloc+0x6e>
 8010824:	2221      	movs	r2, #33	@ 0x21
 8010826:	2104      	movs	r1, #4
 8010828:	4620      	mov	r0, r4
 801082a:	f001 ff4f 	bl	80126cc <_calloc_r>
 801082e:	69e3      	ldr	r3, [r4, #28]
 8010830:	60f0      	str	r0, [r6, #12]
 8010832:	68db      	ldr	r3, [r3, #12]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d1e4      	bne.n	8010802 <_Balloc+0x2e>
 8010838:	2000      	movs	r0, #0
 801083a:	bd70      	pop	{r4, r5, r6, pc}
 801083c:	6802      	ldr	r2, [r0, #0]
 801083e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010842:	2300      	movs	r3, #0
 8010844:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010848:	e7f7      	b.n	801083a <_Balloc+0x66>
 801084a:	bf00      	nop
 801084c:	08013598 	.word	0x08013598
 8010850:	08013618 	.word	0x08013618

08010854 <_Bfree>:
 8010854:	b570      	push	{r4, r5, r6, lr}
 8010856:	69c6      	ldr	r6, [r0, #28]
 8010858:	4605      	mov	r5, r0
 801085a:	460c      	mov	r4, r1
 801085c:	b976      	cbnz	r6, 801087c <_Bfree+0x28>
 801085e:	2010      	movs	r0, #16
 8010860:	f7ff ff02 	bl	8010668 <malloc>
 8010864:	4602      	mov	r2, r0
 8010866:	61e8      	str	r0, [r5, #28]
 8010868:	b920      	cbnz	r0, 8010874 <_Bfree+0x20>
 801086a:	218f      	movs	r1, #143	@ 0x8f
 801086c:	4b08      	ldr	r3, [pc, #32]	@ (8010890 <_Bfree+0x3c>)
 801086e:	4809      	ldr	r0, [pc, #36]	@ (8010894 <_Bfree+0x40>)
 8010870:	f001 ff0e 	bl	8012690 <__assert_func>
 8010874:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010878:	6006      	str	r6, [r0, #0]
 801087a:	60c6      	str	r6, [r0, #12]
 801087c:	b13c      	cbz	r4, 801088e <_Bfree+0x3a>
 801087e:	69eb      	ldr	r3, [r5, #28]
 8010880:	6862      	ldr	r2, [r4, #4]
 8010882:	68db      	ldr	r3, [r3, #12]
 8010884:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010888:	6021      	str	r1, [r4, #0]
 801088a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801088e:	bd70      	pop	{r4, r5, r6, pc}
 8010890:	08013598 	.word	0x08013598
 8010894:	08013618 	.word	0x08013618

08010898 <__multadd>:
 8010898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801089c:	4607      	mov	r7, r0
 801089e:	460c      	mov	r4, r1
 80108a0:	461e      	mov	r6, r3
 80108a2:	2000      	movs	r0, #0
 80108a4:	690d      	ldr	r5, [r1, #16]
 80108a6:	f101 0c14 	add.w	ip, r1, #20
 80108aa:	f8dc 3000 	ldr.w	r3, [ip]
 80108ae:	3001      	adds	r0, #1
 80108b0:	b299      	uxth	r1, r3
 80108b2:	fb02 6101 	mla	r1, r2, r1, r6
 80108b6:	0c1e      	lsrs	r6, r3, #16
 80108b8:	0c0b      	lsrs	r3, r1, #16
 80108ba:	fb02 3306 	mla	r3, r2, r6, r3
 80108be:	b289      	uxth	r1, r1
 80108c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80108c4:	4285      	cmp	r5, r0
 80108c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80108ca:	f84c 1b04 	str.w	r1, [ip], #4
 80108ce:	dcec      	bgt.n	80108aa <__multadd+0x12>
 80108d0:	b30e      	cbz	r6, 8010916 <__multadd+0x7e>
 80108d2:	68a3      	ldr	r3, [r4, #8]
 80108d4:	42ab      	cmp	r3, r5
 80108d6:	dc19      	bgt.n	801090c <__multadd+0x74>
 80108d8:	6861      	ldr	r1, [r4, #4]
 80108da:	4638      	mov	r0, r7
 80108dc:	3101      	adds	r1, #1
 80108de:	f7ff ff79 	bl	80107d4 <_Balloc>
 80108e2:	4680      	mov	r8, r0
 80108e4:	b928      	cbnz	r0, 80108f2 <__multadd+0x5a>
 80108e6:	4602      	mov	r2, r0
 80108e8:	21ba      	movs	r1, #186	@ 0xba
 80108ea:	4b0c      	ldr	r3, [pc, #48]	@ (801091c <__multadd+0x84>)
 80108ec:	480c      	ldr	r0, [pc, #48]	@ (8010920 <__multadd+0x88>)
 80108ee:	f001 fecf 	bl	8012690 <__assert_func>
 80108f2:	6922      	ldr	r2, [r4, #16]
 80108f4:	f104 010c 	add.w	r1, r4, #12
 80108f8:	3202      	adds	r2, #2
 80108fa:	0092      	lsls	r2, r2, #2
 80108fc:	300c      	adds	r0, #12
 80108fe:	f7ff f808 	bl	800f912 <memcpy>
 8010902:	4621      	mov	r1, r4
 8010904:	4638      	mov	r0, r7
 8010906:	f7ff ffa5 	bl	8010854 <_Bfree>
 801090a:	4644      	mov	r4, r8
 801090c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010910:	3501      	adds	r5, #1
 8010912:	615e      	str	r6, [r3, #20]
 8010914:	6125      	str	r5, [r4, #16]
 8010916:	4620      	mov	r0, r4
 8010918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801091c:	08013607 	.word	0x08013607
 8010920:	08013618 	.word	0x08013618

08010924 <__s2b>:
 8010924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010928:	4615      	mov	r5, r2
 801092a:	2209      	movs	r2, #9
 801092c:	461f      	mov	r7, r3
 801092e:	3308      	adds	r3, #8
 8010930:	460c      	mov	r4, r1
 8010932:	fb93 f3f2 	sdiv	r3, r3, r2
 8010936:	4606      	mov	r6, r0
 8010938:	2201      	movs	r2, #1
 801093a:	2100      	movs	r1, #0
 801093c:	429a      	cmp	r2, r3
 801093e:	db09      	blt.n	8010954 <__s2b+0x30>
 8010940:	4630      	mov	r0, r6
 8010942:	f7ff ff47 	bl	80107d4 <_Balloc>
 8010946:	b940      	cbnz	r0, 801095a <__s2b+0x36>
 8010948:	4602      	mov	r2, r0
 801094a:	21d3      	movs	r1, #211	@ 0xd3
 801094c:	4b18      	ldr	r3, [pc, #96]	@ (80109b0 <__s2b+0x8c>)
 801094e:	4819      	ldr	r0, [pc, #100]	@ (80109b4 <__s2b+0x90>)
 8010950:	f001 fe9e 	bl	8012690 <__assert_func>
 8010954:	0052      	lsls	r2, r2, #1
 8010956:	3101      	adds	r1, #1
 8010958:	e7f0      	b.n	801093c <__s2b+0x18>
 801095a:	9b08      	ldr	r3, [sp, #32]
 801095c:	2d09      	cmp	r5, #9
 801095e:	6143      	str	r3, [r0, #20]
 8010960:	f04f 0301 	mov.w	r3, #1
 8010964:	6103      	str	r3, [r0, #16]
 8010966:	dd16      	ble.n	8010996 <__s2b+0x72>
 8010968:	f104 0909 	add.w	r9, r4, #9
 801096c:	46c8      	mov	r8, r9
 801096e:	442c      	add	r4, r5
 8010970:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010974:	4601      	mov	r1, r0
 8010976:	220a      	movs	r2, #10
 8010978:	4630      	mov	r0, r6
 801097a:	3b30      	subs	r3, #48	@ 0x30
 801097c:	f7ff ff8c 	bl	8010898 <__multadd>
 8010980:	45a0      	cmp	r8, r4
 8010982:	d1f5      	bne.n	8010970 <__s2b+0x4c>
 8010984:	f1a5 0408 	sub.w	r4, r5, #8
 8010988:	444c      	add	r4, r9
 801098a:	1b2d      	subs	r5, r5, r4
 801098c:	1963      	adds	r3, r4, r5
 801098e:	42bb      	cmp	r3, r7
 8010990:	db04      	blt.n	801099c <__s2b+0x78>
 8010992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010996:	2509      	movs	r5, #9
 8010998:	340a      	adds	r4, #10
 801099a:	e7f6      	b.n	801098a <__s2b+0x66>
 801099c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80109a0:	4601      	mov	r1, r0
 80109a2:	220a      	movs	r2, #10
 80109a4:	4630      	mov	r0, r6
 80109a6:	3b30      	subs	r3, #48	@ 0x30
 80109a8:	f7ff ff76 	bl	8010898 <__multadd>
 80109ac:	e7ee      	b.n	801098c <__s2b+0x68>
 80109ae:	bf00      	nop
 80109b0:	08013607 	.word	0x08013607
 80109b4:	08013618 	.word	0x08013618

080109b8 <__hi0bits>:
 80109b8:	4603      	mov	r3, r0
 80109ba:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80109be:	bf3a      	itte	cc
 80109c0:	0403      	lslcc	r3, r0, #16
 80109c2:	2010      	movcc	r0, #16
 80109c4:	2000      	movcs	r0, #0
 80109c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80109ca:	bf3c      	itt	cc
 80109cc:	021b      	lslcc	r3, r3, #8
 80109ce:	3008      	addcc	r0, #8
 80109d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80109d4:	bf3c      	itt	cc
 80109d6:	011b      	lslcc	r3, r3, #4
 80109d8:	3004      	addcc	r0, #4
 80109da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80109de:	bf3c      	itt	cc
 80109e0:	009b      	lslcc	r3, r3, #2
 80109e2:	3002      	addcc	r0, #2
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	db05      	blt.n	80109f4 <__hi0bits+0x3c>
 80109e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80109ec:	f100 0001 	add.w	r0, r0, #1
 80109f0:	bf08      	it	eq
 80109f2:	2020      	moveq	r0, #32
 80109f4:	4770      	bx	lr

080109f6 <__lo0bits>:
 80109f6:	6803      	ldr	r3, [r0, #0]
 80109f8:	4602      	mov	r2, r0
 80109fa:	f013 0007 	ands.w	r0, r3, #7
 80109fe:	d00b      	beq.n	8010a18 <__lo0bits+0x22>
 8010a00:	07d9      	lsls	r1, r3, #31
 8010a02:	d421      	bmi.n	8010a48 <__lo0bits+0x52>
 8010a04:	0798      	lsls	r0, r3, #30
 8010a06:	bf49      	itett	mi
 8010a08:	085b      	lsrmi	r3, r3, #1
 8010a0a:	089b      	lsrpl	r3, r3, #2
 8010a0c:	2001      	movmi	r0, #1
 8010a0e:	6013      	strmi	r3, [r2, #0]
 8010a10:	bf5c      	itt	pl
 8010a12:	2002      	movpl	r0, #2
 8010a14:	6013      	strpl	r3, [r2, #0]
 8010a16:	4770      	bx	lr
 8010a18:	b299      	uxth	r1, r3
 8010a1a:	b909      	cbnz	r1, 8010a20 <__lo0bits+0x2a>
 8010a1c:	2010      	movs	r0, #16
 8010a1e:	0c1b      	lsrs	r3, r3, #16
 8010a20:	b2d9      	uxtb	r1, r3
 8010a22:	b909      	cbnz	r1, 8010a28 <__lo0bits+0x32>
 8010a24:	3008      	adds	r0, #8
 8010a26:	0a1b      	lsrs	r3, r3, #8
 8010a28:	0719      	lsls	r1, r3, #28
 8010a2a:	bf04      	itt	eq
 8010a2c:	091b      	lsreq	r3, r3, #4
 8010a2e:	3004      	addeq	r0, #4
 8010a30:	0799      	lsls	r1, r3, #30
 8010a32:	bf04      	itt	eq
 8010a34:	089b      	lsreq	r3, r3, #2
 8010a36:	3002      	addeq	r0, #2
 8010a38:	07d9      	lsls	r1, r3, #31
 8010a3a:	d403      	bmi.n	8010a44 <__lo0bits+0x4e>
 8010a3c:	085b      	lsrs	r3, r3, #1
 8010a3e:	f100 0001 	add.w	r0, r0, #1
 8010a42:	d003      	beq.n	8010a4c <__lo0bits+0x56>
 8010a44:	6013      	str	r3, [r2, #0]
 8010a46:	4770      	bx	lr
 8010a48:	2000      	movs	r0, #0
 8010a4a:	4770      	bx	lr
 8010a4c:	2020      	movs	r0, #32
 8010a4e:	4770      	bx	lr

08010a50 <__i2b>:
 8010a50:	b510      	push	{r4, lr}
 8010a52:	460c      	mov	r4, r1
 8010a54:	2101      	movs	r1, #1
 8010a56:	f7ff febd 	bl	80107d4 <_Balloc>
 8010a5a:	4602      	mov	r2, r0
 8010a5c:	b928      	cbnz	r0, 8010a6a <__i2b+0x1a>
 8010a5e:	f240 1145 	movw	r1, #325	@ 0x145
 8010a62:	4b04      	ldr	r3, [pc, #16]	@ (8010a74 <__i2b+0x24>)
 8010a64:	4804      	ldr	r0, [pc, #16]	@ (8010a78 <__i2b+0x28>)
 8010a66:	f001 fe13 	bl	8012690 <__assert_func>
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	6144      	str	r4, [r0, #20]
 8010a6e:	6103      	str	r3, [r0, #16]
 8010a70:	bd10      	pop	{r4, pc}
 8010a72:	bf00      	nop
 8010a74:	08013607 	.word	0x08013607
 8010a78:	08013618 	.word	0x08013618

08010a7c <__multiply>:
 8010a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a80:	4614      	mov	r4, r2
 8010a82:	690a      	ldr	r2, [r1, #16]
 8010a84:	6923      	ldr	r3, [r4, #16]
 8010a86:	460f      	mov	r7, r1
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	bfa2      	ittt	ge
 8010a8c:	4623      	movge	r3, r4
 8010a8e:	460c      	movge	r4, r1
 8010a90:	461f      	movge	r7, r3
 8010a92:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010a96:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010a9a:	68a3      	ldr	r3, [r4, #8]
 8010a9c:	6861      	ldr	r1, [r4, #4]
 8010a9e:	eb0a 0609 	add.w	r6, sl, r9
 8010aa2:	42b3      	cmp	r3, r6
 8010aa4:	b085      	sub	sp, #20
 8010aa6:	bfb8      	it	lt
 8010aa8:	3101      	addlt	r1, #1
 8010aaa:	f7ff fe93 	bl	80107d4 <_Balloc>
 8010aae:	b930      	cbnz	r0, 8010abe <__multiply+0x42>
 8010ab0:	4602      	mov	r2, r0
 8010ab2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010ab6:	4b43      	ldr	r3, [pc, #268]	@ (8010bc4 <__multiply+0x148>)
 8010ab8:	4843      	ldr	r0, [pc, #268]	@ (8010bc8 <__multiply+0x14c>)
 8010aba:	f001 fde9 	bl	8012690 <__assert_func>
 8010abe:	f100 0514 	add.w	r5, r0, #20
 8010ac2:	462b      	mov	r3, r5
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010aca:	4543      	cmp	r3, r8
 8010acc:	d321      	bcc.n	8010b12 <__multiply+0x96>
 8010ace:	f107 0114 	add.w	r1, r7, #20
 8010ad2:	f104 0214 	add.w	r2, r4, #20
 8010ad6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010ada:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010ade:	9302      	str	r3, [sp, #8]
 8010ae0:	1b13      	subs	r3, r2, r4
 8010ae2:	3b15      	subs	r3, #21
 8010ae4:	f023 0303 	bic.w	r3, r3, #3
 8010ae8:	3304      	adds	r3, #4
 8010aea:	f104 0715 	add.w	r7, r4, #21
 8010aee:	42ba      	cmp	r2, r7
 8010af0:	bf38      	it	cc
 8010af2:	2304      	movcc	r3, #4
 8010af4:	9301      	str	r3, [sp, #4]
 8010af6:	9b02      	ldr	r3, [sp, #8]
 8010af8:	9103      	str	r1, [sp, #12]
 8010afa:	428b      	cmp	r3, r1
 8010afc:	d80c      	bhi.n	8010b18 <__multiply+0x9c>
 8010afe:	2e00      	cmp	r6, #0
 8010b00:	dd03      	ble.n	8010b0a <__multiply+0x8e>
 8010b02:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d05a      	beq.n	8010bc0 <__multiply+0x144>
 8010b0a:	6106      	str	r6, [r0, #16]
 8010b0c:	b005      	add	sp, #20
 8010b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b12:	f843 2b04 	str.w	r2, [r3], #4
 8010b16:	e7d8      	b.n	8010aca <__multiply+0x4e>
 8010b18:	f8b1 a000 	ldrh.w	sl, [r1]
 8010b1c:	f1ba 0f00 	cmp.w	sl, #0
 8010b20:	d023      	beq.n	8010b6a <__multiply+0xee>
 8010b22:	46a9      	mov	r9, r5
 8010b24:	f04f 0c00 	mov.w	ip, #0
 8010b28:	f104 0e14 	add.w	lr, r4, #20
 8010b2c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010b30:	f8d9 3000 	ldr.w	r3, [r9]
 8010b34:	fa1f fb87 	uxth.w	fp, r7
 8010b38:	b29b      	uxth	r3, r3
 8010b3a:	fb0a 330b 	mla	r3, sl, fp, r3
 8010b3e:	4463      	add	r3, ip
 8010b40:	f8d9 c000 	ldr.w	ip, [r9]
 8010b44:	0c3f      	lsrs	r7, r7, #16
 8010b46:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8010b4a:	fb0a c707 	mla	r7, sl, r7, ip
 8010b4e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010b52:	b29b      	uxth	r3, r3
 8010b54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010b58:	4572      	cmp	r2, lr
 8010b5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010b5e:	f849 3b04 	str.w	r3, [r9], #4
 8010b62:	d8e3      	bhi.n	8010b2c <__multiply+0xb0>
 8010b64:	9b01      	ldr	r3, [sp, #4]
 8010b66:	f845 c003 	str.w	ip, [r5, r3]
 8010b6a:	9b03      	ldr	r3, [sp, #12]
 8010b6c:	3104      	adds	r1, #4
 8010b6e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010b72:	f1b9 0f00 	cmp.w	r9, #0
 8010b76:	d021      	beq.n	8010bbc <__multiply+0x140>
 8010b78:	46ae      	mov	lr, r5
 8010b7a:	f04f 0a00 	mov.w	sl, #0
 8010b7e:	682b      	ldr	r3, [r5, #0]
 8010b80:	f104 0c14 	add.w	ip, r4, #20
 8010b84:	f8bc b000 	ldrh.w	fp, [ip]
 8010b88:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010b8c:	b29b      	uxth	r3, r3
 8010b8e:	fb09 770b 	mla	r7, r9, fp, r7
 8010b92:	4457      	add	r7, sl
 8010b94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010b98:	f84e 3b04 	str.w	r3, [lr], #4
 8010b9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010ba0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010ba4:	f8be 3000 	ldrh.w	r3, [lr]
 8010ba8:	4562      	cmp	r2, ip
 8010baa:	fb09 330a 	mla	r3, r9, sl, r3
 8010bae:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010bb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010bb6:	d8e5      	bhi.n	8010b84 <__multiply+0x108>
 8010bb8:	9f01      	ldr	r7, [sp, #4]
 8010bba:	51eb      	str	r3, [r5, r7]
 8010bbc:	3504      	adds	r5, #4
 8010bbe:	e79a      	b.n	8010af6 <__multiply+0x7a>
 8010bc0:	3e01      	subs	r6, #1
 8010bc2:	e79c      	b.n	8010afe <__multiply+0x82>
 8010bc4:	08013607 	.word	0x08013607
 8010bc8:	08013618 	.word	0x08013618

08010bcc <__pow5mult>:
 8010bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bd0:	4615      	mov	r5, r2
 8010bd2:	f012 0203 	ands.w	r2, r2, #3
 8010bd6:	4607      	mov	r7, r0
 8010bd8:	460e      	mov	r6, r1
 8010bda:	d007      	beq.n	8010bec <__pow5mult+0x20>
 8010bdc:	4c25      	ldr	r4, [pc, #148]	@ (8010c74 <__pow5mult+0xa8>)
 8010bde:	3a01      	subs	r2, #1
 8010be0:	2300      	movs	r3, #0
 8010be2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010be6:	f7ff fe57 	bl	8010898 <__multadd>
 8010bea:	4606      	mov	r6, r0
 8010bec:	10ad      	asrs	r5, r5, #2
 8010bee:	d03d      	beq.n	8010c6c <__pow5mult+0xa0>
 8010bf0:	69fc      	ldr	r4, [r7, #28]
 8010bf2:	b97c      	cbnz	r4, 8010c14 <__pow5mult+0x48>
 8010bf4:	2010      	movs	r0, #16
 8010bf6:	f7ff fd37 	bl	8010668 <malloc>
 8010bfa:	4602      	mov	r2, r0
 8010bfc:	61f8      	str	r0, [r7, #28]
 8010bfe:	b928      	cbnz	r0, 8010c0c <__pow5mult+0x40>
 8010c00:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010c04:	4b1c      	ldr	r3, [pc, #112]	@ (8010c78 <__pow5mult+0xac>)
 8010c06:	481d      	ldr	r0, [pc, #116]	@ (8010c7c <__pow5mult+0xb0>)
 8010c08:	f001 fd42 	bl	8012690 <__assert_func>
 8010c0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010c10:	6004      	str	r4, [r0, #0]
 8010c12:	60c4      	str	r4, [r0, #12]
 8010c14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010c18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010c1c:	b94c      	cbnz	r4, 8010c32 <__pow5mult+0x66>
 8010c1e:	f240 2171 	movw	r1, #625	@ 0x271
 8010c22:	4638      	mov	r0, r7
 8010c24:	f7ff ff14 	bl	8010a50 <__i2b>
 8010c28:	2300      	movs	r3, #0
 8010c2a:	4604      	mov	r4, r0
 8010c2c:	f8c8 0008 	str.w	r0, [r8, #8]
 8010c30:	6003      	str	r3, [r0, #0]
 8010c32:	f04f 0900 	mov.w	r9, #0
 8010c36:	07eb      	lsls	r3, r5, #31
 8010c38:	d50a      	bpl.n	8010c50 <__pow5mult+0x84>
 8010c3a:	4631      	mov	r1, r6
 8010c3c:	4622      	mov	r2, r4
 8010c3e:	4638      	mov	r0, r7
 8010c40:	f7ff ff1c 	bl	8010a7c <__multiply>
 8010c44:	4680      	mov	r8, r0
 8010c46:	4631      	mov	r1, r6
 8010c48:	4638      	mov	r0, r7
 8010c4a:	f7ff fe03 	bl	8010854 <_Bfree>
 8010c4e:	4646      	mov	r6, r8
 8010c50:	106d      	asrs	r5, r5, #1
 8010c52:	d00b      	beq.n	8010c6c <__pow5mult+0xa0>
 8010c54:	6820      	ldr	r0, [r4, #0]
 8010c56:	b938      	cbnz	r0, 8010c68 <__pow5mult+0x9c>
 8010c58:	4622      	mov	r2, r4
 8010c5a:	4621      	mov	r1, r4
 8010c5c:	4638      	mov	r0, r7
 8010c5e:	f7ff ff0d 	bl	8010a7c <__multiply>
 8010c62:	6020      	str	r0, [r4, #0]
 8010c64:	f8c0 9000 	str.w	r9, [r0]
 8010c68:	4604      	mov	r4, r0
 8010c6a:	e7e4      	b.n	8010c36 <__pow5mult+0x6a>
 8010c6c:	4630      	mov	r0, r6
 8010c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c72:	bf00      	nop
 8010c74:	08013674 	.word	0x08013674
 8010c78:	08013598 	.word	0x08013598
 8010c7c:	08013618 	.word	0x08013618

08010c80 <__lshift>:
 8010c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c84:	460c      	mov	r4, r1
 8010c86:	4607      	mov	r7, r0
 8010c88:	4691      	mov	r9, r2
 8010c8a:	6923      	ldr	r3, [r4, #16]
 8010c8c:	6849      	ldr	r1, [r1, #4]
 8010c8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010c92:	68a3      	ldr	r3, [r4, #8]
 8010c94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010c98:	f108 0601 	add.w	r6, r8, #1
 8010c9c:	42b3      	cmp	r3, r6
 8010c9e:	db0b      	blt.n	8010cb8 <__lshift+0x38>
 8010ca0:	4638      	mov	r0, r7
 8010ca2:	f7ff fd97 	bl	80107d4 <_Balloc>
 8010ca6:	4605      	mov	r5, r0
 8010ca8:	b948      	cbnz	r0, 8010cbe <__lshift+0x3e>
 8010caa:	4602      	mov	r2, r0
 8010cac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010cb0:	4b27      	ldr	r3, [pc, #156]	@ (8010d50 <__lshift+0xd0>)
 8010cb2:	4828      	ldr	r0, [pc, #160]	@ (8010d54 <__lshift+0xd4>)
 8010cb4:	f001 fcec 	bl	8012690 <__assert_func>
 8010cb8:	3101      	adds	r1, #1
 8010cba:	005b      	lsls	r3, r3, #1
 8010cbc:	e7ee      	b.n	8010c9c <__lshift+0x1c>
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	f100 0114 	add.w	r1, r0, #20
 8010cc4:	f100 0210 	add.w	r2, r0, #16
 8010cc8:	4618      	mov	r0, r3
 8010cca:	4553      	cmp	r3, sl
 8010ccc:	db33      	blt.n	8010d36 <__lshift+0xb6>
 8010cce:	6920      	ldr	r0, [r4, #16]
 8010cd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010cd4:	f104 0314 	add.w	r3, r4, #20
 8010cd8:	f019 091f 	ands.w	r9, r9, #31
 8010cdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010ce0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010ce4:	d02b      	beq.n	8010d3e <__lshift+0xbe>
 8010ce6:	468a      	mov	sl, r1
 8010ce8:	2200      	movs	r2, #0
 8010cea:	f1c9 0e20 	rsb	lr, r9, #32
 8010cee:	6818      	ldr	r0, [r3, #0]
 8010cf0:	fa00 f009 	lsl.w	r0, r0, r9
 8010cf4:	4310      	orrs	r0, r2
 8010cf6:	f84a 0b04 	str.w	r0, [sl], #4
 8010cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cfe:	459c      	cmp	ip, r3
 8010d00:	fa22 f20e 	lsr.w	r2, r2, lr
 8010d04:	d8f3      	bhi.n	8010cee <__lshift+0x6e>
 8010d06:	ebac 0304 	sub.w	r3, ip, r4
 8010d0a:	3b15      	subs	r3, #21
 8010d0c:	f023 0303 	bic.w	r3, r3, #3
 8010d10:	3304      	adds	r3, #4
 8010d12:	f104 0015 	add.w	r0, r4, #21
 8010d16:	4584      	cmp	ip, r0
 8010d18:	bf38      	it	cc
 8010d1a:	2304      	movcc	r3, #4
 8010d1c:	50ca      	str	r2, [r1, r3]
 8010d1e:	b10a      	cbz	r2, 8010d24 <__lshift+0xa4>
 8010d20:	f108 0602 	add.w	r6, r8, #2
 8010d24:	3e01      	subs	r6, #1
 8010d26:	4638      	mov	r0, r7
 8010d28:	4621      	mov	r1, r4
 8010d2a:	612e      	str	r6, [r5, #16]
 8010d2c:	f7ff fd92 	bl	8010854 <_Bfree>
 8010d30:	4628      	mov	r0, r5
 8010d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d36:	f842 0f04 	str.w	r0, [r2, #4]!
 8010d3a:	3301      	adds	r3, #1
 8010d3c:	e7c5      	b.n	8010cca <__lshift+0x4a>
 8010d3e:	3904      	subs	r1, #4
 8010d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d44:	459c      	cmp	ip, r3
 8010d46:	f841 2f04 	str.w	r2, [r1, #4]!
 8010d4a:	d8f9      	bhi.n	8010d40 <__lshift+0xc0>
 8010d4c:	e7ea      	b.n	8010d24 <__lshift+0xa4>
 8010d4e:	bf00      	nop
 8010d50:	08013607 	.word	0x08013607
 8010d54:	08013618 	.word	0x08013618

08010d58 <__mcmp>:
 8010d58:	4603      	mov	r3, r0
 8010d5a:	690a      	ldr	r2, [r1, #16]
 8010d5c:	6900      	ldr	r0, [r0, #16]
 8010d5e:	b530      	push	{r4, r5, lr}
 8010d60:	1a80      	subs	r0, r0, r2
 8010d62:	d10e      	bne.n	8010d82 <__mcmp+0x2a>
 8010d64:	3314      	adds	r3, #20
 8010d66:	3114      	adds	r1, #20
 8010d68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010d6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010d70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010d74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010d78:	4295      	cmp	r5, r2
 8010d7a:	d003      	beq.n	8010d84 <__mcmp+0x2c>
 8010d7c:	d205      	bcs.n	8010d8a <__mcmp+0x32>
 8010d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8010d82:	bd30      	pop	{r4, r5, pc}
 8010d84:	42a3      	cmp	r3, r4
 8010d86:	d3f3      	bcc.n	8010d70 <__mcmp+0x18>
 8010d88:	e7fb      	b.n	8010d82 <__mcmp+0x2a>
 8010d8a:	2001      	movs	r0, #1
 8010d8c:	e7f9      	b.n	8010d82 <__mcmp+0x2a>
	...

08010d90 <__mdiff>:
 8010d90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d94:	4689      	mov	r9, r1
 8010d96:	4606      	mov	r6, r0
 8010d98:	4611      	mov	r1, r2
 8010d9a:	4648      	mov	r0, r9
 8010d9c:	4614      	mov	r4, r2
 8010d9e:	f7ff ffdb 	bl	8010d58 <__mcmp>
 8010da2:	1e05      	subs	r5, r0, #0
 8010da4:	d112      	bne.n	8010dcc <__mdiff+0x3c>
 8010da6:	4629      	mov	r1, r5
 8010da8:	4630      	mov	r0, r6
 8010daa:	f7ff fd13 	bl	80107d4 <_Balloc>
 8010dae:	4602      	mov	r2, r0
 8010db0:	b928      	cbnz	r0, 8010dbe <__mdiff+0x2e>
 8010db2:	f240 2137 	movw	r1, #567	@ 0x237
 8010db6:	4b3e      	ldr	r3, [pc, #248]	@ (8010eb0 <__mdiff+0x120>)
 8010db8:	483e      	ldr	r0, [pc, #248]	@ (8010eb4 <__mdiff+0x124>)
 8010dba:	f001 fc69 	bl	8012690 <__assert_func>
 8010dbe:	2301      	movs	r3, #1
 8010dc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010dc4:	4610      	mov	r0, r2
 8010dc6:	b003      	add	sp, #12
 8010dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dcc:	bfbc      	itt	lt
 8010dce:	464b      	movlt	r3, r9
 8010dd0:	46a1      	movlt	r9, r4
 8010dd2:	4630      	mov	r0, r6
 8010dd4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010dd8:	bfba      	itte	lt
 8010dda:	461c      	movlt	r4, r3
 8010ddc:	2501      	movlt	r5, #1
 8010dde:	2500      	movge	r5, #0
 8010de0:	f7ff fcf8 	bl	80107d4 <_Balloc>
 8010de4:	4602      	mov	r2, r0
 8010de6:	b918      	cbnz	r0, 8010df0 <__mdiff+0x60>
 8010de8:	f240 2145 	movw	r1, #581	@ 0x245
 8010dec:	4b30      	ldr	r3, [pc, #192]	@ (8010eb0 <__mdiff+0x120>)
 8010dee:	e7e3      	b.n	8010db8 <__mdiff+0x28>
 8010df0:	f100 0b14 	add.w	fp, r0, #20
 8010df4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010df8:	f109 0310 	add.w	r3, r9, #16
 8010dfc:	60c5      	str	r5, [r0, #12]
 8010dfe:	f04f 0c00 	mov.w	ip, #0
 8010e02:	f109 0514 	add.w	r5, r9, #20
 8010e06:	46d9      	mov	r9, fp
 8010e08:	6926      	ldr	r6, [r4, #16]
 8010e0a:	f104 0e14 	add.w	lr, r4, #20
 8010e0e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010e12:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010e16:	9301      	str	r3, [sp, #4]
 8010e18:	9b01      	ldr	r3, [sp, #4]
 8010e1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010e1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010e22:	b281      	uxth	r1, r0
 8010e24:	9301      	str	r3, [sp, #4]
 8010e26:	fa1f f38a 	uxth.w	r3, sl
 8010e2a:	1a5b      	subs	r3, r3, r1
 8010e2c:	0c00      	lsrs	r0, r0, #16
 8010e2e:	4463      	add	r3, ip
 8010e30:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010e34:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010e38:	b29b      	uxth	r3, r3
 8010e3a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010e3e:	4576      	cmp	r6, lr
 8010e40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010e44:	f849 3b04 	str.w	r3, [r9], #4
 8010e48:	d8e6      	bhi.n	8010e18 <__mdiff+0x88>
 8010e4a:	1b33      	subs	r3, r6, r4
 8010e4c:	3b15      	subs	r3, #21
 8010e4e:	f023 0303 	bic.w	r3, r3, #3
 8010e52:	3415      	adds	r4, #21
 8010e54:	3304      	adds	r3, #4
 8010e56:	42a6      	cmp	r6, r4
 8010e58:	bf38      	it	cc
 8010e5a:	2304      	movcc	r3, #4
 8010e5c:	441d      	add	r5, r3
 8010e5e:	445b      	add	r3, fp
 8010e60:	461e      	mov	r6, r3
 8010e62:	462c      	mov	r4, r5
 8010e64:	4544      	cmp	r4, r8
 8010e66:	d30e      	bcc.n	8010e86 <__mdiff+0xf6>
 8010e68:	f108 0103 	add.w	r1, r8, #3
 8010e6c:	1b49      	subs	r1, r1, r5
 8010e6e:	f021 0103 	bic.w	r1, r1, #3
 8010e72:	3d03      	subs	r5, #3
 8010e74:	45a8      	cmp	r8, r5
 8010e76:	bf38      	it	cc
 8010e78:	2100      	movcc	r1, #0
 8010e7a:	440b      	add	r3, r1
 8010e7c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010e80:	b199      	cbz	r1, 8010eaa <__mdiff+0x11a>
 8010e82:	6117      	str	r7, [r2, #16]
 8010e84:	e79e      	b.n	8010dc4 <__mdiff+0x34>
 8010e86:	46e6      	mov	lr, ip
 8010e88:	f854 1b04 	ldr.w	r1, [r4], #4
 8010e8c:	fa1f fc81 	uxth.w	ip, r1
 8010e90:	44f4      	add	ip, lr
 8010e92:	0c08      	lsrs	r0, r1, #16
 8010e94:	4471      	add	r1, lr
 8010e96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010e9a:	b289      	uxth	r1, r1
 8010e9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010ea0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010ea4:	f846 1b04 	str.w	r1, [r6], #4
 8010ea8:	e7dc      	b.n	8010e64 <__mdiff+0xd4>
 8010eaa:	3f01      	subs	r7, #1
 8010eac:	e7e6      	b.n	8010e7c <__mdiff+0xec>
 8010eae:	bf00      	nop
 8010eb0:	08013607 	.word	0x08013607
 8010eb4:	08013618 	.word	0x08013618

08010eb8 <__ulp>:
 8010eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8010ef4 <__ulp+0x3c>)
 8010eba:	400b      	ands	r3, r1
 8010ebc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	dc08      	bgt.n	8010ed6 <__ulp+0x1e>
 8010ec4:	425b      	negs	r3, r3
 8010ec6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010eca:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010ece:	da04      	bge.n	8010eda <__ulp+0x22>
 8010ed0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010ed4:	4113      	asrs	r3, r2
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	e008      	b.n	8010eec <__ulp+0x34>
 8010eda:	f1a2 0314 	sub.w	r3, r2, #20
 8010ede:	2b1e      	cmp	r3, #30
 8010ee0:	bfd6      	itet	le
 8010ee2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010ee6:	2201      	movgt	r2, #1
 8010ee8:	40da      	lsrle	r2, r3
 8010eea:	2300      	movs	r3, #0
 8010eec:	4619      	mov	r1, r3
 8010eee:	4610      	mov	r0, r2
 8010ef0:	4770      	bx	lr
 8010ef2:	bf00      	nop
 8010ef4:	7ff00000 	.word	0x7ff00000

08010ef8 <__b2d>:
 8010ef8:	6902      	ldr	r2, [r0, #16]
 8010efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010efc:	f100 0614 	add.w	r6, r0, #20
 8010f00:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8010f04:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8010f08:	4f1e      	ldr	r7, [pc, #120]	@ (8010f84 <__b2d+0x8c>)
 8010f0a:	4620      	mov	r0, r4
 8010f0c:	f7ff fd54 	bl	80109b8 <__hi0bits>
 8010f10:	4603      	mov	r3, r0
 8010f12:	f1c0 0020 	rsb	r0, r0, #32
 8010f16:	2b0a      	cmp	r3, #10
 8010f18:	f1a2 0504 	sub.w	r5, r2, #4
 8010f1c:	6008      	str	r0, [r1, #0]
 8010f1e:	dc12      	bgt.n	8010f46 <__b2d+0x4e>
 8010f20:	42ae      	cmp	r6, r5
 8010f22:	bf2c      	ite	cs
 8010f24:	2200      	movcs	r2, #0
 8010f26:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8010f2a:	f1c3 0c0b 	rsb	ip, r3, #11
 8010f2e:	3315      	adds	r3, #21
 8010f30:	fa24 fe0c 	lsr.w	lr, r4, ip
 8010f34:	fa04 f303 	lsl.w	r3, r4, r3
 8010f38:	fa22 f20c 	lsr.w	r2, r2, ip
 8010f3c:	ea4e 0107 	orr.w	r1, lr, r7
 8010f40:	431a      	orrs	r2, r3
 8010f42:	4610      	mov	r0, r2
 8010f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f46:	42ae      	cmp	r6, r5
 8010f48:	bf36      	itet	cc
 8010f4a:	f1a2 0508 	subcc.w	r5, r2, #8
 8010f4e:	2200      	movcs	r2, #0
 8010f50:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8010f54:	3b0b      	subs	r3, #11
 8010f56:	d012      	beq.n	8010f7e <__b2d+0x86>
 8010f58:	f1c3 0720 	rsb	r7, r3, #32
 8010f5c:	fa22 f107 	lsr.w	r1, r2, r7
 8010f60:	409c      	lsls	r4, r3
 8010f62:	430c      	orrs	r4, r1
 8010f64:	42b5      	cmp	r5, r6
 8010f66:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8010f6a:	bf94      	ite	ls
 8010f6c:	2400      	movls	r4, #0
 8010f6e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8010f72:	409a      	lsls	r2, r3
 8010f74:	40fc      	lsrs	r4, r7
 8010f76:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8010f7a:	4322      	orrs	r2, r4
 8010f7c:	e7e1      	b.n	8010f42 <__b2d+0x4a>
 8010f7e:	ea44 0107 	orr.w	r1, r4, r7
 8010f82:	e7de      	b.n	8010f42 <__b2d+0x4a>
 8010f84:	3ff00000 	.word	0x3ff00000

08010f88 <__d2b>:
 8010f88:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8010f8c:	2101      	movs	r1, #1
 8010f8e:	4690      	mov	r8, r2
 8010f90:	4699      	mov	r9, r3
 8010f92:	9e08      	ldr	r6, [sp, #32]
 8010f94:	f7ff fc1e 	bl	80107d4 <_Balloc>
 8010f98:	4604      	mov	r4, r0
 8010f9a:	b930      	cbnz	r0, 8010faa <__d2b+0x22>
 8010f9c:	4602      	mov	r2, r0
 8010f9e:	f240 310f 	movw	r1, #783	@ 0x30f
 8010fa2:	4b23      	ldr	r3, [pc, #140]	@ (8011030 <__d2b+0xa8>)
 8010fa4:	4823      	ldr	r0, [pc, #140]	@ (8011034 <__d2b+0xac>)
 8010fa6:	f001 fb73 	bl	8012690 <__assert_func>
 8010faa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010fae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010fb2:	b10d      	cbz	r5, 8010fb8 <__d2b+0x30>
 8010fb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010fb8:	9301      	str	r3, [sp, #4]
 8010fba:	f1b8 0300 	subs.w	r3, r8, #0
 8010fbe:	d024      	beq.n	801100a <__d2b+0x82>
 8010fc0:	4668      	mov	r0, sp
 8010fc2:	9300      	str	r3, [sp, #0]
 8010fc4:	f7ff fd17 	bl	80109f6 <__lo0bits>
 8010fc8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010fcc:	b1d8      	cbz	r0, 8011006 <__d2b+0x7e>
 8010fce:	f1c0 0320 	rsb	r3, r0, #32
 8010fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8010fd6:	430b      	orrs	r3, r1
 8010fd8:	40c2      	lsrs	r2, r0
 8010fda:	6163      	str	r3, [r4, #20]
 8010fdc:	9201      	str	r2, [sp, #4]
 8010fde:	9b01      	ldr	r3, [sp, #4]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	bf0c      	ite	eq
 8010fe4:	2201      	moveq	r2, #1
 8010fe6:	2202      	movne	r2, #2
 8010fe8:	61a3      	str	r3, [r4, #24]
 8010fea:	6122      	str	r2, [r4, #16]
 8010fec:	b1ad      	cbz	r5, 801101a <__d2b+0x92>
 8010fee:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010ff2:	4405      	add	r5, r0
 8010ff4:	6035      	str	r5, [r6, #0]
 8010ff6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010ffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ffc:	6018      	str	r0, [r3, #0]
 8010ffe:	4620      	mov	r0, r4
 8011000:	b002      	add	sp, #8
 8011002:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8011006:	6161      	str	r1, [r4, #20]
 8011008:	e7e9      	b.n	8010fde <__d2b+0x56>
 801100a:	a801      	add	r0, sp, #4
 801100c:	f7ff fcf3 	bl	80109f6 <__lo0bits>
 8011010:	9b01      	ldr	r3, [sp, #4]
 8011012:	2201      	movs	r2, #1
 8011014:	6163      	str	r3, [r4, #20]
 8011016:	3020      	adds	r0, #32
 8011018:	e7e7      	b.n	8010fea <__d2b+0x62>
 801101a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801101e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011022:	6030      	str	r0, [r6, #0]
 8011024:	6918      	ldr	r0, [r3, #16]
 8011026:	f7ff fcc7 	bl	80109b8 <__hi0bits>
 801102a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801102e:	e7e4      	b.n	8010ffa <__d2b+0x72>
 8011030:	08013607 	.word	0x08013607
 8011034:	08013618 	.word	0x08013618

08011038 <__ratio>:
 8011038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801103c:	b085      	sub	sp, #20
 801103e:	e9cd 1000 	strd	r1, r0, [sp]
 8011042:	a902      	add	r1, sp, #8
 8011044:	f7ff ff58 	bl	8010ef8 <__b2d>
 8011048:	468b      	mov	fp, r1
 801104a:	4606      	mov	r6, r0
 801104c:	460f      	mov	r7, r1
 801104e:	9800      	ldr	r0, [sp, #0]
 8011050:	a903      	add	r1, sp, #12
 8011052:	f7ff ff51 	bl	8010ef8 <__b2d>
 8011056:	460d      	mov	r5, r1
 8011058:	9b01      	ldr	r3, [sp, #4]
 801105a:	4689      	mov	r9, r1
 801105c:	6919      	ldr	r1, [r3, #16]
 801105e:	9b00      	ldr	r3, [sp, #0]
 8011060:	4604      	mov	r4, r0
 8011062:	691b      	ldr	r3, [r3, #16]
 8011064:	4630      	mov	r0, r6
 8011066:	1ac9      	subs	r1, r1, r3
 8011068:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801106c:	1a9b      	subs	r3, r3, r2
 801106e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011072:	2b00      	cmp	r3, #0
 8011074:	bfcd      	iteet	gt
 8011076:	463a      	movgt	r2, r7
 8011078:	462a      	movle	r2, r5
 801107a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801107e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8011082:	bfd8      	it	le
 8011084:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011088:	464b      	mov	r3, r9
 801108a:	4622      	mov	r2, r4
 801108c:	4659      	mov	r1, fp
 801108e:	f7ef fbb9 	bl	8000804 <__aeabi_ddiv>
 8011092:	b005      	add	sp, #20
 8011094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011098 <__copybits>:
 8011098:	3901      	subs	r1, #1
 801109a:	b570      	push	{r4, r5, r6, lr}
 801109c:	1149      	asrs	r1, r1, #5
 801109e:	6914      	ldr	r4, [r2, #16]
 80110a0:	3101      	adds	r1, #1
 80110a2:	f102 0314 	add.w	r3, r2, #20
 80110a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80110aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80110ae:	1f05      	subs	r5, r0, #4
 80110b0:	42a3      	cmp	r3, r4
 80110b2:	d30c      	bcc.n	80110ce <__copybits+0x36>
 80110b4:	1aa3      	subs	r3, r4, r2
 80110b6:	3b11      	subs	r3, #17
 80110b8:	f023 0303 	bic.w	r3, r3, #3
 80110bc:	3211      	adds	r2, #17
 80110be:	42a2      	cmp	r2, r4
 80110c0:	bf88      	it	hi
 80110c2:	2300      	movhi	r3, #0
 80110c4:	4418      	add	r0, r3
 80110c6:	2300      	movs	r3, #0
 80110c8:	4288      	cmp	r0, r1
 80110ca:	d305      	bcc.n	80110d8 <__copybits+0x40>
 80110cc:	bd70      	pop	{r4, r5, r6, pc}
 80110ce:	f853 6b04 	ldr.w	r6, [r3], #4
 80110d2:	f845 6f04 	str.w	r6, [r5, #4]!
 80110d6:	e7eb      	b.n	80110b0 <__copybits+0x18>
 80110d8:	f840 3b04 	str.w	r3, [r0], #4
 80110dc:	e7f4      	b.n	80110c8 <__copybits+0x30>

080110de <__any_on>:
 80110de:	f100 0214 	add.w	r2, r0, #20
 80110e2:	6900      	ldr	r0, [r0, #16]
 80110e4:	114b      	asrs	r3, r1, #5
 80110e6:	4298      	cmp	r0, r3
 80110e8:	b510      	push	{r4, lr}
 80110ea:	db11      	blt.n	8011110 <__any_on+0x32>
 80110ec:	dd0a      	ble.n	8011104 <__any_on+0x26>
 80110ee:	f011 011f 	ands.w	r1, r1, #31
 80110f2:	d007      	beq.n	8011104 <__any_on+0x26>
 80110f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80110f8:	fa24 f001 	lsr.w	r0, r4, r1
 80110fc:	fa00 f101 	lsl.w	r1, r0, r1
 8011100:	428c      	cmp	r4, r1
 8011102:	d10b      	bne.n	801111c <__any_on+0x3e>
 8011104:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011108:	4293      	cmp	r3, r2
 801110a:	d803      	bhi.n	8011114 <__any_on+0x36>
 801110c:	2000      	movs	r0, #0
 801110e:	bd10      	pop	{r4, pc}
 8011110:	4603      	mov	r3, r0
 8011112:	e7f7      	b.n	8011104 <__any_on+0x26>
 8011114:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011118:	2900      	cmp	r1, #0
 801111a:	d0f5      	beq.n	8011108 <__any_on+0x2a>
 801111c:	2001      	movs	r0, #1
 801111e:	e7f6      	b.n	801110e <__any_on+0x30>

08011120 <sulp>:
 8011120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011124:	460f      	mov	r7, r1
 8011126:	4690      	mov	r8, r2
 8011128:	f7ff fec6 	bl	8010eb8 <__ulp>
 801112c:	4604      	mov	r4, r0
 801112e:	460d      	mov	r5, r1
 8011130:	f1b8 0f00 	cmp.w	r8, #0
 8011134:	d011      	beq.n	801115a <sulp+0x3a>
 8011136:	f3c7 530a 	ubfx	r3, r7, #20, #11
 801113a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801113e:	2b00      	cmp	r3, #0
 8011140:	dd0b      	ble.n	801115a <sulp+0x3a>
 8011142:	2400      	movs	r4, #0
 8011144:	051b      	lsls	r3, r3, #20
 8011146:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801114a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801114e:	4622      	mov	r2, r4
 8011150:	462b      	mov	r3, r5
 8011152:	f7ef fa2d 	bl	80005b0 <__aeabi_dmul>
 8011156:	4604      	mov	r4, r0
 8011158:	460d      	mov	r5, r1
 801115a:	4620      	mov	r0, r4
 801115c:	4629      	mov	r1, r5
 801115e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011162:	0000      	movs	r0, r0
 8011164:	0000      	movs	r0, r0
	...

08011168 <_strtod_l>:
 8011168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801116c:	b09f      	sub	sp, #124	@ 0x7c
 801116e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8011170:	2200      	movs	r2, #0
 8011172:	460c      	mov	r4, r1
 8011174:	921a      	str	r2, [sp, #104]	@ 0x68
 8011176:	f04f 0a00 	mov.w	sl, #0
 801117a:	f04f 0b00 	mov.w	fp, #0
 801117e:	460a      	mov	r2, r1
 8011180:	9005      	str	r0, [sp, #20]
 8011182:	9219      	str	r2, [sp, #100]	@ 0x64
 8011184:	7811      	ldrb	r1, [r2, #0]
 8011186:	292b      	cmp	r1, #43	@ 0x2b
 8011188:	d048      	beq.n	801121c <_strtod_l+0xb4>
 801118a:	d836      	bhi.n	80111fa <_strtod_l+0x92>
 801118c:	290d      	cmp	r1, #13
 801118e:	d830      	bhi.n	80111f2 <_strtod_l+0x8a>
 8011190:	2908      	cmp	r1, #8
 8011192:	d830      	bhi.n	80111f6 <_strtod_l+0x8e>
 8011194:	2900      	cmp	r1, #0
 8011196:	d039      	beq.n	801120c <_strtod_l+0xa4>
 8011198:	2200      	movs	r2, #0
 801119a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801119c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801119e:	782a      	ldrb	r2, [r5, #0]
 80111a0:	2a30      	cmp	r2, #48	@ 0x30
 80111a2:	f040 80b1 	bne.w	8011308 <_strtod_l+0x1a0>
 80111a6:	786a      	ldrb	r2, [r5, #1]
 80111a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80111ac:	2a58      	cmp	r2, #88	@ 0x58
 80111ae:	d16c      	bne.n	801128a <_strtod_l+0x122>
 80111b0:	9302      	str	r3, [sp, #8]
 80111b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80111b4:	4a8e      	ldr	r2, [pc, #568]	@ (80113f0 <_strtod_l+0x288>)
 80111b6:	9301      	str	r3, [sp, #4]
 80111b8:	ab1a      	add	r3, sp, #104	@ 0x68
 80111ba:	9300      	str	r3, [sp, #0]
 80111bc:	9805      	ldr	r0, [sp, #20]
 80111be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80111c0:	a919      	add	r1, sp, #100	@ 0x64
 80111c2:	f001 faff 	bl	80127c4 <__gethex>
 80111c6:	f010 060f 	ands.w	r6, r0, #15
 80111ca:	4604      	mov	r4, r0
 80111cc:	d005      	beq.n	80111da <_strtod_l+0x72>
 80111ce:	2e06      	cmp	r6, #6
 80111d0:	d126      	bne.n	8011220 <_strtod_l+0xb8>
 80111d2:	2300      	movs	r3, #0
 80111d4:	3501      	adds	r5, #1
 80111d6:	9519      	str	r5, [sp, #100]	@ 0x64
 80111d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80111da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80111dc:	2b00      	cmp	r3, #0
 80111de:	f040 8584 	bne.w	8011cea <_strtod_l+0xb82>
 80111e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80111e4:	b1bb      	cbz	r3, 8011216 <_strtod_l+0xae>
 80111e6:	4650      	mov	r0, sl
 80111e8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80111ec:	b01f      	add	sp, #124	@ 0x7c
 80111ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111f2:	2920      	cmp	r1, #32
 80111f4:	d1d0      	bne.n	8011198 <_strtod_l+0x30>
 80111f6:	3201      	adds	r2, #1
 80111f8:	e7c3      	b.n	8011182 <_strtod_l+0x1a>
 80111fa:	292d      	cmp	r1, #45	@ 0x2d
 80111fc:	d1cc      	bne.n	8011198 <_strtod_l+0x30>
 80111fe:	2101      	movs	r1, #1
 8011200:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011202:	1c51      	adds	r1, r2, #1
 8011204:	9119      	str	r1, [sp, #100]	@ 0x64
 8011206:	7852      	ldrb	r2, [r2, #1]
 8011208:	2a00      	cmp	r2, #0
 801120a:	d1c7      	bne.n	801119c <_strtod_l+0x34>
 801120c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801120e:	9419      	str	r4, [sp, #100]	@ 0x64
 8011210:	2b00      	cmp	r3, #0
 8011212:	f040 8568 	bne.w	8011ce6 <_strtod_l+0xb7e>
 8011216:	4650      	mov	r0, sl
 8011218:	4659      	mov	r1, fp
 801121a:	e7e7      	b.n	80111ec <_strtod_l+0x84>
 801121c:	2100      	movs	r1, #0
 801121e:	e7ef      	b.n	8011200 <_strtod_l+0x98>
 8011220:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011222:	b13a      	cbz	r2, 8011234 <_strtod_l+0xcc>
 8011224:	2135      	movs	r1, #53	@ 0x35
 8011226:	a81c      	add	r0, sp, #112	@ 0x70
 8011228:	f7ff ff36 	bl	8011098 <__copybits>
 801122c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801122e:	9805      	ldr	r0, [sp, #20]
 8011230:	f7ff fb10 	bl	8010854 <_Bfree>
 8011234:	3e01      	subs	r6, #1
 8011236:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011238:	2e04      	cmp	r6, #4
 801123a:	d806      	bhi.n	801124a <_strtod_l+0xe2>
 801123c:	e8df f006 	tbb	[pc, r6]
 8011240:	201d0314 	.word	0x201d0314
 8011244:	14          	.byte	0x14
 8011245:	00          	.byte	0x00
 8011246:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801124a:	05e1      	lsls	r1, r4, #23
 801124c:	bf48      	it	mi
 801124e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8011252:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011256:	0d1b      	lsrs	r3, r3, #20
 8011258:	051b      	lsls	r3, r3, #20
 801125a:	2b00      	cmp	r3, #0
 801125c:	d1bd      	bne.n	80111da <_strtod_l+0x72>
 801125e:	f7fe fb1d 	bl	800f89c <__errno>
 8011262:	2322      	movs	r3, #34	@ 0x22
 8011264:	6003      	str	r3, [r0, #0]
 8011266:	e7b8      	b.n	80111da <_strtod_l+0x72>
 8011268:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801126c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011270:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011274:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011278:	e7e7      	b.n	801124a <_strtod_l+0xe2>
 801127a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80113f4 <_strtod_l+0x28c>
 801127e:	e7e4      	b.n	801124a <_strtod_l+0xe2>
 8011280:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011284:	f04f 3aff 	mov.w	sl, #4294967295
 8011288:	e7df      	b.n	801124a <_strtod_l+0xe2>
 801128a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801128c:	1c5a      	adds	r2, r3, #1
 801128e:	9219      	str	r2, [sp, #100]	@ 0x64
 8011290:	785b      	ldrb	r3, [r3, #1]
 8011292:	2b30      	cmp	r3, #48	@ 0x30
 8011294:	d0f9      	beq.n	801128a <_strtod_l+0x122>
 8011296:	2b00      	cmp	r3, #0
 8011298:	d09f      	beq.n	80111da <_strtod_l+0x72>
 801129a:	2301      	movs	r3, #1
 801129c:	9309      	str	r3, [sp, #36]	@ 0x24
 801129e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80112a0:	220a      	movs	r2, #10
 80112a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80112a4:	2300      	movs	r3, #0
 80112a6:	461f      	mov	r7, r3
 80112a8:	9308      	str	r3, [sp, #32]
 80112aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80112ac:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80112ae:	7805      	ldrb	r5, [r0, #0]
 80112b0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80112b4:	b2d9      	uxtb	r1, r3
 80112b6:	2909      	cmp	r1, #9
 80112b8:	d928      	bls.n	801130c <_strtod_l+0x1a4>
 80112ba:	2201      	movs	r2, #1
 80112bc:	494e      	ldr	r1, [pc, #312]	@ (80113f8 <_strtod_l+0x290>)
 80112be:	f001 f99c 	bl	80125fa <strncmp>
 80112c2:	2800      	cmp	r0, #0
 80112c4:	d032      	beq.n	801132c <_strtod_l+0x1c4>
 80112c6:	2000      	movs	r0, #0
 80112c8:	462a      	mov	r2, r5
 80112ca:	4681      	mov	r9, r0
 80112cc:	463d      	mov	r5, r7
 80112ce:	4603      	mov	r3, r0
 80112d0:	2a65      	cmp	r2, #101	@ 0x65
 80112d2:	d001      	beq.n	80112d8 <_strtod_l+0x170>
 80112d4:	2a45      	cmp	r2, #69	@ 0x45
 80112d6:	d114      	bne.n	8011302 <_strtod_l+0x19a>
 80112d8:	b91d      	cbnz	r5, 80112e2 <_strtod_l+0x17a>
 80112da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80112dc:	4302      	orrs	r2, r0
 80112de:	d095      	beq.n	801120c <_strtod_l+0xa4>
 80112e0:	2500      	movs	r5, #0
 80112e2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80112e4:	1c62      	adds	r2, r4, #1
 80112e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80112e8:	7862      	ldrb	r2, [r4, #1]
 80112ea:	2a2b      	cmp	r2, #43	@ 0x2b
 80112ec:	d077      	beq.n	80113de <_strtod_l+0x276>
 80112ee:	2a2d      	cmp	r2, #45	@ 0x2d
 80112f0:	d07b      	beq.n	80113ea <_strtod_l+0x282>
 80112f2:	f04f 0c00 	mov.w	ip, #0
 80112f6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80112fa:	2909      	cmp	r1, #9
 80112fc:	f240 8082 	bls.w	8011404 <_strtod_l+0x29c>
 8011300:	9419      	str	r4, [sp, #100]	@ 0x64
 8011302:	f04f 0800 	mov.w	r8, #0
 8011306:	e0a2      	b.n	801144e <_strtod_l+0x2e6>
 8011308:	2300      	movs	r3, #0
 801130a:	e7c7      	b.n	801129c <_strtod_l+0x134>
 801130c:	2f08      	cmp	r7, #8
 801130e:	bfd5      	itete	le
 8011310:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8011312:	9908      	ldrgt	r1, [sp, #32]
 8011314:	fb02 3301 	mlale	r3, r2, r1, r3
 8011318:	fb02 3301 	mlagt	r3, r2, r1, r3
 801131c:	f100 0001 	add.w	r0, r0, #1
 8011320:	bfd4      	ite	le
 8011322:	930a      	strle	r3, [sp, #40]	@ 0x28
 8011324:	9308      	strgt	r3, [sp, #32]
 8011326:	3701      	adds	r7, #1
 8011328:	9019      	str	r0, [sp, #100]	@ 0x64
 801132a:	e7bf      	b.n	80112ac <_strtod_l+0x144>
 801132c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801132e:	1c5a      	adds	r2, r3, #1
 8011330:	9219      	str	r2, [sp, #100]	@ 0x64
 8011332:	785a      	ldrb	r2, [r3, #1]
 8011334:	b37f      	cbz	r7, 8011396 <_strtod_l+0x22e>
 8011336:	4681      	mov	r9, r0
 8011338:	463d      	mov	r5, r7
 801133a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801133e:	2b09      	cmp	r3, #9
 8011340:	d912      	bls.n	8011368 <_strtod_l+0x200>
 8011342:	2301      	movs	r3, #1
 8011344:	e7c4      	b.n	80112d0 <_strtod_l+0x168>
 8011346:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011348:	3001      	adds	r0, #1
 801134a:	1c5a      	adds	r2, r3, #1
 801134c:	9219      	str	r2, [sp, #100]	@ 0x64
 801134e:	785a      	ldrb	r2, [r3, #1]
 8011350:	2a30      	cmp	r2, #48	@ 0x30
 8011352:	d0f8      	beq.n	8011346 <_strtod_l+0x1de>
 8011354:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8011358:	2b08      	cmp	r3, #8
 801135a:	f200 84cb 	bhi.w	8011cf4 <_strtod_l+0xb8c>
 801135e:	4681      	mov	r9, r0
 8011360:	2000      	movs	r0, #0
 8011362:	4605      	mov	r5, r0
 8011364:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011366:	930c      	str	r3, [sp, #48]	@ 0x30
 8011368:	3a30      	subs	r2, #48	@ 0x30
 801136a:	f100 0301 	add.w	r3, r0, #1
 801136e:	d02a      	beq.n	80113c6 <_strtod_l+0x25e>
 8011370:	4499      	add	r9, r3
 8011372:	210a      	movs	r1, #10
 8011374:	462b      	mov	r3, r5
 8011376:	eb00 0c05 	add.w	ip, r0, r5
 801137a:	4563      	cmp	r3, ip
 801137c:	d10d      	bne.n	801139a <_strtod_l+0x232>
 801137e:	1c69      	adds	r1, r5, #1
 8011380:	4401      	add	r1, r0
 8011382:	4428      	add	r0, r5
 8011384:	2808      	cmp	r0, #8
 8011386:	dc16      	bgt.n	80113b6 <_strtod_l+0x24e>
 8011388:	230a      	movs	r3, #10
 801138a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801138c:	fb03 2300 	mla	r3, r3, r0, r2
 8011390:	930a      	str	r3, [sp, #40]	@ 0x28
 8011392:	2300      	movs	r3, #0
 8011394:	e018      	b.n	80113c8 <_strtod_l+0x260>
 8011396:	4638      	mov	r0, r7
 8011398:	e7da      	b.n	8011350 <_strtod_l+0x1e8>
 801139a:	2b08      	cmp	r3, #8
 801139c:	f103 0301 	add.w	r3, r3, #1
 80113a0:	dc03      	bgt.n	80113aa <_strtod_l+0x242>
 80113a2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80113a4:	434e      	muls	r6, r1
 80113a6:	960a      	str	r6, [sp, #40]	@ 0x28
 80113a8:	e7e7      	b.n	801137a <_strtod_l+0x212>
 80113aa:	2b10      	cmp	r3, #16
 80113ac:	bfde      	ittt	le
 80113ae:	9e08      	ldrle	r6, [sp, #32]
 80113b0:	434e      	mulle	r6, r1
 80113b2:	9608      	strle	r6, [sp, #32]
 80113b4:	e7e1      	b.n	801137a <_strtod_l+0x212>
 80113b6:	280f      	cmp	r0, #15
 80113b8:	dceb      	bgt.n	8011392 <_strtod_l+0x22a>
 80113ba:	230a      	movs	r3, #10
 80113bc:	9808      	ldr	r0, [sp, #32]
 80113be:	fb03 2300 	mla	r3, r3, r0, r2
 80113c2:	9308      	str	r3, [sp, #32]
 80113c4:	e7e5      	b.n	8011392 <_strtod_l+0x22a>
 80113c6:	4629      	mov	r1, r5
 80113c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80113ca:	460d      	mov	r5, r1
 80113cc:	1c50      	adds	r0, r2, #1
 80113ce:	9019      	str	r0, [sp, #100]	@ 0x64
 80113d0:	7852      	ldrb	r2, [r2, #1]
 80113d2:	4618      	mov	r0, r3
 80113d4:	e7b1      	b.n	801133a <_strtod_l+0x1d2>
 80113d6:	f04f 0900 	mov.w	r9, #0
 80113da:	2301      	movs	r3, #1
 80113dc:	e77d      	b.n	80112da <_strtod_l+0x172>
 80113de:	f04f 0c00 	mov.w	ip, #0
 80113e2:	1ca2      	adds	r2, r4, #2
 80113e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80113e6:	78a2      	ldrb	r2, [r4, #2]
 80113e8:	e785      	b.n	80112f6 <_strtod_l+0x18e>
 80113ea:	f04f 0c01 	mov.w	ip, #1
 80113ee:	e7f8      	b.n	80113e2 <_strtod_l+0x27a>
 80113f0:	08013788 	.word	0x08013788
 80113f4:	7ff00000 	.word	0x7ff00000
 80113f8:	08013770 	.word	0x08013770
 80113fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80113fe:	1c51      	adds	r1, r2, #1
 8011400:	9119      	str	r1, [sp, #100]	@ 0x64
 8011402:	7852      	ldrb	r2, [r2, #1]
 8011404:	2a30      	cmp	r2, #48	@ 0x30
 8011406:	d0f9      	beq.n	80113fc <_strtod_l+0x294>
 8011408:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801140c:	2908      	cmp	r1, #8
 801140e:	f63f af78 	bhi.w	8011302 <_strtod_l+0x19a>
 8011412:	f04f 080a 	mov.w	r8, #10
 8011416:	3a30      	subs	r2, #48	@ 0x30
 8011418:	920e      	str	r2, [sp, #56]	@ 0x38
 801141a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801141c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801141e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011420:	1c56      	adds	r6, r2, #1
 8011422:	9619      	str	r6, [sp, #100]	@ 0x64
 8011424:	7852      	ldrb	r2, [r2, #1]
 8011426:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801142a:	f1be 0f09 	cmp.w	lr, #9
 801142e:	d939      	bls.n	80114a4 <_strtod_l+0x33c>
 8011430:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011432:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8011436:	1a76      	subs	r6, r6, r1
 8011438:	2e08      	cmp	r6, #8
 801143a:	dc03      	bgt.n	8011444 <_strtod_l+0x2dc>
 801143c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801143e:	4588      	cmp	r8, r1
 8011440:	bfa8      	it	ge
 8011442:	4688      	movge	r8, r1
 8011444:	f1bc 0f00 	cmp.w	ip, #0
 8011448:	d001      	beq.n	801144e <_strtod_l+0x2e6>
 801144a:	f1c8 0800 	rsb	r8, r8, #0
 801144e:	2d00      	cmp	r5, #0
 8011450:	d14e      	bne.n	80114f0 <_strtod_l+0x388>
 8011452:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011454:	4308      	orrs	r0, r1
 8011456:	f47f aec0 	bne.w	80111da <_strtod_l+0x72>
 801145a:	2b00      	cmp	r3, #0
 801145c:	f47f aed6 	bne.w	801120c <_strtod_l+0xa4>
 8011460:	2a69      	cmp	r2, #105	@ 0x69
 8011462:	d028      	beq.n	80114b6 <_strtod_l+0x34e>
 8011464:	dc25      	bgt.n	80114b2 <_strtod_l+0x34a>
 8011466:	2a49      	cmp	r2, #73	@ 0x49
 8011468:	d025      	beq.n	80114b6 <_strtod_l+0x34e>
 801146a:	2a4e      	cmp	r2, #78	@ 0x4e
 801146c:	f47f aece 	bne.w	801120c <_strtod_l+0xa4>
 8011470:	499a      	ldr	r1, [pc, #616]	@ (80116dc <_strtod_l+0x574>)
 8011472:	a819      	add	r0, sp, #100	@ 0x64
 8011474:	f001 fbc8 	bl	8012c08 <__match>
 8011478:	2800      	cmp	r0, #0
 801147a:	f43f aec7 	beq.w	801120c <_strtod_l+0xa4>
 801147e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011480:	781b      	ldrb	r3, [r3, #0]
 8011482:	2b28      	cmp	r3, #40	@ 0x28
 8011484:	d12e      	bne.n	80114e4 <_strtod_l+0x37c>
 8011486:	4996      	ldr	r1, [pc, #600]	@ (80116e0 <_strtod_l+0x578>)
 8011488:	aa1c      	add	r2, sp, #112	@ 0x70
 801148a:	a819      	add	r0, sp, #100	@ 0x64
 801148c:	f001 fbd0 	bl	8012c30 <__hexnan>
 8011490:	2805      	cmp	r0, #5
 8011492:	d127      	bne.n	80114e4 <_strtod_l+0x37c>
 8011494:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011496:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801149a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801149e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80114a2:	e69a      	b.n	80111da <_strtod_l+0x72>
 80114a4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80114a6:	fb08 2101 	mla	r1, r8, r1, r2
 80114aa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80114ae:	920e      	str	r2, [sp, #56]	@ 0x38
 80114b0:	e7b5      	b.n	801141e <_strtod_l+0x2b6>
 80114b2:	2a6e      	cmp	r2, #110	@ 0x6e
 80114b4:	e7da      	b.n	801146c <_strtod_l+0x304>
 80114b6:	498b      	ldr	r1, [pc, #556]	@ (80116e4 <_strtod_l+0x57c>)
 80114b8:	a819      	add	r0, sp, #100	@ 0x64
 80114ba:	f001 fba5 	bl	8012c08 <__match>
 80114be:	2800      	cmp	r0, #0
 80114c0:	f43f aea4 	beq.w	801120c <_strtod_l+0xa4>
 80114c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80114c6:	4988      	ldr	r1, [pc, #544]	@ (80116e8 <_strtod_l+0x580>)
 80114c8:	3b01      	subs	r3, #1
 80114ca:	a819      	add	r0, sp, #100	@ 0x64
 80114cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80114ce:	f001 fb9b 	bl	8012c08 <__match>
 80114d2:	b910      	cbnz	r0, 80114da <_strtod_l+0x372>
 80114d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80114d6:	3301      	adds	r3, #1
 80114d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80114da:	f04f 0a00 	mov.w	sl, #0
 80114de:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80116ec <_strtod_l+0x584>
 80114e2:	e67a      	b.n	80111da <_strtod_l+0x72>
 80114e4:	4882      	ldr	r0, [pc, #520]	@ (80116f0 <_strtod_l+0x588>)
 80114e6:	f001 f8cd 	bl	8012684 <nan>
 80114ea:	4682      	mov	sl, r0
 80114ec:	468b      	mov	fp, r1
 80114ee:	e674      	b.n	80111da <_strtod_l+0x72>
 80114f0:	eba8 0309 	sub.w	r3, r8, r9
 80114f4:	2f00      	cmp	r7, #0
 80114f6:	bf08      	it	eq
 80114f8:	462f      	moveq	r7, r5
 80114fa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80114fc:	2d10      	cmp	r5, #16
 80114fe:	462c      	mov	r4, r5
 8011500:	9309      	str	r3, [sp, #36]	@ 0x24
 8011502:	bfa8      	it	ge
 8011504:	2410      	movge	r4, #16
 8011506:	f7ee ffd9 	bl	80004bc <__aeabi_ui2d>
 801150a:	2d09      	cmp	r5, #9
 801150c:	4682      	mov	sl, r0
 801150e:	468b      	mov	fp, r1
 8011510:	dc11      	bgt.n	8011536 <_strtod_l+0x3ce>
 8011512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011514:	2b00      	cmp	r3, #0
 8011516:	f43f ae60 	beq.w	80111da <_strtod_l+0x72>
 801151a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801151c:	dd76      	ble.n	801160c <_strtod_l+0x4a4>
 801151e:	2b16      	cmp	r3, #22
 8011520:	dc5d      	bgt.n	80115de <_strtod_l+0x476>
 8011522:	4974      	ldr	r1, [pc, #464]	@ (80116f4 <_strtod_l+0x58c>)
 8011524:	4652      	mov	r2, sl
 8011526:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801152a:	465b      	mov	r3, fp
 801152c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011530:	f7ef f83e 	bl	80005b0 <__aeabi_dmul>
 8011534:	e7d9      	b.n	80114ea <_strtod_l+0x382>
 8011536:	4b6f      	ldr	r3, [pc, #444]	@ (80116f4 <_strtod_l+0x58c>)
 8011538:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801153c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011540:	f7ef f836 	bl	80005b0 <__aeabi_dmul>
 8011544:	4682      	mov	sl, r0
 8011546:	9808      	ldr	r0, [sp, #32]
 8011548:	468b      	mov	fp, r1
 801154a:	f7ee ffb7 	bl	80004bc <__aeabi_ui2d>
 801154e:	4602      	mov	r2, r0
 8011550:	460b      	mov	r3, r1
 8011552:	4650      	mov	r0, sl
 8011554:	4659      	mov	r1, fp
 8011556:	f7ee fe75 	bl	8000244 <__adddf3>
 801155a:	2d0f      	cmp	r5, #15
 801155c:	4682      	mov	sl, r0
 801155e:	468b      	mov	fp, r1
 8011560:	ddd7      	ble.n	8011512 <_strtod_l+0x3aa>
 8011562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011564:	1b2c      	subs	r4, r5, r4
 8011566:	441c      	add	r4, r3
 8011568:	2c00      	cmp	r4, #0
 801156a:	f340 8096 	ble.w	801169a <_strtod_l+0x532>
 801156e:	f014 030f 	ands.w	r3, r4, #15
 8011572:	d00a      	beq.n	801158a <_strtod_l+0x422>
 8011574:	495f      	ldr	r1, [pc, #380]	@ (80116f4 <_strtod_l+0x58c>)
 8011576:	4652      	mov	r2, sl
 8011578:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801157c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011580:	465b      	mov	r3, fp
 8011582:	f7ef f815 	bl	80005b0 <__aeabi_dmul>
 8011586:	4682      	mov	sl, r0
 8011588:	468b      	mov	fp, r1
 801158a:	f034 040f 	bics.w	r4, r4, #15
 801158e:	d073      	beq.n	8011678 <_strtod_l+0x510>
 8011590:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011594:	dd48      	ble.n	8011628 <_strtod_l+0x4c0>
 8011596:	2400      	movs	r4, #0
 8011598:	46a0      	mov	r8, r4
 801159a:	46a1      	mov	r9, r4
 801159c:	940a      	str	r4, [sp, #40]	@ 0x28
 801159e:	2322      	movs	r3, #34	@ 0x22
 80115a0:	f04f 0a00 	mov.w	sl, #0
 80115a4:	9a05      	ldr	r2, [sp, #20]
 80115a6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80116ec <_strtod_l+0x584>
 80115aa:	6013      	str	r3, [r2, #0]
 80115ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	f43f ae13 	beq.w	80111da <_strtod_l+0x72>
 80115b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80115b6:	9805      	ldr	r0, [sp, #20]
 80115b8:	f7ff f94c 	bl	8010854 <_Bfree>
 80115bc:	4649      	mov	r1, r9
 80115be:	9805      	ldr	r0, [sp, #20]
 80115c0:	f7ff f948 	bl	8010854 <_Bfree>
 80115c4:	4641      	mov	r1, r8
 80115c6:	9805      	ldr	r0, [sp, #20]
 80115c8:	f7ff f944 	bl	8010854 <_Bfree>
 80115cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80115ce:	9805      	ldr	r0, [sp, #20]
 80115d0:	f7ff f940 	bl	8010854 <_Bfree>
 80115d4:	4621      	mov	r1, r4
 80115d6:	9805      	ldr	r0, [sp, #20]
 80115d8:	f7ff f93c 	bl	8010854 <_Bfree>
 80115dc:	e5fd      	b.n	80111da <_strtod_l+0x72>
 80115de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80115e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80115e4:	4293      	cmp	r3, r2
 80115e6:	dbbc      	blt.n	8011562 <_strtod_l+0x3fa>
 80115e8:	4c42      	ldr	r4, [pc, #264]	@ (80116f4 <_strtod_l+0x58c>)
 80115ea:	f1c5 050f 	rsb	r5, r5, #15
 80115ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80115f2:	4652      	mov	r2, sl
 80115f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80115f8:	465b      	mov	r3, fp
 80115fa:	f7ee ffd9 	bl	80005b0 <__aeabi_dmul>
 80115fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011600:	1b5d      	subs	r5, r3, r5
 8011602:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011606:	e9d4 2300 	ldrd	r2, r3, [r4]
 801160a:	e791      	b.n	8011530 <_strtod_l+0x3c8>
 801160c:	3316      	adds	r3, #22
 801160e:	dba8      	blt.n	8011562 <_strtod_l+0x3fa>
 8011610:	4b38      	ldr	r3, [pc, #224]	@ (80116f4 <_strtod_l+0x58c>)
 8011612:	eba9 0808 	sub.w	r8, r9, r8
 8011616:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801161a:	4650      	mov	r0, sl
 801161c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011620:	4659      	mov	r1, fp
 8011622:	f7ef f8ef 	bl	8000804 <__aeabi_ddiv>
 8011626:	e760      	b.n	80114ea <_strtod_l+0x382>
 8011628:	4b33      	ldr	r3, [pc, #204]	@ (80116f8 <_strtod_l+0x590>)
 801162a:	4650      	mov	r0, sl
 801162c:	9308      	str	r3, [sp, #32]
 801162e:	2300      	movs	r3, #0
 8011630:	4659      	mov	r1, fp
 8011632:	461e      	mov	r6, r3
 8011634:	1124      	asrs	r4, r4, #4
 8011636:	2c01      	cmp	r4, #1
 8011638:	dc21      	bgt.n	801167e <_strtod_l+0x516>
 801163a:	b10b      	cbz	r3, 8011640 <_strtod_l+0x4d8>
 801163c:	4682      	mov	sl, r0
 801163e:	468b      	mov	fp, r1
 8011640:	492d      	ldr	r1, [pc, #180]	@ (80116f8 <_strtod_l+0x590>)
 8011642:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011646:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801164a:	4652      	mov	r2, sl
 801164c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011650:	465b      	mov	r3, fp
 8011652:	f7ee ffad 	bl	80005b0 <__aeabi_dmul>
 8011656:	4b25      	ldr	r3, [pc, #148]	@ (80116ec <_strtod_l+0x584>)
 8011658:	460a      	mov	r2, r1
 801165a:	400b      	ands	r3, r1
 801165c:	4927      	ldr	r1, [pc, #156]	@ (80116fc <_strtod_l+0x594>)
 801165e:	4682      	mov	sl, r0
 8011660:	428b      	cmp	r3, r1
 8011662:	d898      	bhi.n	8011596 <_strtod_l+0x42e>
 8011664:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011668:	428b      	cmp	r3, r1
 801166a:	bf86      	itte	hi
 801166c:	f04f 3aff 	movhi.w	sl, #4294967295
 8011670:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8011700 <_strtod_l+0x598>
 8011674:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011678:	2300      	movs	r3, #0
 801167a:	9308      	str	r3, [sp, #32]
 801167c:	e07a      	b.n	8011774 <_strtod_l+0x60c>
 801167e:	07e2      	lsls	r2, r4, #31
 8011680:	d505      	bpl.n	801168e <_strtod_l+0x526>
 8011682:	9b08      	ldr	r3, [sp, #32]
 8011684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011688:	f7ee ff92 	bl	80005b0 <__aeabi_dmul>
 801168c:	2301      	movs	r3, #1
 801168e:	9a08      	ldr	r2, [sp, #32]
 8011690:	3601      	adds	r6, #1
 8011692:	3208      	adds	r2, #8
 8011694:	1064      	asrs	r4, r4, #1
 8011696:	9208      	str	r2, [sp, #32]
 8011698:	e7cd      	b.n	8011636 <_strtod_l+0x4ce>
 801169a:	d0ed      	beq.n	8011678 <_strtod_l+0x510>
 801169c:	4264      	negs	r4, r4
 801169e:	f014 020f 	ands.w	r2, r4, #15
 80116a2:	d00a      	beq.n	80116ba <_strtod_l+0x552>
 80116a4:	4b13      	ldr	r3, [pc, #76]	@ (80116f4 <_strtod_l+0x58c>)
 80116a6:	4650      	mov	r0, sl
 80116a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116ac:	4659      	mov	r1, fp
 80116ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b2:	f7ef f8a7 	bl	8000804 <__aeabi_ddiv>
 80116b6:	4682      	mov	sl, r0
 80116b8:	468b      	mov	fp, r1
 80116ba:	1124      	asrs	r4, r4, #4
 80116bc:	d0dc      	beq.n	8011678 <_strtod_l+0x510>
 80116be:	2c1f      	cmp	r4, #31
 80116c0:	dd20      	ble.n	8011704 <_strtod_l+0x59c>
 80116c2:	2400      	movs	r4, #0
 80116c4:	46a0      	mov	r8, r4
 80116c6:	46a1      	mov	r9, r4
 80116c8:	940a      	str	r4, [sp, #40]	@ 0x28
 80116ca:	2322      	movs	r3, #34	@ 0x22
 80116cc:	9a05      	ldr	r2, [sp, #20]
 80116ce:	f04f 0a00 	mov.w	sl, #0
 80116d2:	f04f 0b00 	mov.w	fp, #0
 80116d6:	6013      	str	r3, [r2, #0]
 80116d8:	e768      	b.n	80115ac <_strtod_l+0x444>
 80116da:	bf00      	nop
 80116dc:	0801355f 	.word	0x0801355f
 80116e0:	08013774 	.word	0x08013774
 80116e4:	08013557 	.word	0x08013557
 80116e8:	0801358e 	.word	0x0801358e
 80116ec:	7ff00000 	.word	0x7ff00000
 80116f0:	0801391d 	.word	0x0801391d
 80116f4:	080136a8 	.word	0x080136a8
 80116f8:	08013680 	.word	0x08013680
 80116fc:	7ca00000 	.word	0x7ca00000
 8011700:	7fefffff 	.word	0x7fefffff
 8011704:	f014 0310 	ands.w	r3, r4, #16
 8011708:	bf18      	it	ne
 801170a:	236a      	movne	r3, #106	@ 0x6a
 801170c:	4650      	mov	r0, sl
 801170e:	9308      	str	r3, [sp, #32]
 8011710:	4659      	mov	r1, fp
 8011712:	2300      	movs	r3, #0
 8011714:	4ea9      	ldr	r6, [pc, #676]	@ (80119bc <_strtod_l+0x854>)
 8011716:	07e2      	lsls	r2, r4, #31
 8011718:	d504      	bpl.n	8011724 <_strtod_l+0x5bc>
 801171a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801171e:	f7ee ff47 	bl	80005b0 <__aeabi_dmul>
 8011722:	2301      	movs	r3, #1
 8011724:	1064      	asrs	r4, r4, #1
 8011726:	f106 0608 	add.w	r6, r6, #8
 801172a:	d1f4      	bne.n	8011716 <_strtod_l+0x5ae>
 801172c:	b10b      	cbz	r3, 8011732 <_strtod_l+0x5ca>
 801172e:	4682      	mov	sl, r0
 8011730:	468b      	mov	fp, r1
 8011732:	9b08      	ldr	r3, [sp, #32]
 8011734:	b1b3      	cbz	r3, 8011764 <_strtod_l+0x5fc>
 8011736:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801173a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801173e:	2b00      	cmp	r3, #0
 8011740:	4659      	mov	r1, fp
 8011742:	dd0f      	ble.n	8011764 <_strtod_l+0x5fc>
 8011744:	2b1f      	cmp	r3, #31
 8011746:	dd57      	ble.n	80117f8 <_strtod_l+0x690>
 8011748:	2b34      	cmp	r3, #52	@ 0x34
 801174a:	bfd8      	it	le
 801174c:	f04f 33ff 	movle.w	r3, #4294967295
 8011750:	f04f 0a00 	mov.w	sl, #0
 8011754:	bfcf      	iteee	gt
 8011756:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801175a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801175e:	4093      	lslle	r3, r2
 8011760:	ea03 0b01 	andle.w	fp, r3, r1
 8011764:	2200      	movs	r2, #0
 8011766:	2300      	movs	r3, #0
 8011768:	4650      	mov	r0, sl
 801176a:	4659      	mov	r1, fp
 801176c:	f7ef f988 	bl	8000a80 <__aeabi_dcmpeq>
 8011770:	2800      	cmp	r0, #0
 8011772:	d1a6      	bne.n	80116c2 <_strtod_l+0x55a>
 8011774:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011776:	463a      	mov	r2, r7
 8011778:	9300      	str	r3, [sp, #0]
 801177a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801177c:	462b      	mov	r3, r5
 801177e:	9805      	ldr	r0, [sp, #20]
 8011780:	f7ff f8d0 	bl	8010924 <__s2b>
 8011784:	900a      	str	r0, [sp, #40]	@ 0x28
 8011786:	2800      	cmp	r0, #0
 8011788:	f43f af05 	beq.w	8011596 <_strtod_l+0x42e>
 801178c:	2400      	movs	r4, #0
 801178e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011790:	eba9 0308 	sub.w	r3, r9, r8
 8011794:	2a00      	cmp	r2, #0
 8011796:	bfa8      	it	ge
 8011798:	2300      	movge	r3, #0
 801179a:	46a0      	mov	r8, r4
 801179c:	9312      	str	r3, [sp, #72]	@ 0x48
 801179e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80117a2:	9316      	str	r3, [sp, #88]	@ 0x58
 80117a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80117a6:	9805      	ldr	r0, [sp, #20]
 80117a8:	6859      	ldr	r1, [r3, #4]
 80117aa:	f7ff f813 	bl	80107d4 <_Balloc>
 80117ae:	4681      	mov	r9, r0
 80117b0:	2800      	cmp	r0, #0
 80117b2:	f43f aef4 	beq.w	801159e <_strtod_l+0x436>
 80117b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80117b8:	300c      	adds	r0, #12
 80117ba:	691a      	ldr	r2, [r3, #16]
 80117bc:	f103 010c 	add.w	r1, r3, #12
 80117c0:	3202      	adds	r2, #2
 80117c2:	0092      	lsls	r2, r2, #2
 80117c4:	f7fe f8a5 	bl	800f912 <memcpy>
 80117c8:	ab1c      	add	r3, sp, #112	@ 0x70
 80117ca:	9301      	str	r3, [sp, #4]
 80117cc:	ab1b      	add	r3, sp, #108	@ 0x6c
 80117ce:	9300      	str	r3, [sp, #0]
 80117d0:	4652      	mov	r2, sl
 80117d2:	465b      	mov	r3, fp
 80117d4:	9805      	ldr	r0, [sp, #20]
 80117d6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80117da:	f7ff fbd5 	bl	8010f88 <__d2b>
 80117de:	901a      	str	r0, [sp, #104]	@ 0x68
 80117e0:	2800      	cmp	r0, #0
 80117e2:	f43f aedc 	beq.w	801159e <_strtod_l+0x436>
 80117e6:	2101      	movs	r1, #1
 80117e8:	9805      	ldr	r0, [sp, #20]
 80117ea:	f7ff f931 	bl	8010a50 <__i2b>
 80117ee:	4680      	mov	r8, r0
 80117f0:	b948      	cbnz	r0, 8011806 <_strtod_l+0x69e>
 80117f2:	f04f 0800 	mov.w	r8, #0
 80117f6:	e6d2      	b.n	801159e <_strtod_l+0x436>
 80117f8:	f04f 32ff 	mov.w	r2, #4294967295
 80117fc:	fa02 f303 	lsl.w	r3, r2, r3
 8011800:	ea03 0a0a 	and.w	sl, r3, sl
 8011804:	e7ae      	b.n	8011764 <_strtod_l+0x5fc>
 8011806:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011808:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801180a:	2d00      	cmp	r5, #0
 801180c:	bfab      	itete	ge
 801180e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011810:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011812:	18ef      	addge	r7, r5, r3
 8011814:	1b5e      	sublt	r6, r3, r5
 8011816:	9b08      	ldr	r3, [sp, #32]
 8011818:	bfa8      	it	ge
 801181a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801181c:	eba5 0503 	sub.w	r5, r5, r3
 8011820:	4415      	add	r5, r2
 8011822:	4b67      	ldr	r3, [pc, #412]	@ (80119c0 <_strtod_l+0x858>)
 8011824:	f105 35ff 	add.w	r5, r5, #4294967295
 8011828:	bfb8      	it	lt
 801182a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801182c:	429d      	cmp	r5, r3
 801182e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011832:	da50      	bge.n	80118d6 <_strtod_l+0x76e>
 8011834:	1b5b      	subs	r3, r3, r5
 8011836:	2b1f      	cmp	r3, #31
 8011838:	f04f 0101 	mov.w	r1, #1
 801183c:	eba2 0203 	sub.w	r2, r2, r3
 8011840:	dc3d      	bgt.n	80118be <_strtod_l+0x756>
 8011842:	fa01 f303 	lsl.w	r3, r1, r3
 8011846:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011848:	2300      	movs	r3, #0
 801184a:	9310      	str	r3, [sp, #64]	@ 0x40
 801184c:	18bd      	adds	r5, r7, r2
 801184e:	9b08      	ldr	r3, [sp, #32]
 8011850:	42af      	cmp	r7, r5
 8011852:	4416      	add	r6, r2
 8011854:	441e      	add	r6, r3
 8011856:	463b      	mov	r3, r7
 8011858:	bfa8      	it	ge
 801185a:	462b      	movge	r3, r5
 801185c:	42b3      	cmp	r3, r6
 801185e:	bfa8      	it	ge
 8011860:	4633      	movge	r3, r6
 8011862:	2b00      	cmp	r3, #0
 8011864:	bfc2      	ittt	gt
 8011866:	1aed      	subgt	r5, r5, r3
 8011868:	1af6      	subgt	r6, r6, r3
 801186a:	1aff      	subgt	r7, r7, r3
 801186c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801186e:	2b00      	cmp	r3, #0
 8011870:	dd16      	ble.n	80118a0 <_strtod_l+0x738>
 8011872:	4641      	mov	r1, r8
 8011874:	461a      	mov	r2, r3
 8011876:	9805      	ldr	r0, [sp, #20]
 8011878:	f7ff f9a8 	bl	8010bcc <__pow5mult>
 801187c:	4680      	mov	r8, r0
 801187e:	2800      	cmp	r0, #0
 8011880:	d0b7      	beq.n	80117f2 <_strtod_l+0x68a>
 8011882:	4601      	mov	r1, r0
 8011884:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011886:	9805      	ldr	r0, [sp, #20]
 8011888:	f7ff f8f8 	bl	8010a7c <__multiply>
 801188c:	900e      	str	r0, [sp, #56]	@ 0x38
 801188e:	2800      	cmp	r0, #0
 8011890:	f43f ae85 	beq.w	801159e <_strtod_l+0x436>
 8011894:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011896:	9805      	ldr	r0, [sp, #20]
 8011898:	f7fe ffdc 	bl	8010854 <_Bfree>
 801189c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801189e:	931a      	str	r3, [sp, #104]	@ 0x68
 80118a0:	2d00      	cmp	r5, #0
 80118a2:	dc1d      	bgt.n	80118e0 <_strtod_l+0x778>
 80118a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	dd23      	ble.n	80118f2 <_strtod_l+0x78a>
 80118aa:	4649      	mov	r1, r9
 80118ac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80118ae:	9805      	ldr	r0, [sp, #20]
 80118b0:	f7ff f98c 	bl	8010bcc <__pow5mult>
 80118b4:	4681      	mov	r9, r0
 80118b6:	b9e0      	cbnz	r0, 80118f2 <_strtod_l+0x78a>
 80118b8:	f04f 0900 	mov.w	r9, #0
 80118bc:	e66f      	b.n	801159e <_strtod_l+0x436>
 80118be:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80118c2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80118c6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80118ca:	35e2      	adds	r5, #226	@ 0xe2
 80118cc:	fa01 f305 	lsl.w	r3, r1, r5
 80118d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80118d2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80118d4:	e7ba      	b.n	801184c <_strtod_l+0x6e4>
 80118d6:	2300      	movs	r3, #0
 80118d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80118da:	2301      	movs	r3, #1
 80118dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80118de:	e7b5      	b.n	801184c <_strtod_l+0x6e4>
 80118e0:	462a      	mov	r2, r5
 80118e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80118e4:	9805      	ldr	r0, [sp, #20]
 80118e6:	f7ff f9cb 	bl	8010c80 <__lshift>
 80118ea:	901a      	str	r0, [sp, #104]	@ 0x68
 80118ec:	2800      	cmp	r0, #0
 80118ee:	d1d9      	bne.n	80118a4 <_strtod_l+0x73c>
 80118f0:	e655      	b.n	801159e <_strtod_l+0x436>
 80118f2:	2e00      	cmp	r6, #0
 80118f4:	dd07      	ble.n	8011906 <_strtod_l+0x79e>
 80118f6:	4649      	mov	r1, r9
 80118f8:	4632      	mov	r2, r6
 80118fa:	9805      	ldr	r0, [sp, #20]
 80118fc:	f7ff f9c0 	bl	8010c80 <__lshift>
 8011900:	4681      	mov	r9, r0
 8011902:	2800      	cmp	r0, #0
 8011904:	d0d8      	beq.n	80118b8 <_strtod_l+0x750>
 8011906:	2f00      	cmp	r7, #0
 8011908:	dd08      	ble.n	801191c <_strtod_l+0x7b4>
 801190a:	4641      	mov	r1, r8
 801190c:	463a      	mov	r2, r7
 801190e:	9805      	ldr	r0, [sp, #20]
 8011910:	f7ff f9b6 	bl	8010c80 <__lshift>
 8011914:	4680      	mov	r8, r0
 8011916:	2800      	cmp	r0, #0
 8011918:	f43f ae41 	beq.w	801159e <_strtod_l+0x436>
 801191c:	464a      	mov	r2, r9
 801191e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011920:	9805      	ldr	r0, [sp, #20]
 8011922:	f7ff fa35 	bl	8010d90 <__mdiff>
 8011926:	4604      	mov	r4, r0
 8011928:	2800      	cmp	r0, #0
 801192a:	f43f ae38 	beq.w	801159e <_strtod_l+0x436>
 801192e:	68c3      	ldr	r3, [r0, #12]
 8011930:	4641      	mov	r1, r8
 8011932:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011934:	2300      	movs	r3, #0
 8011936:	60c3      	str	r3, [r0, #12]
 8011938:	f7ff fa0e 	bl	8010d58 <__mcmp>
 801193c:	2800      	cmp	r0, #0
 801193e:	da45      	bge.n	80119cc <_strtod_l+0x864>
 8011940:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011942:	ea53 030a 	orrs.w	r3, r3, sl
 8011946:	d16b      	bne.n	8011a20 <_strtod_l+0x8b8>
 8011948:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801194c:	2b00      	cmp	r3, #0
 801194e:	d167      	bne.n	8011a20 <_strtod_l+0x8b8>
 8011950:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011954:	0d1b      	lsrs	r3, r3, #20
 8011956:	051b      	lsls	r3, r3, #20
 8011958:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801195c:	d960      	bls.n	8011a20 <_strtod_l+0x8b8>
 801195e:	6963      	ldr	r3, [r4, #20]
 8011960:	b913      	cbnz	r3, 8011968 <_strtod_l+0x800>
 8011962:	6923      	ldr	r3, [r4, #16]
 8011964:	2b01      	cmp	r3, #1
 8011966:	dd5b      	ble.n	8011a20 <_strtod_l+0x8b8>
 8011968:	4621      	mov	r1, r4
 801196a:	2201      	movs	r2, #1
 801196c:	9805      	ldr	r0, [sp, #20]
 801196e:	f7ff f987 	bl	8010c80 <__lshift>
 8011972:	4641      	mov	r1, r8
 8011974:	4604      	mov	r4, r0
 8011976:	f7ff f9ef 	bl	8010d58 <__mcmp>
 801197a:	2800      	cmp	r0, #0
 801197c:	dd50      	ble.n	8011a20 <_strtod_l+0x8b8>
 801197e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011982:	9a08      	ldr	r2, [sp, #32]
 8011984:	0d1b      	lsrs	r3, r3, #20
 8011986:	051b      	lsls	r3, r3, #20
 8011988:	2a00      	cmp	r2, #0
 801198a:	d06a      	beq.n	8011a62 <_strtod_l+0x8fa>
 801198c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011990:	d867      	bhi.n	8011a62 <_strtod_l+0x8fa>
 8011992:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011996:	f67f ae98 	bls.w	80116ca <_strtod_l+0x562>
 801199a:	4650      	mov	r0, sl
 801199c:	4659      	mov	r1, fp
 801199e:	4b09      	ldr	r3, [pc, #36]	@ (80119c4 <_strtod_l+0x85c>)
 80119a0:	2200      	movs	r2, #0
 80119a2:	f7ee fe05 	bl	80005b0 <__aeabi_dmul>
 80119a6:	4b08      	ldr	r3, [pc, #32]	@ (80119c8 <_strtod_l+0x860>)
 80119a8:	4682      	mov	sl, r0
 80119aa:	400b      	ands	r3, r1
 80119ac:	468b      	mov	fp, r1
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	f47f ae00 	bne.w	80115b4 <_strtod_l+0x44c>
 80119b4:	2322      	movs	r3, #34	@ 0x22
 80119b6:	9a05      	ldr	r2, [sp, #20]
 80119b8:	6013      	str	r3, [r2, #0]
 80119ba:	e5fb      	b.n	80115b4 <_strtod_l+0x44c>
 80119bc:	080137a0 	.word	0x080137a0
 80119c0:	fffffc02 	.word	0xfffffc02
 80119c4:	39500000 	.word	0x39500000
 80119c8:	7ff00000 	.word	0x7ff00000
 80119cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80119d0:	d165      	bne.n	8011a9e <_strtod_l+0x936>
 80119d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80119d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80119d8:	b35a      	cbz	r2, 8011a32 <_strtod_l+0x8ca>
 80119da:	4a99      	ldr	r2, [pc, #612]	@ (8011c40 <_strtod_l+0xad8>)
 80119dc:	4293      	cmp	r3, r2
 80119de:	d12b      	bne.n	8011a38 <_strtod_l+0x8d0>
 80119e0:	9b08      	ldr	r3, [sp, #32]
 80119e2:	4651      	mov	r1, sl
 80119e4:	b303      	cbz	r3, 8011a28 <_strtod_l+0x8c0>
 80119e6:	465a      	mov	r2, fp
 80119e8:	4b96      	ldr	r3, [pc, #600]	@ (8011c44 <_strtod_l+0xadc>)
 80119ea:	4013      	ands	r3, r2
 80119ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80119f0:	f04f 32ff 	mov.w	r2, #4294967295
 80119f4:	d81b      	bhi.n	8011a2e <_strtod_l+0x8c6>
 80119f6:	0d1b      	lsrs	r3, r3, #20
 80119f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80119fc:	fa02 f303 	lsl.w	r3, r2, r3
 8011a00:	4299      	cmp	r1, r3
 8011a02:	d119      	bne.n	8011a38 <_strtod_l+0x8d0>
 8011a04:	4b90      	ldr	r3, [pc, #576]	@ (8011c48 <_strtod_l+0xae0>)
 8011a06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	d102      	bne.n	8011a12 <_strtod_l+0x8aa>
 8011a0c:	3101      	adds	r1, #1
 8011a0e:	f43f adc6 	beq.w	801159e <_strtod_l+0x436>
 8011a12:	f04f 0a00 	mov.w	sl, #0
 8011a16:	4b8b      	ldr	r3, [pc, #556]	@ (8011c44 <_strtod_l+0xadc>)
 8011a18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011a1a:	401a      	ands	r2, r3
 8011a1c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8011a20:	9b08      	ldr	r3, [sp, #32]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d1b9      	bne.n	801199a <_strtod_l+0x832>
 8011a26:	e5c5      	b.n	80115b4 <_strtod_l+0x44c>
 8011a28:	f04f 33ff 	mov.w	r3, #4294967295
 8011a2c:	e7e8      	b.n	8011a00 <_strtod_l+0x898>
 8011a2e:	4613      	mov	r3, r2
 8011a30:	e7e6      	b.n	8011a00 <_strtod_l+0x898>
 8011a32:	ea53 030a 	orrs.w	r3, r3, sl
 8011a36:	d0a2      	beq.n	801197e <_strtod_l+0x816>
 8011a38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011a3a:	b1db      	cbz	r3, 8011a74 <_strtod_l+0x90c>
 8011a3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011a3e:	4213      	tst	r3, r2
 8011a40:	d0ee      	beq.n	8011a20 <_strtod_l+0x8b8>
 8011a42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a44:	4650      	mov	r0, sl
 8011a46:	4659      	mov	r1, fp
 8011a48:	9a08      	ldr	r2, [sp, #32]
 8011a4a:	b1bb      	cbz	r3, 8011a7c <_strtod_l+0x914>
 8011a4c:	f7ff fb68 	bl	8011120 <sulp>
 8011a50:	4602      	mov	r2, r0
 8011a52:	460b      	mov	r3, r1
 8011a54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011a58:	f7ee fbf4 	bl	8000244 <__adddf3>
 8011a5c:	4682      	mov	sl, r0
 8011a5e:	468b      	mov	fp, r1
 8011a60:	e7de      	b.n	8011a20 <_strtod_l+0x8b8>
 8011a62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011a66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011a6a:	f04f 3aff 	mov.w	sl, #4294967295
 8011a6e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011a72:	e7d5      	b.n	8011a20 <_strtod_l+0x8b8>
 8011a74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011a76:	ea13 0f0a 	tst.w	r3, sl
 8011a7a:	e7e1      	b.n	8011a40 <_strtod_l+0x8d8>
 8011a7c:	f7ff fb50 	bl	8011120 <sulp>
 8011a80:	4602      	mov	r2, r0
 8011a82:	460b      	mov	r3, r1
 8011a84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011a88:	f7ee fbda 	bl	8000240 <__aeabi_dsub>
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	2300      	movs	r3, #0
 8011a90:	4682      	mov	sl, r0
 8011a92:	468b      	mov	fp, r1
 8011a94:	f7ee fff4 	bl	8000a80 <__aeabi_dcmpeq>
 8011a98:	2800      	cmp	r0, #0
 8011a9a:	d0c1      	beq.n	8011a20 <_strtod_l+0x8b8>
 8011a9c:	e615      	b.n	80116ca <_strtod_l+0x562>
 8011a9e:	4641      	mov	r1, r8
 8011aa0:	4620      	mov	r0, r4
 8011aa2:	f7ff fac9 	bl	8011038 <__ratio>
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011aac:	4606      	mov	r6, r0
 8011aae:	460f      	mov	r7, r1
 8011ab0:	f7ee fffa 	bl	8000aa8 <__aeabi_dcmple>
 8011ab4:	2800      	cmp	r0, #0
 8011ab6:	d06d      	beq.n	8011b94 <_strtod_l+0xa2c>
 8011ab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d178      	bne.n	8011bb0 <_strtod_l+0xa48>
 8011abe:	f1ba 0f00 	cmp.w	sl, #0
 8011ac2:	d156      	bne.n	8011b72 <_strtod_l+0xa0a>
 8011ac4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011ac6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d158      	bne.n	8011b80 <_strtod_l+0xa18>
 8011ace:	2200      	movs	r2, #0
 8011ad0:	4630      	mov	r0, r6
 8011ad2:	4639      	mov	r1, r7
 8011ad4:	4b5d      	ldr	r3, [pc, #372]	@ (8011c4c <_strtod_l+0xae4>)
 8011ad6:	f7ee ffdd 	bl	8000a94 <__aeabi_dcmplt>
 8011ada:	2800      	cmp	r0, #0
 8011adc:	d157      	bne.n	8011b8e <_strtod_l+0xa26>
 8011ade:	4630      	mov	r0, r6
 8011ae0:	4639      	mov	r1, r7
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	4b5a      	ldr	r3, [pc, #360]	@ (8011c50 <_strtod_l+0xae8>)
 8011ae6:	f7ee fd63 	bl	80005b0 <__aeabi_dmul>
 8011aea:	4606      	mov	r6, r0
 8011aec:	460f      	mov	r7, r1
 8011aee:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011af2:	9606      	str	r6, [sp, #24]
 8011af4:	9307      	str	r3, [sp, #28]
 8011af6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011afa:	4d52      	ldr	r5, [pc, #328]	@ (8011c44 <_strtod_l+0xadc>)
 8011afc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011b00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b02:	401d      	ands	r5, r3
 8011b04:	4b53      	ldr	r3, [pc, #332]	@ (8011c54 <_strtod_l+0xaec>)
 8011b06:	429d      	cmp	r5, r3
 8011b08:	f040 80aa 	bne.w	8011c60 <_strtod_l+0xaf8>
 8011b0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b0e:	4650      	mov	r0, sl
 8011b10:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011b14:	4659      	mov	r1, fp
 8011b16:	f7ff f9cf 	bl	8010eb8 <__ulp>
 8011b1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011b1e:	f7ee fd47 	bl	80005b0 <__aeabi_dmul>
 8011b22:	4652      	mov	r2, sl
 8011b24:	465b      	mov	r3, fp
 8011b26:	f7ee fb8d 	bl	8000244 <__adddf3>
 8011b2a:	460b      	mov	r3, r1
 8011b2c:	4945      	ldr	r1, [pc, #276]	@ (8011c44 <_strtod_l+0xadc>)
 8011b2e:	4a4a      	ldr	r2, [pc, #296]	@ (8011c58 <_strtod_l+0xaf0>)
 8011b30:	4019      	ands	r1, r3
 8011b32:	4291      	cmp	r1, r2
 8011b34:	4682      	mov	sl, r0
 8011b36:	d942      	bls.n	8011bbe <_strtod_l+0xa56>
 8011b38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011b3a:	4b43      	ldr	r3, [pc, #268]	@ (8011c48 <_strtod_l+0xae0>)
 8011b3c:	429a      	cmp	r2, r3
 8011b3e:	d103      	bne.n	8011b48 <_strtod_l+0x9e0>
 8011b40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011b42:	3301      	adds	r3, #1
 8011b44:	f43f ad2b 	beq.w	801159e <_strtod_l+0x436>
 8011b48:	f04f 3aff 	mov.w	sl, #4294967295
 8011b4c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8011c48 <_strtod_l+0xae0>
 8011b50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011b52:	9805      	ldr	r0, [sp, #20]
 8011b54:	f7fe fe7e 	bl	8010854 <_Bfree>
 8011b58:	4649      	mov	r1, r9
 8011b5a:	9805      	ldr	r0, [sp, #20]
 8011b5c:	f7fe fe7a 	bl	8010854 <_Bfree>
 8011b60:	4641      	mov	r1, r8
 8011b62:	9805      	ldr	r0, [sp, #20]
 8011b64:	f7fe fe76 	bl	8010854 <_Bfree>
 8011b68:	4621      	mov	r1, r4
 8011b6a:	9805      	ldr	r0, [sp, #20]
 8011b6c:	f7fe fe72 	bl	8010854 <_Bfree>
 8011b70:	e618      	b.n	80117a4 <_strtod_l+0x63c>
 8011b72:	f1ba 0f01 	cmp.w	sl, #1
 8011b76:	d103      	bne.n	8011b80 <_strtod_l+0xa18>
 8011b78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	f43f ada5 	beq.w	80116ca <_strtod_l+0x562>
 8011b80:	2200      	movs	r2, #0
 8011b82:	4b36      	ldr	r3, [pc, #216]	@ (8011c5c <_strtod_l+0xaf4>)
 8011b84:	2600      	movs	r6, #0
 8011b86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011b8a:	4f30      	ldr	r7, [pc, #192]	@ (8011c4c <_strtod_l+0xae4>)
 8011b8c:	e7b3      	b.n	8011af6 <_strtod_l+0x98e>
 8011b8e:	2600      	movs	r6, #0
 8011b90:	4f2f      	ldr	r7, [pc, #188]	@ (8011c50 <_strtod_l+0xae8>)
 8011b92:	e7ac      	b.n	8011aee <_strtod_l+0x986>
 8011b94:	4630      	mov	r0, r6
 8011b96:	4639      	mov	r1, r7
 8011b98:	4b2d      	ldr	r3, [pc, #180]	@ (8011c50 <_strtod_l+0xae8>)
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	f7ee fd08 	bl	80005b0 <__aeabi_dmul>
 8011ba0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011ba2:	4606      	mov	r6, r0
 8011ba4:	460f      	mov	r7, r1
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d0a1      	beq.n	8011aee <_strtod_l+0x986>
 8011baa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011bae:	e7a2      	b.n	8011af6 <_strtod_l+0x98e>
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	4b26      	ldr	r3, [pc, #152]	@ (8011c4c <_strtod_l+0xae4>)
 8011bb4:	4616      	mov	r6, r2
 8011bb6:	461f      	mov	r7, r3
 8011bb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011bbc:	e79b      	b.n	8011af6 <_strtod_l+0x98e>
 8011bbe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8011bc2:	9b08      	ldr	r3, [sp, #32]
 8011bc4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d1c1      	bne.n	8011b50 <_strtod_l+0x9e8>
 8011bcc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011bd0:	0d1b      	lsrs	r3, r3, #20
 8011bd2:	051b      	lsls	r3, r3, #20
 8011bd4:	429d      	cmp	r5, r3
 8011bd6:	d1bb      	bne.n	8011b50 <_strtod_l+0x9e8>
 8011bd8:	4630      	mov	r0, r6
 8011bda:	4639      	mov	r1, r7
 8011bdc:	f7ef fa8e 	bl	80010fc <__aeabi_d2lz>
 8011be0:	f7ee fcb8 	bl	8000554 <__aeabi_l2d>
 8011be4:	4602      	mov	r2, r0
 8011be6:	460b      	mov	r3, r1
 8011be8:	4630      	mov	r0, r6
 8011bea:	4639      	mov	r1, r7
 8011bec:	f7ee fb28 	bl	8000240 <__aeabi_dsub>
 8011bf0:	460b      	mov	r3, r1
 8011bf2:	4602      	mov	r2, r0
 8011bf4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011bf8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011bfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011bfe:	ea46 060a 	orr.w	r6, r6, sl
 8011c02:	431e      	orrs	r6, r3
 8011c04:	d069      	beq.n	8011cda <_strtod_l+0xb72>
 8011c06:	a30a      	add	r3, pc, #40	@ (adr r3, 8011c30 <_strtod_l+0xac8>)
 8011c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c0c:	f7ee ff42 	bl	8000a94 <__aeabi_dcmplt>
 8011c10:	2800      	cmp	r0, #0
 8011c12:	f47f accf 	bne.w	80115b4 <_strtod_l+0x44c>
 8011c16:	a308      	add	r3, pc, #32	@ (adr r3, 8011c38 <_strtod_l+0xad0>)
 8011c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011c20:	f7ee ff56 	bl	8000ad0 <__aeabi_dcmpgt>
 8011c24:	2800      	cmp	r0, #0
 8011c26:	d093      	beq.n	8011b50 <_strtod_l+0x9e8>
 8011c28:	e4c4      	b.n	80115b4 <_strtod_l+0x44c>
 8011c2a:	bf00      	nop
 8011c2c:	f3af 8000 	nop.w
 8011c30:	94a03595 	.word	0x94a03595
 8011c34:	3fdfffff 	.word	0x3fdfffff
 8011c38:	35afe535 	.word	0x35afe535
 8011c3c:	3fe00000 	.word	0x3fe00000
 8011c40:	000fffff 	.word	0x000fffff
 8011c44:	7ff00000 	.word	0x7ff00000
 8011c48:	7fefffff 	.word	0x7fefffff
 8011c4c:	3ff00000 	.word	0x3ff00000
 8011c50:	3fe00000 	.word	0x3fe00000
 8011c54:	7fe00000 	.word	0x7fe00000
 8011c58:	7c9fffff 	.word	0x7c9fffff
 8011c5c:	bff00000 	.word	0xbff00000
 8011c60:	9b08      	ldr	r3, [sp, #32]
 8011c62:	b323      	cbz	r3, 8011cae <_strtod_l+0xb46>
 8011c64:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8011c68:	d821      	bhi.n	8011cae <_strtod_l+0xb46>
 8011c6a:	a327      	add	r3, pc, #156	@ (adr r3, 8011d08 <_strtod_l+0xba0>)
 8011c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c70:	4630      	mov	r0, r6
 8011c72:	4639      	mov	r1, r7
 8011c74:	f7ee ff18 	bl	8000aa8 <__aeabi_dcmple>
 8011c78:	b1a0      	cbz	r0, 8011ca4 <_strtod_l+0xb3c>
 8011c7a:	4639      	mov	r1, r7
 8011c7c:	4630      	mov	r0, r6
 8011c7e:	f7ee ff6f 	bl	8000b60 <__aeabi_d2uiz>
 8011c82:	2801      	cmp	r0, #1
 8011c84:	bf38      	it	cc
 8011c86:	2001      	movcc	r0, #1
 8011c88:	f7ee fc18 	bl	80004bc <__aeabi_ui2d>
 8011c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c8e:	4606      	mov	r6, r0
 8011c90:	460f      	mov	r7, r1
 8011c92:	b9fb      	cbnz	r3, 8011cd4 <_strtod_l+0xb6c>
 8011c94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011c98:	9014      	str	r0, [sp, #80]	@ 0x50
 8011c9a:	9315      	str	r3, [sp, #84]	@ 0x54
 8011c9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011ca0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011ca4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011ca6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8011caa:	1b5b      	subs	r3, r3, r5
 8011cac:	9311      	str	r3, [sp, #68]	@ 0x44
 8011cae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011cb2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011cb6:	f7ff f8ff 	bl	8010eb8 <__ulp>
 8011cba:	4602      	mov	r2, r0
 8011cbc:	460b      	mov	r3, r1
 8011cbe:	4650      	mov	r0, sl
 8011cc0:	4659      	mov	r1, fp
 8011cc2:	f7ee fc75 	bl	80005b0 <__aeabi_dmul>
 8011cc6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011cca:	f7ee fabb 	bl	8000244 <__adddf3>
 8011cce:	4682      	mov	sl, r0
 8011cd0:	468b      	mov	fp, r1
 8011cd2:	e776      	b.n	8011bc2 <_strtod_l+0xa5a>
 8011cd4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011cd8:	e7e0      	b.n	8011c9c <_strtod_l+0xb34>
 8011cda:	a30d      	add	r3, pc, #52	@ (adr r3, 8011d10 <_strtod_l+0xba8>)
 8011cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce0:	f7ee fed8 	bl	8000a94 <__aeabi_dcmplt>
 8011ce4:	e79e      	b.n	8011c24 <_strtod_l+0xabc>
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011cea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011cec:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011cee:	6013      	str	r3, [r2, #0]
 8011cf0:	f7ff ba77 	b.w	80111e2 <_strtod_l+0x7a>
 8011cf4:	2a65      	cmp	r2, #101	@ 0x65
 8011cf6:	f43f ab6e 	beq.w	80113d6 <_strtod_l+0x26e>
 8011cfa:	2a45      	cmp	r2, #69	@ 0x45
 8011cfc:	f43f ab6b 	beq.w	80113d6 <_strtod_l+0x26e>
 8011d00:	2301      	movs	r3, #1
 8011d02:	f7ff bba6 	b.w	8011452 <_strtod_l+0x2ea>
 8011d06:	bf00      	nop
 8011d08:	ffc00000 	.word	0xffc00000
 8011d0c:	41dfffff 	.word	0x41dfffff
 8011d10:	94a03595 	.word	0x94a03595
 8011d14:	3fcfffff 	.word	0x3fcfffff

08011d18 <_strtod_r>:
 8011d18:	4b01      	ldr	r3, [pc, #4]	@ (8011d20 <_strtod_r+0x8>)
 8011d1a:	f7ff ba25 	b.w	8011168 <_strtod_l>
 8011d1e:	bf00      	nop
 8011d20:	20000258 	.word	0x20000258

08011d24 <_strtol_l.constprop.0>:
 8011d24:	2b24      	cmp	r3, #36	@ 0x24
 8011d26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d2a:	4686      	mov	lr, r0
 8011d2c:	4690      	mov	r8, r2
 8011d2e:	d801      	bhi.n	8011d34 <_strtol_l.constprop.0+0x10>
 8011d30:	2b01      	cmp	r3, #1
 8011d32:	d106      	bne.n	8011d42 <_strtol_l.constprop.0+0x1e>
 8011d34:	f7fd fdb2 	bl	800f89c <__errno>
 8011d38:	2316      	movs	r3, #22
 8011d3a:	6003      	str	r3, [r0, #0]
 8011d3c:	2000      	movs	r0, #0
 8011d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d42:	460d      	mov	r5, r1
 8011d44:	4833      	ldr	r0, [pc, #204]	@ (8011e14 <_strtol_l.constprop.0+0xf0>)
 8011d46:	462a      	mov	r2, r5
 8011d48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011d4c:	5d06      	ldrb	r6, [r0, r4]
 8011d4e:	f016 0608 	ands.w	r6, r6, #8
 8011d52:	d1f8      	bne.n	8011d46 <_strtol_l.constprop.0+0x22>
 8011d54:	2c2d      	cmp	r4, #45	@ 0x2d
 8011d56:	d12d      	bne.n	8011db4 <_strtol_l.constprop.0+0x90>
 8011d58:	2601      	movs	r6, #1
 8011d5a:	782c      	ldrb	r4, [r5, #0]
 8011d5c:	1c95      	adds	r5, r2, #2
 8011d5e:	f033 0210 	bics.w	r2, r3, #16
 8011d62:	d109      	bne.n	8011d78 <_strtol_l.constprop.0+0x54>
 8011d64:	2c30      	cmp	r4, #48	@ 0x30
 8011d66:	d12a      	bne.n	8011dbe <_strtol_l.constprop.0+0x9a>
 8011d68:	782a      	ldrb	r2, [r5, #0]
 8011d6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011d6e:	2a58      	cmp	r2, #88	@ 0x58
 8011d70:	d125      	bne.n	8011dbe <_strtol_l.constprop.0+0x9a>
 8011d72:	2310      	movs	r3, #16
 8011d74:	786c      	ldrb	r4, [r5, #1]
 8011d76:	3502      	adds	r5, #2
 8011d78:	2200      	movs	r2, #0
 8011d7a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011d7e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011d82:	fbbc f9f3 	udiv	r9, ip, r3
 8011d86:	4610      	mov	r0, r2
 8011d88:	fb03 ca19 	mls	sl, r3, r9, ip
 8011d8c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011d90:	2f09      	cmp	r7, #9
 8011d92:	d81b      	bhi.n	8011dcc <_strtol_l.constprop.0+0xa8>
 8011d94:	463c      	mov	r4, r7
 8011d96:	42a3      	cmp	r3, r4
 8011d98:	dd27      	ble.n	8011dea <_strtol_l.constprop.0+0xc6>
 8011d9a:	1c57      	adds	r7, r2, #1
 8011d9c:	d007      	beq.n	8011dae <_strtol_l.constprop.0+0x8a>
 8011d9e:	4581      	cmp	r9, r0
 8011da0:	d320      	bcc.n	8011de4 <_strtol_l.constprop.0+0xc0>
 8011da2:	d101      	bne.n	8011da8 <_strtol_l.constprop.0+0x84>
 8011da4:	45a2      	cmp	sl, r4
 8011da6:	db1d      	blt.n	8011de4 <_strtol_l.constprop.0+0xc0>
 8011da8:	2201      	movs	r2, #1
 8011daa:	fb00 4003 	mla	r0, r0, r3, r4
 8011dae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011db2:	e7eb      	b.n	8011d8c <_strtol_l.constprop.0+0x68>
 8011db4:	2c2b      	cmp	r4, #43	@ 0x2b
 8011db6:	bf04      	itt	eq
 8011db8:	782c      	ldrbeq	r4, [r5, #0]
 8011dba:	1c95      	addeq	r5, r2, #2
 8011dbc:	e7cf      	b.n	8011d5e <_strtol_l.constprop.0+0x3a>
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d1da      	bne.n	8011d78 <_strtol_l.constprop.0+0x54>
 8011dc2:	2c30      	cmp	r4, #48	@ 0x30
 8011dc4:	bf0c      	ite	eq
 8011dc6:	2308      	moveq	r3, #8
 8011dc8:	230a      	movne	r3, #10
 8011dca:	e7d5      	b.n	8011d78 <_strtol_l.constprop.0+0x54>
 8011dcc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011dd0:	2f19      	cmp	r7, #25
 8011dd2:	d801      	bhi.n	8011dd8 <_strtol_l.constprop.0+0xb4>
 8011dd4:	3c37      	subs	r4, #55	@ 0x37
 8011dd6:	e7de      	b.n	8011d96 <_strtol_l.constprop.0+0x72>
 8011dd8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011ddc:	2f19      	cmp	r7, #25
 8011dde:	d804      	bhi.n	8011dea <_strtol_l.constprop.0+0xc6>
 8011de0:	3c57      	subs	r4, #87	@ 0x57
 8011de2:	e7d8      	b.n	8011d96 <_strtol_l.constprop.0+0x72>
 8011de4:	f04f 32ff 	mov.w	r2, #4294967295
 8011de8:	e7e1      	b.n	8011dae <_strtol_l.constprop.0+0x8a>
 8011dea:	1c53      	adds	r3, r2, #1
 8011dec:	d108      	bne.n	8011e00 <_strtol_l.constprop.0+0xdc>
 8011dee:	2322      	movs	r3, #34	@ 0x22
 8011df0:	4660      	mov	r0, ip
 8011df2:	f8ce 3000 	str.w	r3, [lr]
 8011df6:	f1b8 0f00 	cmp.w	r8, #0
 8011dfa:	d0a0      	beq.n	8011d3e <_strtol_l.constprop.0+0x1a>
 8011dfc:	1e69      	subs	r1, r5, #1
 8011dfe:	e006      	b.n	8011e0e <_strtol_l.constprop.0+0xea>
 8011e00:	b106      	cbz	r6, 8011e04 <_strtol_l.constprop.0+0xe0>
 8011e02:	4240      	negs	r0, r0
 8011e04:	f1b8 0f00 	cmp.w	r8, #0
 8011e08:	d099      	beq.n	8011d3e <_strtol_l.constprop.0+0x1a>
 8011e0a:	2a00      	cmp	r2, #0
 8011e0c:	d1f6      	bne.n	8011dfc <_strtol_l.constprop.0+0xd8>
 8011e0e:	f8c8 1000 	str.w	r1, [r8]
 8011e12:	e794      	b.n	8011d3e <_strtol_l.constprop.0+0x1a>
 8011e14:	080137c9 	.word	0x080137c9

08011e18 <_strtol_r>:
 8011e18:	f7ff bf84 	b.w	8011d24 <_strtol_l.constprop.0>

08011e1c <__ssputs_r>:
 8011e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e20:	461f      	mov	r7, r3
 8011e22:	688e      	ldr	r6, [r1, #8]
 8011e24:	4682      	mov	sl, r0
 8011e26:	42be      	cmp	r6, r7
 8011e28:	460c      	mov	r4, r1
 8011e2a:	4690      	mov	r8, r2
 8011e2c:	680b      	ldr	r3, [r1, #0]
 8011e2e:	d82d      	bhi.n	8011e8c <__ssputs_r+0x70>
 8011e30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011e34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011e38:	d026      	beq.n	8011e88 <__ssputs_r+0x6c>
 8011e3a:	6965      	ldr	r5, [r4, #20]
 8011e3c:	6909      	ldr	r1, [r1, #16]
 8011e3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e42:	eba3 0901 	sub.w	r9, r3, r1
 8011e46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011e4a:	1c7b      	adds	r3, r7, #1
 8011e4c:	444b      	add	r3, r9
 8011e4e:	106d      	asrs	r5, r5, #1
 8011e50:	429d      	cmp	r5, r3
 8011e52:	bf38      	it	cc
 8011e54:	461d      	movcc	r5, r3
 8011e56:	0553      	lsls	r3, r2, #21
 8011e58:	d527      	bpl.n	8011eaa <__ssputs_r+0x8e>
 8011e5a:	4629      	mov	r1, r5
 8011e5c:	f7fe fc2e 	bl	80106bc <_malloc_r>
 8011e60:	4606      	mov	r6, r0
 8011e62:	b360      	cbz	r0, 8011ebe <__ssputs_r+0xa2>
 8011e64:	464a      	mov	r2, r9
 8011e66:	6921      	ldr	r1, [r4, #16]
 8011e68:	f7fd fd53 	bl	800f912 <memcpy>
 8011e6c:	89a3      	ldrh	r3, [r4, #12]
 8011e6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011e72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e76:	81a3      	strh	r3, [r4, #12]
 8011e78:	6126      	str	r6, [r4, #16]
 8011e7a:	444e      	add	r6, r9
 8011e7c:	6026      	str	r6, [r4, #0]
 8011e7e:	463e      	mov	r6, r7
 8011e80:	6165      	str	r5, [r4, #20]
 8011e82:	eba5 0509 	sub.w	r5, r5, r9
 8011e86:	60a5      	str	r5, [r4, #8]
 8011e88:	42be      	cmp	r6, r7
 8011e8a:	d900      	bls.n	8011e8e <__ssputs_r+0x72>
 8011e8c:	463e      	mov	r6, r7
 8011e8e:	4632      	mov	r2, r6
 8011e90:	4641      	mov	r1, r8
 8011e92:	6820      	ldr	r0, [r4, #0]
 8011e94:	f000 fb97 	bl	80125c6 <memmove>
 8011e98:	2000      	movs	r0, #0
 8011e9a:	68a3      	ldr	r3, [r4, #8]
 8011e9c:	1b9b      	subs	r3, r3, r6
 8011e9e:	60a3      	str	r3, [r4, #8]
 8011ea0:	6823      	ldr	r3, [r4, #0]
 8011ea2:	4433      	add	r3, r6
 8011ea4:	6023      	str	r3, [r4, #0]
 8011ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011eaa:	462a      	mov	r2, r5
 8011eac:	f000 ff6d 	bl	8012d8a <_realloc_r>
 8011eb0:	4606      	mov	r6, r0
 8011eb2:	2800      	cmp	r0, #0
 8011eb4:	d1e0      	bne.n	8011e78 <__ssputs_r+0x5c>
 8011eb6:	4650      	mov	r0, sl
 8011eb8:	6921      	ldr	r1, [r4, #16]
 8011eba:	f7fe fb8d 	bl	80105d8 <_free_r>
 8011ebe:	230c      	movs	r3, #12
 8011ec0:	f8ca 3000 	str.w	r3, [sl]
 8011ec4:	89a3      	ldrh	r3, [r4, #12]
 8011ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8011eca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ece:	81a3      	strh	r3, [r4, #12]
 8011ed0:	e7e9      	b.n	8011ea6 <__ssputs_r+0x8a>
	...

08011ed4 <_svfiprintf_r>:
 8011ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ed8:	4698      	mov	r8, r3
 8011eda:	898b      	ldrh	r3, [r1, #12]
 8011edc:	4607      	mov	r7, r0
 8011ede:	061b      	lsls	r3, r3, #24
 8011ee0:	460d      	mov	r5, r1
 8011ee2:	4614      	mov	r4, r2
 8011ee4:	b09d      	sub	sp, #116	@ 0x74
 8011ee6:	d510      	bpl.n	8011f0a <_svfiprintf_r+0x36>
 8011ee8:	690b      	ldr	r3, [r1, #16]
 8011eea:	b973      	cbnz	r3, 8011f0a <_svfiprintf_r+0x36>
 8011eec:	2140      	movs	r1, #64	@ 0x40
 8011eee:	f7fe fbe5 	bl	80106bc <_malloc_r>
 8011ef2:	6028      	str	r0, [r5, #0]
 8011ef4:	6128      	str	r0, [r5, #16]
 8011ef6:	b930      	cbnz	r0, 8011f06 <_svfiprintf_r+0x32>
 8011ef8:	230c      	movs	r3, #12
 8011efa:	603b      	str	r3, [r7, #0]
 8011efc:	f04f 30ff 	mov.w	r0, #4294967295
 8011f00:	b01d      	add	sp, #116	@ 0x74
 8011f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f06:	2340      	movs	r3, #64	@ 0x40
 8011f08:	616b      	str	r3, [r5, #20]
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f0e:	2320      	movs	r3, #32
 8011f10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011f14:	2330      	movs	r3, #48	@ 0x30
 8011f16:	f04f 0901 	mov.w	r9, #1
 8011f1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f1e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80120b8 <_svfiprintf_r+0x1e4>
 8011f22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011f26:	4623      	mov	r3, r4
 8011f28:	469a      	mov	sl, r3
 8011f2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f2e:	b10a      	cbz	r2, 8011f34 <_svfiprintf_r+0x60>
 8011f30:	2a25      	cmp	r2, #37	@ 0x25
 8011f32:	d1f9      	bne.n	8011f28 <_svfiprintf_r+0x54>
 8011f34:	ebba 0b04 	subs.w	fp, sl, r4
 8011f38:	d00b      	beq.n	8011f52 <_svfiprintf_r+0x7e>
 8011f3a:	465b      	mov	r3, fp
 8011f3c:	4622      	mov	r2, r4
 8011f3e:	4629      	mov	r1, r5
 8011f40:	4638      	mov	r0, r7
 8011f42:	f7ff ff6b 	bl	8011e1c <__ssputs_r>
 8011f46:	3001      	adds	r0, #1
 8011f48:	f000 80a7 	beq.w	801209a <_svfiprintf_r+0x1c6>
 8011f4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011f4e:	445a      	add	r2, fp
 8011f50:	9209      	str	r2, [sp, #36]	@ 0x24
 8011f52:	f89a 3000 	ldrb.w	r3, [sl]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	f000 809f 	beq.w	801209a <_svfiprintf_r+0x1c6>
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8011f62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f66:	f10a 0a01 	add.w	sl, sl, #1
 8011f6a:	9304      	str	r3, [sp, #16]
 8011f6c:	9307      	str	r3, [sp, #28]
 8011f6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011f72:	931a      	str	r3, [sp, #104]	@ 0x68
 8011f74:	4654      	mov	r4, sl
 8011f76:	2205      	movs	r2, #5
 8011f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f7c:	484e      	ldr	r0, [pc, #312]	@ (80120b8 <_svfiprintf_r+0x1e4>)
 8011f7e:	f7fd fcba 	bl	800f8f6 <memchr>
 8011f82:	9a04      	ldr	r2, [sp, #16]
 8011f84:	b9d8      	cbnz	r0, 8011fbe <_svfiprintf_r+0xea>
 8011f86:	06d0      	lsls	r0, r2, #27
 8011f88:	bf44      	itt	mi
 8011f8a:	2320      	movmi	r3, #32
 8011f8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f90:	0711      	lsls	r1, r2, #28
 8011f92:	bf44      	itt	mi
 8011f94:	232b      	movmi	r3, #43	@ 0x2b
 8011f96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8011f9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011fa0:	d015      	beq.n	8011fce <_svfiprintf_r+0xfa>
 8011fa2:	4654      	mov	r4, sl
 8011fa4:	2000      	movs	r0, #0
 8011fa6:	f04f 0c0a 	mov.w	ip, #10
 8011faa:	9a07      	ldr	r2, [sp, #28]
 8011fac:	4621      	mov	r1, r4
 8011fae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fb2:	3b30      	subs	r3, #48	@ 0x30
 8011fb4:	2b09      	cmp	r3, #9
 8011fb6:	d94b      	bls.n	8012050 <_svfiprintf_r+0x17c>
 8011fb8:	b1b0      	cbz	r0, 8011fe8 <_svfiprintf_r+0x114>
 8011fba:	9207      	str	r2, [sp, #28]
 8011fbc:	e014      	b.n	8011fe8 <_svfiprintf_r+0x114>
 8011fbe:	eba0 0308 	sub.w	r3, r0, r8
 8011fc2:	fa09 f303 	lsl.w	r3, r9, r3
 8011fc6:	4313      	orrs	r3, r2
 8011fc8:	46a2      	mov	sl, r4
 8011fca:	9304      	str	r3, [sp, #16]
 8011fcc:	e7d2      	b.n	8011f74 <_svfiprintf_r+0xa0>
 8011fce:	9b03      	ldr	r3, [sp, #12]
 8011fd0:	1d19      	adds	r1, r3, #4
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	9103      	str	r1, [sp, #12]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	bfbb      	ittet	lt
 8011fda:	425b      	neglt	r3, r3
 8011fdc:	f042 0202 	orrlt.w	r2, r2, #2
 8011fe0:	9307      	strge	r3, [sp, #28]
 8011fe2:	9307      	strlt	r3, [sp, #28]
 8011fe4:	bfb8      	it	lt
 8011fe6:	9204      	strlt	r2, [sp, #16]
 8011fe8:	7823      	ldrb	r3, [r4, #0]
 8011fea:	2b2e      	cmp	r3, #46	@ 0x2e
 8011fec:	d10a      	bne.n	8012004 <_svfiprintf_r+0x130>
 8011fee:	7863      	ldrb	r3, [r4, #1]
 8011ff0:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ff2:	d132      	bne.n	801205a <_svfiprintf_r+0x186>
 8011ff4:	9b03      	ldr	r3, [sp, #12]
 8011ff6:	3402      	adds	r4, #2
 8011ff8:	1d1a      	adds	r2, r3, #4
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	9203      	str	r2, [sp, #12]
 8011ffe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012002:	9305      	str	r3, [sp, #20]
 8012004:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80120bc <_svfiprintf_r+0x1e8>
 8012008:	2203      	movs	r2, #3
 801200a:	4650      	mov	r0, sl
 801200c:	7821      	ldrb	r1, [r4, #0]
 801200e:	f7fd fc72 	bl	800f8f6 <memchr>
 8012012:	b138      	cbz	r0, 8012024 <_svfiprintf_r+0x150>
 8012014:	2240      	movs	r2, #64	@ 0x40
 8012016:	9b04      	ldr	r3, [sp, #16]
 8012018:	eba0 000a 	sub.w	r0, r0, sl
 801201c:	4082      	lsls	r2, r0
 801201e:	4313      	orrs	r3, r2
 8012020:	3401      	adds	r4, #1
 8012022:	9304      	str	r3, [sp, #16]
 8012024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012028:	2206      	movs	r2, #6
 801202a:	4825      	ldr	r0, [pc, #148]	@ (80120c0 <_svfiprintf_r+0x1ec>)
 801202c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012030:	f7fd fc61 	bl	800f8f6 <memchr>
 8012034:	2800      	cmp	r0, #0
 8012036:	d036      	beq.n	80120a6 <_svfiprintf_r+0x1d2>
 8012038:	4b22      	ldr	r3, [pc, #136]	@ (80120c4 <_svfiprintf_r+0x1f0>)
 801203a:	bb1b      	cbnz	r3, 8012084 <_svfiprintf_r+0x1b0>
 801203c:	9b03      	ldr	r3, [sp, #12]
 801203e:	3307      	adds	r3, #7
 8012040:	f023 0307 	bic.w	r3, r3, #7
 8012044:	3308      	adds	r3, #8
 8012046:	9303      	str	r3, [sp, #12]
 8012048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801204a:	4433      	add	r3, r6
 801204c:	9309      	str	r3, [sp, #36]	@ 0x24
 801204e:	e76a      	b.n	8011f26 <_svfiprintf_r+0x52>
 8012050:	460c      	mov	r4, r1
 8012052:	2001      	movs	r0, #1
 8012054:	fb0c 3202 	mla	r2, ip, r2, r3
 8012058:	e7a8      	b.n	8011fac <_svfiprintf_r+0xd8>
 801205a:	2300      	movs	r3, #0
 801205c:	f04f 0c0a 	mov.w	ip, #10
 8012060:	4619      	mov	r1, r3
 8012062:	3401      	adds	r4, #1
 8012064:	9305      	str	r3, [sp, #20]
 8012066:	4620      	mov	r0, r4
 8012068:	f810 2b01 	ldrb.w	r2, [r0], #1
 801206c:	3a30      	subs	r2, #48	@ 0x30
 801206e:	2a09      	cmp	r2, #9
 8012070:	d903      	bls.n	801207a <_svfiprintf_r+0x1a6>
 8012072:	2b00      	cmp	r3, #0
 8012074:	d0c6      	beq.n	8012004 <_svfiprintf_r+0x130>
 8012076:	9105      	str	r1, [sp, #20]
 8012078:	e7c4      	b.n	8012004 <_svfiprintf_r+0x130>
 801207a:	4604      	mov	r4, r0
 801207c:	2301      	movs	r3, #1
 801207e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012082:	e7f0      	b.n	8012066 <_svfiprintf_r+0x192>
 8012084:	ab03      	add	r3, sp, #12
 8012086:	9300      	str	r3, [sp, #0]
 8012088:	462a      	mov	r2, r5
 801208a:	4638      	mov	r0, r7
 801208c:	4b0e      	ldr	r3, [pc, #56]	@ (80120c8 <_svfiprintf_r+0x1f4>)
 801208e:	a904      	add	r1, sp, #16
 8012090:	f7fc fbb2 	bl	800e7f8 <_printf_float>
 8012094:	1c42      	adds	r2, r0, #1
 8012096:	4606      	mov	r6, r0
 8012098:	d1d6      	bne.n	8012048 <_svfiprintf_r+0x174>
 801209a:	89ab      	ldrh	r3, [r5, #12]
 801209c:	065b      	lsls	r3, r3, #25
 801209e:	f53f af2d 	bmi.w	8011efc <_svfiprintf_r+0x28>
 80120a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80120a4:	e72c      	b.n	8011f00 <_svfiprintf_r+0x2c>
 80120a6:	ab03      	add	r3, sp, #12
 80120a8:	9300      	str	r3, [sp, #0]
 80120aa:	462a      	mov	r2, r5
 80120ac:	4638      	mov	r0, r7
 80120ae:	4b06      	ldr	r3, [pc, #24]	@ (80120c8 <_svfiprintf_r+0x1f4>)
 80120b0:	a904      	add	r1, sp, #16
 80120b2:	f7fc fe3f 	bl	800ed34 <_printf_i>
 80120b6:	e7ed      	b.n	8012094 <_svfiprintf_r+0x1c0>
 80120b8:	080138c9 	.word	0x080138c9
 80120bc:	080138cf 	.word	0x080138cf
 80120c0:	080138d3 	.word	0x080138d3
 80120c4:	0800e7f9 	.word	0x0800e7f9
 80120c8:	08011e1d 	.word	0x08011e1d

080120cc <__sfputc_r>:
 80120cc:	6893      	ldr	r3, [r2, #8]
 80120ce:	b410      	push	{r4}
 80120d0:	3b01      	subs	r3, #1
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	6093      	str	r3, [r2, #8]
 80120d6:	da07      	bge.n	80120e8 <__sfputc_r+0x1c>
 80120d8:	6994      	ldr	r4, [r2, #24]
 80120da:	42a3      	cmp	r3, r4
 80120dc:	db01      	blt.n	80120e2 <__sfputc_r+0x16>
 80120de:	290a      	cmp	r1, #10
 80120e0:	d102      	bne.n	80120e8 <__sfputc_r+0x1c>
 80120e2:	bc10      	pop	{r4}
 80120e4:	f7fd baf3 	b.w	800f6ce <__swbuf_r>
 80120e8:	6813      	ldr	r3, [r2, #0]
 80120ea:	1c58      	adds	r0, r3, #1
 80120ec:	6010      	str	r0, [r2, #0]
 80120ee:	7019      	strb	r1, [r3, #0]
 80120f0:	4608      	mov	r0, r1
 80120f2:	bc10      	pop	{r4}
 80120f4:	4770      	bx	lr

080120f6 <__sfputs_r>:
 80120f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120f8:	4606      	mov	r6, r0
 80120fa:	460f      	mov	r7, r1
 80120fc:	4614      	mov	r4, r2
 80120fe:	18d5      	adds	r5, r2, r3
 8012100:	42ac      	cmp	r4, r5
 8012102:	d101      	bne.n	8012108 <__sfputs_r+0x12>
 8012104:	2000      	movs	r0, #0
 8012106:	e007      	b.n	8012118 <__sfputs_r+0x22>
 8012108:	463a      	mov	r2, r7
 801210a:	4630      	mov	r0, r6
 801210c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012110:	f7ff ffdc 	bl	80120cc <__sfputc_r>
 8012114:	1c43      	adds	r3, r0, #1
 8012116:	d1f3      	bne.n	8012100 <__sfputs_r+0xa>
 8012118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801211c <_vfiprintf_r>:
 801211c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012120:	460d      	mov	r5, r1
 8012122:	4614      	mov	r4, r2
 8012124:	4698      	mov	r8, r3
 8012126:	4606      	mov	r6, r0
 8012128:	b09d      	sub	sp, #116	@ 0x74
 801212a:	b118      	cbz	r0, 8012134 <_vfiprintf_r+0x18>
 801212c:	6a03      	ldr	r3, [r0, #32]
 801212e:	b90b      	cbnz	r3, 8012134 <_vfiprintf_r+0x18>
 8012130:	f7fd f9bc 	bl	800f4ac <__sinit>
 8012134:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012136:	07d9      	lsls	r1, r3, #31
 8012138:	d405      	bmi.n	8012146 <_vfiprintf_r+0x2a>
 801213a:	89ab      	ldrh	r3, [r5, #12]
 801213c:	059a      	lsls	r2, r3, #22
 801213e:	d402      	bmi.n	8012146 <_vfiprintf_r+0x2a>
 8012140:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012142:	f7fd fbd6 	bl	800f8f2 <__retarget_lock_acquire_recursive>
 8012146:	89ab      	ldrh	r3, [r5, #12]
 8012148:	071b      	lsls	r3, r3, #28
 801214a:	d501      	bpl.n	8012150 <_vfiprintf_r+0x34>
 801214c:	692b      	ldr	r3, [r5, #16]
 801214e:	b99b      	cbnz	r3, 8012178 <_vfiprintf_r+0x5c>
 8012150:	4629      	mov	r1, r5
 8012152:	4630      	mov	r0, r6
 8012154:	f7fd fafa 	bl	800f74c <__swsetup_r>
 8012158:	b170      	cbz	r0, 8012178 <_vfiprintf_r+0x5c>
 801215a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801215c:	07dc      	lsls	r4, r3, #31
 801215e:	d504      	bpl.n	801216a <_vfiprintf_r+0x4e>
 8012160:	f04f 30ff 	mov.w	r0, #4294967295
 8012164:	b01d      	add	sp, #116	@ 0x74
 8012166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801216a:	89ab      	ldrh	r3, [r5, #12]
 801216c:	0598      	lsls	r0, r3, #22
 801216e:	d4f7      	bmi.n	8012160 <_vfiprintf_r+0x44>
 8012170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012172:	f7fd fbbf 	bl	800f8f4 <__retarget_lock_release_recursive>
 8012176:	e7f3      	b.n	8012160 <_vfiprintf_r+0x44>
 8012178:	2300      	movs	r3, #0
 801217a:	9309      	str	r3, [sp, #36]	@ 0x24
 801217c:	2320      	movs	r3, #32
 801217e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012182:	2330      	movs	r3, #48	@ 0x30
 8012184:	f04f 0901 	mov.w	r9, #1
 8012188:	f8cd 800c 	str.w	r8, [sp, #12]
 801218c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8012338 <_vfiprintf_r+0x21c>
 8012190:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012194:	4623      	mov	r3, r4
 8012196:	469a      	mov	sl, r3
 8012198:	f813 2b01 	ldrb.w	r2, [r3], #1
 801219c:	b10a      	cbz	r2, 80121a2 <_vfiprintf_r+0x86>
 801219e:	2a25      	cmp	r2, #37	@ 0x25
 80121a0:	d1f9      	bne.n	8012196 <_vfiprintf_r+0x7a>
 80121a2:	ebba 0b04 	subs.w	fp, sl, r4
 80121a6:	d00b      	beq.n	80121c0 <_vfiprintf_r+0xa4>
 80121a8:	465b      	mov	r3, fp
 80121aa:	4622      	mov	r2, r4
 80121ac:	4629      	mov	r1, r5
 80121ae:	4630      	mov	r0, r6
 80121b0:	f7ff ffa1 	bl	80120f6 <__sfputs_r>
 80121b4:	3001      	adds	r0, #1
 80121b6:	f000 80a7 	beq.w	8012308 <_vfiprintf_r+0x1ec>
 80121ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80121bc:	445a      	add	r2, fp
 80121be:	9209      	str	r2, [sp, #36]	@ 0x24
 80121c0:	f89a 3000 	ldrb.w	r3, [sl]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	f000 809f 	beq.w	8012308 <_vfiprintf_r+0x1ec>
 80121ca:	2300      	movs	r3, #0
 80121cc:	f04f 32ff 	mov.w	r2, #4294967295
 80121d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121d4:	f10a 0a01 	add.w	sl, sl, #1
 80121d8:	9304      	str	r3, [sp, #16]
 80121da:	9307      	str	r3, [sp, #28]
 80121dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80121e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80121e2:	4654      	mov	r4, sl
 80121e4:	2205      	movs	r2, #5
 80121e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121ea:	4853      	ldr	r0, [pc, #332]	@ (8012338 <_vfiprintf_r+0x21c>)
 80121ec:	f7fd fb83 	bl	800f8f6 <memchr>
 80121f0:	9a04      	ldr	r2, [sp, #16]
 80121f2:	b9d8      	cbnz	r0, 801222c <_vfiprintf_r+0x110>
 80121f4:	06d1      	lsls	r1, r2, #27
 80121f6:	bf44      	itt	mi
 80121f8:	2320      	movmi	r3, #32
 80121fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80121fe:	0713      	lsls	r3, r2, #28
 8012200:	bf44      	itt	mi
 8012202:	232b      	movmi	r3, #43	@ 0x2b
 8012204:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012208:	f89a 3000 	ldrb.w	r3, [sl]
 801220c:	2b2a      	cmp	r3, #42	@ 0x2a
 801220e:	d015      	beq.n	801223c <_vfiprintf_r+0x120>
 8012210:	4654      	mov	r4, sl
 8012212:	2000      	movs	r0, #0
 8012214:	f04f 0c0a 	mov.w	ip, #10
 8012218:	9a07      	ldr	r2, [sp, #28]
 801221a:	4621      	mov	r1, r4
 801221c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012220:	3b30      	subs	r3, #48	@ 0x30
 8012222:	2b09      	cmp	r3, #9
 8012224:	d94b      	bls.n	80122be <_vfiprintf_r+0x1a2>
 8012226:	b1b0      	cbz	r0, 8012256 <_vfiprintf_r+0x13a>
 8012228:	9207      	str	r2, [sp, #28]
 801222a:	e014      	b.n	8012256 <_vfiprintf_r+0x13a>
 801222c:	eba0 0308 	sub.w	r3, r0, r8
 8012230:	fa09 f303 	lsl.w	r3, r9, r3
 8012234:	4313      	orrs	r3, r2
 8012236:	46a2      	mov	sl, r4
 8012238:	9304      	str	r3, [sp, #16]
 801223a:	e7d2      	b.n	80121e2 <_vfiprintf_r+0xc6>
 801223c:	9b03      	ldr	r3, [sp, #12]
 801223e:	1d19      	adds	r1, r3, #4
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	9103      	str	r1, [sp, #12]
 8012244:	2b00      	cmp	r3, #0
 8012246:	bfbb      	ittet	lt
 8012248:	425b      	neglt	r3, r3
 801224a:	f042 0202 	orrlt.w	r2, r2, #2
 801224e:	9307      	strge	r3, [sp, #28]
 8012250:	9307      	strlt	r3, [sp, #28]
 8012252:	bfb8      	it	lt
 8012254:	9204      	strlt	r2, [sp, #16]
 8012256:	7823      	ldrb	r3, [r4, #0]
 8012258:	2b2e      	cmp	r3, #46	@ 0x2e
 801225a:	d10a      	bne.n	8012272 <_vfiprintf_r+0x156>
 801225c:	7863      	ldrb	r3, [r4, #1]
 801225e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012260:	d132      	bne.n	80122c8 <_vfiprintf_r+0x1ac>
 8012262:	9b03      	ldr	r3, [sp, #12]
 8012264:	3402      	adds	r4, #2
 8012266:	1d1a      	adds	r2, r3, #4
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	9203      	str	r2, [sp, #12]
 801226c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012270:	9305      	str	r3, [sp, #20]
 8012272:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 801233c <_vfiprintf_r+0x220>
 8012276:	2203      	movs	r2, #3
 8012278:	4650      	mov	r0, sl
 801227a:	7821      	ldrb	r1, [r4, #0]
 801227c:	f7fd fb3b 	bl	800f8f6 <memchr>
 8012280:	b138      	cbz	r0, 8012292 <_vfiprintf_r+0x176>
 8012282:	2240      	movs	r2, #64	@ 0x40
 8012284:	9b04      	ldr	r3, [sp, #16]
 8012286:	eba0 000a 	sub.w	r0, r0, sl
 801228a:	4082      	lsls	r2, r0
 801228c:	4313      	orrs	r3, r2
 801228e:	3401      	adds	r4, #1
 8012290:	9304      	str	r3, [sp, #16]
 8012292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012296:	2206      	movs	r2, #6
 8012298:	4829      	ldr	r0, [pc, #164]	@ (8012340 <_vfiprintf_r+0x224>)
 801229a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801229e:	f7fd fb2a 	bl	800f8f6 <memchr>
 80122a2:	2800      	cmp	r0, #0
 80122a4:	d03f      	beq.n	8012326 <_vfiprintf_r+0x20a>
 80122a6:	4b27      	ldr	r3, [pc, #156]	@ (8012344 <_vfiprintf_r+0x228>)
 80122a8:	bb1b      	cbnz	r3, 80122f2 <_vfiprintf_r+0x1d6>
 80122aa:	9b03      	ldr	r3, [sp, #12]
 80122ac:	3307      	adds	r3, #7
 80122ae:	f023 0307 	bic.w	r3, r3, #7
 80122b2:	3308      	adds	r3, #8
 80122b4:	9303      	str	r3, [sp, #12]
 80122b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122b8:	443b      	add	r3, r7
 80122ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80122bc:	e76a      	b.n	8012194 <_vfiprintf_r+0x78>
 80122be:	460c      	mov	r4, r1
 80122c0:	2001      	movs	r0, #1
 80122c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80122c6:	e7a8      	b.n	801221a <_vfiprintf_r+0xfe>
 80122c8:	2300      	movs	r3, #0
 80122ca:	f04f 0c0a 	mov.w	ip, #10
 80122ce:	4619      	mov	r1, r3
 80122d0:	3401      	adds	r4, #1
 80122d2:	9305      	str	r3, [sp, #20]
 80122d4:	4620      	mov	r0, r4
 80122d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122da:	3a30      	subs	r2, #48	@ 0x30
 80122dc:	2a09      	cmp	r2, #9
 80122de:	d903      	bls.n	80122e8 <_vfiprintf_r+0x1cc>
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d0c6      	beq.n	8012272 <_vfiprintf_r+0x156>
 80122e4:	9105      	str	r1, [sp, #20]
 80122e6:	e7c4      	b.n	8012272 <_vfiprintf_r+0x156>
 80122e8:	4604      	mov	r4, r0
 80122ea:	2301      	movs	r3, #1
 80122ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80122f0:	e7f0      	b.n	80122d4 <_vfiprintf_r+0x1b8>
 80122f2:	ab03      	add	r3, sp, #12
 80122f4:	9300      	str	r3, [sp, #0]
 80122f6:	462a      	mov	r2, r5
 80122f8:	4630      	mov	r0, r6
 80122fa:	4b13      	ldr	r3, [pc, #76]	@ (8012348 <_vfiprintf_r+0x22c>)
 80122fc:	a904      	add	r1, sp, #16
 80122fe:	f7fc fa7b 	bl	800e7f8 <_printf_float>
 8012302:	4607      	mov	r7, r0
 8012304:	1c78      	adds	r0, r7, #1
 8012306:	d1d6      	bne.n	80122b6 <_vfiprintf_r+0x19a>
 8012308:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801230a:	07d9      	lsls	r1, r3, #31
 801230c:	d405      	bmi.n	801231a <_vfiprintf_r+0x1fe>
 801230e:	89ab      	ldrh	r3, [r5, #12]
 8012310:	059a      	lsls	r2, r3, #22
 8012312:	d402      	bmi.n	801231a <_vfiprintf_r+0x1fe>
 8012314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012316:	f7fd faed 	bl	800f8f4 <__retarget_lock_release_recursive>
 801231a:	89ab      	ldrh	r3, [r5, #12]
 801231c:	065b      	lsls	r3, r3, #25
 801231e:	f53f af1f 	bmi.w	8012160 <_vfiprintf_r+0x44>
 8012322:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012324:	e71e      	b.n	8012164 <_vfiprintf_r+0x48>
 8012326:	ab03      	add	r3, sp, #12
 8012328:	9300      	str	r3, [sp, #0]
 801232a:	462a      	mov	r2, r5
 801232c:	4630      	mov	r0, r6
 801232e:	4b06      	ldr	r3, [pc, #24]	@ (8012348 <_vfiprintf_r+0x22c>)
 8012330:	a904      	add	r1, sp, #16
 8012332:	f7fc fcff 	bl	800ed34 <_printf_i>
 8012336:	e7e4      	b.n	8012302 <_vfiprintf_r+0x1e6>
 8012338:	080138c9 	.word	0x080138c9
 801233c:	080138cf 	.word	0x080138cf
 8012340:	080138d3 	.word	0x080138d3
 8012344:	0800e7f9 	.word	0x0800e7f9
 8012348:	080120f7 	.word	0x080120f7

0801234c <__sflush_r>:
 801234c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012352:	0716      	lsls	r6, r2, #28
 8012354:	4605      	mov	r5, r0
 8012356:	460c      	mov	r4, r1
 8012358:	d454      	bmi.n	8012404 <__sflush_r+0xb8>
 801235a:	684b      	ldr	r3, [r1, #4]
 801235c:	2b00      	cmp	r3, #0
 801235e:	dc02      	bgt.n	8012366 <__sflush_r+0x1a>
 8012360:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012362:	2b00      	cmp	r3, #0
 8012364:	dd48      	ble.n	80123f8 <__sflush_r+0xac>
 8012366:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012368:	2e00      	cmp	r6, #0
 801236a:	d045      	beq.n	80123f8 <__sflush_r+0xac>
 801236c:	2300      	movs	r3, #0
 801236e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012372:	682f      	ldr	r7, [r5, #0]
 8012374:	6a21      	ldr	r1, [r4, #32]
 8012376:	602b      	str	r3, [r5, #0]
 8012378:	d030      	beq.n	80123dc <__sflush_r+0x90>
 801237a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801237c:	89a3      	ldrh	r3, [r4, #12]
 801237e:	0759      	lsls	r1, r3, #29
 8012380:	d505      	bpl.n	801238e <__sflush_r+0x42>
 8012382:	6863      	ldr	r3, [r4, #4]
 8012384:	1ad2      	subs	r2, r2, r3
 8012386:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012388:	b10b      	cbz	r3, 801238e <__sflush_r+0x42>
 801238a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801238c:	1ad2      	subs	r2, r2, r3
 801238e:	2300      	movs	r3, #0
 8012390:	4628      	mov	r0, r5
 8012392:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012394:	6a21      	ldr	r1, [r4, #32]
 8012396:	47b0      	blx	r6
 8012398:	1c43      	adds	r3, r0, #1
 801239a:	89a3      	ldrh	r3, [r4, #12]
 801239c:	d106      	bne.n	80123ac <__sflush_r+0x60>
 801239e:	6829      	ldr	r1, [r5, #0]
 80123a0:	291d      	cmp	r1, #29
 80123a2:	d82b      	bhi.n	80123fc <__sflush_r+0xb0>
 80123a4:	4a28      	ldr	r2, [pc, #160]	@ (8012448 <__sflush_r+0xfc>)
 80123a6:	410a      	asrs	r2, r1
 80123a8:	07d6      	lsls	r6, r2, #31
 80123aa:	d427      	bmi.n	80123fc <__sflush_r+0xb0>
 80123ac:	2200      	movs	r2, #0
 80123ae:	6062      	str	r2, [r4, #4]
 80123b0:	6922      	ldr	r2, [r4, #16]
 80123b2:	04d9      	lsls	r1, r3, #19
 80123b4:	6022      	str	r2, [r4, #0]
 80123b6:	d504      	bpl.n	80123c2 <__sflush_r+0x76>
 80123b8:	1c42      	adds	r2, r0, #1
 80123ba:	d101      	bne.n	80123c0 <__sflush_r+0x74>
 80123bc:	682b      	ldr	r3, [r5, #0]
 80123be:	b903      	cbnz	r3, 80123c2 <__sflush_r+0x76>
 80123c0:	6560      	str	r0, [r4, #84]	@ 0x54
 80123c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80123c4:	602f      	str	r7, [r5, #0]
 80123c6:	b1b9      	cbz	r1, 80123f8 <__sflush_r+0xac>
 80123c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80123cc:	4299      	cmp	r1, r3
 80123ce:	d002      	beq.n	80123d6 <__sflush_r+0x8a>
 80123d0:	4628      	mov	r0, r5
 80123d2:	f7fe f901 	bl	80105d8 <_free_r>
 80123d6:	2300      	movs	r3, #0
 80123d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80123da:	e00d      	b.n	80123f8 <__sflush_r+0xac>
 80123dc:	2301      	movs	r3, #1
 80123de:	4628      	mov	r0, r5
 80123e0:	47b0      	blx	r6
 80123e2:	4602      	mov	r2, r0
 80123e4:	1c50      	adds	r0, r2, #1
 80123e6:	d1c9      	bne.n	801237c <__sflush_r+0x30>
 80123e8:	682b      	ldr	r3, [r5, #0]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d0c6      	beq.n	801237c <__sflush_r+0x30>
 80123ee:	2b1d      	cmp	r3, #29
 80123f0:	d001      	beq.n	80123f6 <__sflush_r+0xaa>
 80123f2:	2b16      	cmp	r3, #22
 80123f4:	d11d      	bne.n	8012432 <__sflush_r+0xe6>
 80123f6:	602f      	str	r7, [r5, #0]
 80123f8:	2000      	movs	r0, #0
 80123fa:	e021      	b.n	8012440 <__sflush_r+0xf4>
 80123fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012400:	b21b      	sxth	r3, r3
 8012402:	e01a      	b.n	801243a <__sflush_r+0xee>
 8012404:	690f      	ldr	r7, [r1, #16]
 8012406:	2f00      	cmp	r7, #0
 8012408:	d0f6      	beq.n	80123f8 <__sflush_r+0xac>
 801240a:	0793      	lsls	r3, r2, #30
 801240c:	bf18      	it	ne
 801240e:	2300      	movne	r3, #0
 8012410:	680e      	ldr	r6, [r1, #0]
 8012412:	bf08      	it	eq
 8012414:	694b      	ldreq	r3, [r1, #20]
 8012416:	1bf6      	subs	r6, r6, r7
 8012418:	600f      	str	r7, [r1, #0]
 801241a:	608b      	str	r3, [r1, #8]
 801241c:	2e00      	cmp	r6, #0
 801241e:	ddeb      	ble.n	80123f8 <__sflush_r+0xac>
 8012420:	4633      	mov	r3, r6
 8012422:	463a      	mov	r2, r7
 8012424:	4628      	mov	r0, r5
 8012426:	6a21      	ldr	r1, [r4, #32]
 8012428:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 801242c:	47e0      	blx	ip
 801242e:	2800      	cmp	r0, #0
 8012430:	dc07      	bgt.n	8012442 <__sflush_r+0xf6>
 8012432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801243a:	f04f 30ff 	mov.w	r0, #4294967295
 801243e:	81a3      	strh	r3, [r4, #12]
 8012440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012442:	4407      	add	r7, r0
 8012444:	1a36      	subs	r6, r6, r0
 8012446:	e7e9      	b.n	801241c <__sflush_r+0xd0>
 8012448:	dfbffffe 	.word	0xdfbffffe

0801244c <_fflush_r>:
 801244c:	b538      	push	{r3, r4, r5, lr}
 801244e:	690b      	ldr	r3, [r1, #16]
 8012450:	4605      	mov	r5, r0
 8012452:	460c      	mov	r4, r1
 8012454:	b913      	cbnz	r3, 801245c <_fflush_r+0x10>
 8012456:	2500      	movs	r5, #0
 8012458:	4628      	mov	r0, r5
 801245a:	bd38      	pop	{r3, r4, r5, pc}
 801245c:	b118      	cbz	r0, 8012466 <_fflush_r+0x1a>
 801245e:	6a03      	ldr	r3, [r0, #32]
 8012460:	b90b      	cbnz	r3, 8012466 <_fflush_r+0x1a>
 8012462:	f7fd f823 	bl	800f4ac <__sinit>
 8012466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d0f3      	beq.n	8012456 <_fflush_r+0xa>
 801246e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012470:	07d0      	lsls	r0, r2, #31
 8012472:	d404      	bmi.n	801247e <_fflush_r+0x32>
 8012474:	0599      	lsls	r1, r3, #22
 8012476:	d402      	bmi.n	801247e <_fflush_r+0x32>
 8012478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801247a:	f7fd fa3a 	bl	800f8f2 <__retarget_lock_acquire_recursive>
 801247e:	4628      	mov	r0, r5
 8012480:	4621      	mov	r1, r4
 8012482:	f7ff ff63 	bl	801234c <__sflush_r>
 8012486:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012488:	4605      	mov	r5, r0
 801248a:	07da      	lsls	r2, r3, #31
 801248c:	d4e4      	bmi.n	8012458 <_fflush_r+0xc>
 801248e:	89a3      	ldrh	r3, [r4, #12]
 8012490:	059b      	lsls	r3, r3, #22
 8012492:	d4e1      	bmi.n	8012458 <_fflush_r+0xc>
 8012494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012496:	f7fd fa2d 	bl	800f8f4 <__retarget_lock_release_recursive>
 801249a:	e7dd      	b.n	8012458 <_fflush_r+0xc>

0801249c <__swhatbuf_r>:
 801249c:	b570      	push	{r4, r5, r6, lr}
 801249e:	460c      	mov	r4, r1
 80124a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124a4:	4615      	mov	r5, r2
 80124a6:	2900      	cmp	r1, #0
 80124a8:	461e      	mov	r6, r3
 80124aa:	b096      	sub	sp, #88	@ 0x58
 80124ac:	da0c      	bge.n	80124c8 <__swhatbuf_r+0x2c>
 80124ae:	89a3      	ldrh	r3, [r4, #12]
 80124b0:	2100      	movs	r1, #0
 80124b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80124b6:	bf14      	ite	ne
 80124b8:	2340      	movne	r3, #64	@ 0x40
 80124ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80124be:	2000      	movs	r0, #0
 80124c0:	6031      	str	r1, [r6, #0]
 80124c2:	602b      	str	r3, [r5, #0]
 80124c4:	b016      	add	sp, #88	@ 0x58
 80124c6:	bd70      	pop	{r4, r5, r6, pc}
 80124c8:	466a      	mov	r2, sp
 80124ca:	f000 f8a9 	bl	8012620 <_fstat_r>
 80124ce:	2800      	cmp	r0, #0
 80124d0:	dbed      	blt.n	80124ae <__swhatbuf_r+0x12>
 80124d2:	9901      	ldr	r1, [sp, #4]
 80124d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80124d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80124dc:	4259      	negs	r1, r3
 80124de:	4159      	adcs	r1, r3
 80124e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80124e4:	e7eb      	b.n	80124be <__swhatbuf_r+0x22>

080124e6 <__smakebuf_r>:
 80124e6:	898b      	ldrh	r3, [r1, #12]
 80124e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80124ea:	079d      	lsls	r5, r3, #30
 80124ec:	4606      	mov	r6, r0
 80124ee:	460c      	mov	r4, r1
 80124f0:	d507      	bpl.n	8012502 <__smakebuf_r+0x1c>
 80124f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80124f6:	6023      	str	r3, [r4, #0]
 80124f8:	6123      	str	r3, [r4, #16]
 80124fa:	2301      	movs	r3, #1
 80124fc:	6163      	str	r3, [r4, #20]
 80124fe:	b003      	add	sp, #12
 8012500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012502:	466a      	mov	r2, sp
 8012504:	ab01      	add	r3, sp, #4
 8012506:	f7ff ffc9 	bl	801249c <__swhatbuf_r>
 801250a:	9f00      	ldr	r7, [sp, #0]
 801250c:	4605      	mov	r5, r0
 801250e:	4639      	mov	r1, r7
 8012510:	4630      	mov	r0, r6
 8012512:	f7fe f8d3 	bl	80106bc <_malloc_r>
 8012516:	b948      	cbnz	r0, 801252c <__smakebuf_r+0x46>
 8012518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801251c:	059a      	lsls	r2, r3, #22
 801251e:	d4ee      	bmi.n	80124fe <__smakebuf_r+0x18>
 8012520:	f023 0303 	bic.w	r3, r3, #3
 8012524:	f043 0302 	orr.w	r3, r3, #2
 8012528:	81a3      	strh	r3, [r4, #12]
 801252a:	e7e2      	b.n	80124f2 <__smakebuf_r+0xc>
 801252c:	89a3      	ldrh	r3, [r4, #12]
 801252e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012536:	81a3      	strh	r3, [r4, #12]
 8012538:	9b01      	ldr	r3, [sp, #4]
 801253a:	6020      	str	r0, [r4, #0]
 801253c:	b15b      	cbz	r3, 8012556 <__smakebuf_r+0x70>
 801253e:	4630      	mov	r0, r6
 8012540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012544:	f000 f87e 	bl	8012644 <_isatty_r>
 8012548:	b128      	cbz	r0, 8012556 <__smakebuf_r+0x70>
 801254a:	89a3      	ldrh	r3, [r4, #12]
 801254c:	f023 0303 	bic.w	r3, r3, #3
 8012550:	f043 0301 	orr.w	r3, r3, #1
 8012554:	81a3      	strh	r3, [r4, #12]
 8012556:	89a3      	ldrh	r3, [r4, #12]
 8012558:	431d      	orrs	r5, r3
 801255a:	81a5      	strh	r5, [r4, #12]
 801255c:	e7cf      	b.n	80124fe <__smakebuf_r+0x18>

0801255e <_putc_r>:
 801255e:	b570      	push	{r4, r5, r6, lr}
 8012560:	460d      	mov	r5, r1
 8012562:	4614      	mov	r4, r2
 8012564:	4606      	mov	r6, r0
 8012566:	b118      	cbz	r0, 8012570 <_putc_r+0x12>
 8012568:	6a03      	ldr	r3, [r0, #32]
 801256a:	b90b      	cbnz	r3, 8012570 <_putc_r+0x12>
 801256c:	f7fc ff9e 	bl	800f4ac <__sinit>
 8012570:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012572:	07d8      	lsls	r0, r3, #31
 8012574:	d405      	bmi.n	8012582 <_putc_r+0x24>
 8012576:	89a3      	ldrh	r3, [r4, #12]
 8012578:	0599      	lsls	r1, r3, #22
 801257a:	d402      	bmi.n	8012582 <_putc_r+0x24>
 801257c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801257e:	f7fd f9b8 	bl	800f8f2 <__retarget_lock_acquire_recursive>
 8012582:	68a3      	ldr	r3, [r4, #8]
 8012584:	3b01      	subs	r3, #1
 8012586:	2b00      	cmp	r3, #0
 8012588:	60a3      	str	r3, [r4, #8]
 801258a:	da05      	bge.n	8012598 <_putc_r+0x3a>
 801258c:	69a2      	ldr	r2, [r4, #24]
 801258e:	4293      	cmp	r3, r2
 8012590:	db12      	blt.n	80125b8 <_putc_r+0x5a>
 8012592:	b2eb      	uxtb	r3, r5
 8012594:	2b0a      	cmp	r3, #10
 8012596:	d00f      	beq.n	80125b8 <_putc_r+0x5a>
 8012598:	6823      	ldr	r3, [r4, #0]
 801259a:	1c5a      	adds	r2, r3, #1
 801259c:	6022      	str	r2, [r4, #0]
 801259e:	701d      	strb	r5, [r3, #0]
 80125a0:	b2ed      	uxtb	r5, r5
 80125a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80125a4:	07da      	lsls	r2, r3, #31
 80125a6:	d405      	bmi.n	80125b4 <_putc_r+0x56>
 80125a8:	89a3      	ldrh	r3, [r4, #12]
 80125aa:	059b      	lsls	r3, r3, #22
 80125ac:	d402      	bmi.n	80125b4 <_putc_r+0x56>
 80125ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80125b0:	f7fd f9a0 	bl	800f8f4 <__retarget_lock_release_recursive>
 80125b4:	4628      	mov	r0, r5
 80125b6:	bd70      	pop	{r4, r5, r6, pc}
 80125b8:	4629      	mov	r1, r5
 80125ba:	4622      	mov	r2, r4
 80125bc:	4630      	mov	r0, r6
 80125be:	f7fd f886 	bl	800f6ce <__swbuf_r>
 80125c2:	4605      	mov	r5, r0
 80125c4:	e7ed      	b.n	80125a2 <_putc_r+0x44>

080125c6 <memmove>:
 80125c6:	4288      	cmp	r0, r1
 80125c8:	b510      	push	{r4, lr}
 80125ca:	eb01 0402 	add.w	r4, r1, r2
 80125ce:	d902      	bls.n	80125d6 <memmove+0x10>
 80125d0:	4284      	cmp	r4, r0
 80125d2:	4623      	mov	r3, r4
 80125d4:	d807      	bhi.n	80125e6 <memmove+0x20>
 80125d6:	1e43      	subs	r3, r0, #1
 80125d8:	42a1      	cmp	r1, r4
 80125da:	d008      	beq.n	80125ee <memmove+0x28>
 80125dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80125e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80125e4:	e7f8      	b.n	80125d8 <memmove+0x12>
 80125e6:	4601      	mov	r1, r0
 80125e8:	4402      	add	r2, r0
 80125ea:	428a      	cmp	r2, r1
 80125ec:	d100      	bne.n	80125f0 <memmove+0x2a>
 80125ee:	bd10      	pop	{r4, pc}
 80125f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80125f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80125f8:	e7f7      	b.n	80125ea <memmove+0x24>

080125fa <strncmp>:
 80125fa:	b510      	push	{r4, lr}
 80125fc:	b16a      	cbz	r2, 801261a <strncmp+0x20>
 80125fe:	3901      	subs	r1, #1
 8012600:	1884      	adds	r4, r0, r2
 8012602:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012606:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801260a:	429a      	cmp	r2, r3
 801260c:	d103      	bne.n	8012616 <strncmp+0x1c>
 801260e:	42a0      	cmp	r0, r4
 8012610:	d001      	beq.n	8012616 <strncmp+0x1c>
 8012612:	2a00      	cmp	r2, #0
 8012614:	d1f5      	bne.n	8012602 <strncmp+0x8>
 8012616:	1ad0      	subs	r0, r2, r3
 8012618:	bd10      	pop	{r4, pc}
 801261a:	4610      	mov	r0, r2
 801261c:	e7fc      	b.n	8012618 <strncmp+0x1e>
	...

08012620 <_fstat_r>:
 8012620:	b538      	push	{r3, r4, r5, lr}
 8012622:	2300      	movs	r3, #0
 8012624:	4d06      	ldr	r5, [pc, #24]	@ (8012640 <_fstat_r+0x20>)
 8012626:	4604      	mov	r4, r0
 8012628:	4608      	mov	r0, r1
 801262a:	4611      	mov	r1, r2
 801262c:	602b      	str	r3, [r5, #0]
 801262e:	f7ef fcf5 	bl	800201c <_fstat>
 8012632:	1c43      	adds	r3, r0, #1
 8012634:	d102      	bne.n	801263c <_fstat_r+0x1c>
 8012636:	682b      	ldr	r3, [r5, #0]
 8012638:	b103      	cbz	r3, 801263c <_fstat_r+0x1c>
 801263a:	6023      	str	r3, [r4, #0]
 801263c:	bd38      	pop	{r3, r4, r5, pc}
 801263e:	bf00      	nop
 8012640:	20001c68 	.word	0x20001c68

08012644 <_isatty_r>:
 8012644:	b538      	push	{r3, r4, r5, lr}
 8012646:	2300      	movs	r3, #0
 8012648:	4d05      	ldr	r5, [pc, #20]	@ (8012660 <_isatty_r+0x1c>)
 801264a:	4604      	mov	r4, r0
 801264c:	4608      	mov	r0, r1
 801264e:	602b      	str	r3, [r5, #0]
 8012650:	f7ef fcf3 	bl	800203a <_isatty>
 8012654:	1c43      	adds	r3, r0, #1
 8012656:	d102      	bne.n	801265e <_isatty_r+0x1a>
 8012658:	682b      	ldr	r3, [r5, #0]
 801265a:	b103      	cbz	r3, 801265e <_isatty_r+0x1a>
 801265c:	6023      	str	r3, [r4, #0]
 801265e:	bd38      	pop	{r3, r4, r5, pc}
 8012660:	20001c68 	.word	0x20001c68

08012664 <_sbrk_r>:
 8012664:	b538      	push	{r3, r4, r5, lr}
 8012666:	2300      	movs	r3, #0
 8012668:	4d05      	ldr	r5, [pc, #20]	@ (8012680 <_sbrk_r+0x1c>)
 801266a:	4604      	mov	r4, r0
 801266c:	4608      	mov	r0, r1
 801266e:	602b      	str	r3, [r5, #0]
 8012670:	f7ef fcfa 	bl	8002068 <_sbrk>
 8012674:	1c43      	adds	r3, r0, #1
 8012676:	d102      	bne.n	801267e <_sbrk_r+0x1a>
 8012678:	682b      	ldr	r3, [r5, #0]
 801267a:	b103      	cbz	r3, 801267e <_sbrk_r+0x1a>
 801267c:	6023      	str	r3, [r4, #0]
 801267e:	bd38      	pop	{r3, r4, r5, pc}
 8012680:	20001c68 	.word	0x20001c68

08012684 <nan>:
 8012684:	2000      	movs	r0, #0
 8012686:	4901      	ldr	r1, [pc, #4]	@ (801268c <nan+0x8>)
 8012688:	4770      	bx	lr
 801268a:	bf00      	nop
 801268c:	7ff80000 	.word	0x7ff80000

08012690 <__assert_func>:
 8012690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012692:	4614      	mov	r4, r2
 8012694:	461a      	mov	r2, r3
 8012696:	4b09      	ldr	r3, [pc, #36]	@ (80126bc <__assert_func+0x2c>)
 8012698:	4605      	mov	r5, r0
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	68d8      	ldr	r0, [r3, #12]
 801269e:	b954      	cbnz	r4, 80126b6 <__assert_func+0x26>
 80126a0:	4b07      	ldr	r3, [pc, #28]	@ (80126c0 <__assert_func+0x30>)
 80126a2:	461c      	mov	r4, r3
 80126a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80126a8:	9100      	str	r1, [sp, #0]
 80126aa:	462b      	mov	r3, r5
 80126ac:	4905      	ldr	r1, [pc, #20]	@ (80126c4 <__assert_func+0x34>)
 80126ae:	f000 fba7 	bl	8012e00 <fiprintf>
 80126b2:	f000 fbb7 	bl	8012e24 <abort>
 80126b6:	4b04      	ldr	r3, [pc, #16]	@ (80126c8 <__assert_func+0x38>)
 80126b8:	e7f4      	b.n	80126a4 <__assert_func+0x14>
 80126ba:	bf00      	nop
 80126bc:	20000208 	.word	0x20000208
 80126c0:	0801391d 	.word	0x0801391d
 80126c4:	080138ef 	.word	0x080138ef
 80126c8:	080138e2 	.word	0x080138e2

080126cc <_calloc_r>:
 80126cc:	b570      	push	{r4, r5, r6, lr}
 80126ce:	fba1 5402 	umull	r5, r4, r1, r2
 80126d2:	b93c      	cbnz	r4, 80126e4 <_calloc_r+0x18>
 80126d4:	4629      	mov	r1, r5
 80126d6:	f7fd fff1 	bl	80106bc <_malloc_r>
 80126da:	4606      	mov	r6, r0
 80126dc:	b928      	cbnz	r0, 80126ea <_calloc_r+0x1e>
 80126de:	2600      	movs	r6, #0
 80126e0:	4630      	mov	r0, r6
 80126e2:	bd70      	pop	{r4, r5, r6, pc}
 80126e4:	220c      	movs	r2, #12
 80126e6:	6002      	str	r2, [r0, #0]
 80126e8:	e7f9      	b.n	80126de <_calloc_r+0x12>
 80126ea:	462a      	mov	r2, r5
 80126ec:	4621      	mov	r1, r4
 80126ee:	f7fd f883 	bl	800f7f8 <memset>
 80126f2:	e7f5      	b.n	80126e0 <_calloc_r+0x14>

080126f4 <rshift>:
 80126f4:	6903      	ldr	r3, [r0, #16]
 80126f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80126fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80126fe:	f100 0414 	add.w	r4, r0, #20
 8012702:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012706:	dd46      	ble.n	8012796 <rshift+0xa2>
 8012708:	f011 011f 	ands.w	r1, r1, #31
 801270c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012710:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012714:	d10c      	bne.n	8012730 <rshift+0x3c>
 8012716:	4629      	mov	r1, r5
 8012718:	f100 0710 	add.w	r7, r0, #16
 801271c:	42b1      	cmp	r1, r6
 801271e:	d335      	bcc.n	801278c <rshift+0x98>
 8012720:	1a9b      	subs	r3, r3, r2
 8012722:	009b      	lsls	r3, r3, #2
 8012724:	1eea      	subs	r2, r5, #3
 8012726:	4296      	cmp	r6, r2
 8012728:	bf38      	it	cc
 801272a:	2300      	movcc	r3, #0
 801272c:	4423      	add	r3, r4
 801272e:	e015      	b.n	801275c <rshift+0x68>
 8012730:	46a1      	mov	r9, r4
 8012732:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012736:	f1c1 0820 	rsb	r8, r1, #32
 801273a:	40cf      	lsrs	r7, r1
 801273c:	f105 0e04 	add.w	lr, r5, #4
 8012740:	4576      	cmp	r6, lr
 8012742:	46f4      	mov	ip, lr
 8012744:	d816      	bhi.n	8012774 <rshift+0x80>
 8012746:	1a9a      	subs	r2, r3, r2
 8012748:	0092      	lsls	r2, r2, #2
 801274a:	3a04      	subs	r2, #4
 801274c:	3501      	adds	r5, #1
 801274e:	42ae      	cmp	r6, r5
 8012750:	bf38      	it	cc
 8012752:	2200      	movcc	r2, #0
 8012754:	18a3      	adds	r3, r4, r2
 8012756:	50a7      	str	r7, [r4, r2]
 8012758:	b107      	cbz	r7, 801275c <rshift+0x68>
 801275a:	3304      	adds	r3, #4
 801275c:	42a3      	cmp	r3, r4
 801275e:	eba3 0204 	sub.w	r2, r3, r4
 8012762:	bf08      	it	eq
 8012764:	2300      	moveq	r3, #0
 8012766:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801276a:	6102      	str	r2, [r0, #16]
 801276c:	bf08      	it	eq
 801276e:	6143      	streq	r3, [r0, #20]
 8012770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012774:	f8dc c000 	ldr.w	ip, [ip]
 8012778:	fa0c fc08 	lsl.w	ip, ip, r8
 801277c:	ea4c 0707 	orr.w	r7, ip, r7
 8012780:	f849 7b04 	str.w	r7, [r9], #4
 8012784:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012788:	40cf      	lsrs	r7, r1
 801278a:	e7d9      	b.n	8012740 <rshift+0x4c>
 801278c:	f851 cb04 	ldr.w	ip, [r1], #4
 8012790:	f847 cf04 	str.w	ip, [r7, #4]!
 8012794:	e7c2      	b.n	801271c <rshift+0x28>
 8012796:	4623      	mov	r3, r4
 8012798:	e7e0      	b.n	801275c <rshift+0x68>

0801279a <__hexdig_fun>:
 801279a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801279e:	2b09      	cmp	r3, #9
 80127a0:	d802      	bhi.n	80127a8 <__hexdig_fun+0xe>
 80127a2:	3820      	subs	r0, #32
 80127a4:	b2c0      	uxtb	r0, r0
 80127a6:	4770      	bx	lr
 80127a8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80127ac:	2b05      	cmp	r3, #5
 80127ae:	d801      	bhi.n	80127b4 <__hexdig_fun+0x1a>
 80127b0:	3847      	subs	r0, #71	@ 0x47
 80127b2:	e7f7      	b.n	80127a4 <__hexdig_fun+0xa>
 80127b4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80127b8:	2b05      	cmp	r3, #5
 80127ba:	d801      	bhi.n	80127c0 <__hexdig_fun+0x26>
 80127bc:	3827      	subs	r0, #39	@ 0x27
 80127be:	e7f1      	b.n	80127a4 <__hexdig_fun+0xa>
 80127c0:	2000      	movs	r0, #0
 80127c2:	4770      	bx	lr

080127c4 <__gethex>:
 80127c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127c8:	468a      	mov	sl, r1
 80127ca:	4690      	mov	r8, r2
 80127cc:	b085      	sub	sp, #20
 80127ce:	9302      	str	r3, [sp, #8]
 80127d0:	680b      	ldr	r3, [r1, #0]
 80127d2:	9001      	str	r0, [sp, #4]
 80127d4:	1c9c      	adds	r4, r3, #2
 80127d6:	46a1      	mov	r9, r4
 80127d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80127dc:	2830      	cmp	r0, #48	@ 0x30
 80127de:	d0fa      	beq.n	80127d6 <__gethex+0x12>
 80127e0:	eba9 0303 	sub.w	r3, r9, r3
 80127e4:	f1a3 0b02 	sub.w	fp, r3, #2
 80127e8:	f7ff ffd7 	bl	801279a <__hexdig_fun>
 80127ec:	4605      	mov	r5, r0
 80127ee:	2800      	cmp	r0, #0
 80127f0:	d168      	bne.n	80128c4 <__gethex+0x100>
 80127f2:	2201      	movs	r2, #1
 80127f4:	4648      	mov	r0, r9
 80127f6:	499f      	ldr	r1, [pc, #636]	@ (8012a74 <__gethex+0x2b0>)
 80127f8:	f7ff feff 	bl	80125fa <strncmp>
 80127fc:	4607      	mov	r7, r0
 80127fe:	2800      	cmp	r0, #0
 8012800:	d167      	bne.n	80128d2 <__gethex+0x10e>
 8012802:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012806:	4626      	mov	r6, r4
 8012808:	f7ff ffc7 	bl	801279a <__hexdig_fun>
 801280c:	2800      	cmp	r0, #0
 801280e:	d062      	beq.n	80128d6 <__gethex+0x112>
 8012810:	4623      	mov	r3, r4
 8012812:	7818      	ldrb	r0, [r3, #0]
 8012814:	4699      	mov	r9, r3
 8012816:	2830      	cmp	r0, #48	@ 0x30
 8012818:	f103 0301 	add.w	r3, r3, #1
 801281c:	d0f9      	beq.n	8012812 <__gethex+0x4e>
 801281e:	f7ff ffbc 	bl	801279a <__hexdig_fun>
 8012822:	fab0 f580 	clz	r5, r0
 8012826:	f04f 0b01 	mov.w	fp, #1
 801282a:	096d      	lsrs	r5, r5, #5
 801282c:	464a      	mov	r2, r9
 801282e:	4616      	mov	r6, r2
 8012830:	7830      	ldrb	r0, [r6, #0]
 8012832:	3201      	adds	r2, #1
 8012834:	f7ff ffb1 	bl	801279a <__hexdig_fun>
 8012838:	2800      	cmp	r0, #0
 801283a:	d1f8      	bne.n	801282e <__gethex+0x6a>
 801283c:	2201      	movs	r2, #1
 801283e:	4630      	mov	r0, r6
 8012840:	498c      	ldr	r1, [pc, #560]	@ (8012a74 <__gethex+0x2b0>)
 8012842:	f7ff feda 	bl	80125fa <strncmp>
 8012846:	2800      	cmp	r0, #0
 8012848:	d13f      	bne.n	80128ca <__gethex+0x106>
 801284a:	b944      	cbnz	r4, 801285e <__gethex+0x9a>
 801284c:	1c74      	adds	r4, r6, #1
 801284e:	4622      	mov	r2, r4
 8012850:	4616      	mov	r6, r2
 8012852:	7830      	ldrb	r0, [r6, #0]
 8012854:	3201      	adds	r2, #1
 8012856:	f7ff ffa0 	bl	801279a <__hexdig_fun>
 801285a:	2800      	cmp	r0, #0
 801285c:	d1f8      	bne.n	8012850 <__gethex+0x8c>
 801285e:	1ba4      	subs	r4, r4, r6
 8012860:	00a7      	lsls	r7, r4, #2
 8012862:	7833      	ldrb	r3, [r6, #0]
 8012864:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012868:	2b50      	cmp	r3, #80	@ 0x50
 801286a:	d13e      	bne.n	80128ea <__gethex+0x126>
 801286c:	7873      	ldrb	r3, [r6, #1]
 801286e:	2b2b      	cmp	r3, #43	@ 0x2b
 8012870:	d033      	beq.n	80128da <__gethex+0x116>
 8012872:	2b2d      	cmp	r3, #45	@ 0x2d
 8012874:	d034      	beq.n	80128e0 <__gethex+0x11c>
 8012876:	2400      	movs	r4, #0
 8012878:	1c71      	adds	r1, r6, #1
 801287a:	7808      	ldrb	r0, [r1, #0]
 801287c:	f7ff ff8d 	bl	801279a <__hexdig_fun>
 8012880:	1e43      	subs	r3, r0, #1
 8012882:	b2db      	uxtb	r3, r3
 8012884:	2b18      	cmp	r3, #24
 8012886:	d830      	bhi.n	80128ea <__gethex+0x126>
 8012888:	f1a0 0210 	sub.w	r2, r0, #16
 801288c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012890:	f7ff ff83 	bl	801279a <__hexdig_fun>
 8012894:	f100 3cff 	add.w	ip, r0, #4294967295
 8012898:	fa5f fc8c 	uxtb.w	ip, ip
 801289c:	f1bc 0f18 	cmp.w	ip, #24
 80128a0:	f04f 030a 	mov.w	r3, #10
 80128a4:	d91e      	bls.n	80128e4 <__gethex+0x120>
 80128a6:	b104      	cbz	r4, 80128aa <__gethex+0xe6>
 80128a8:	4252      	negs	r2, r2
 80128aa:	4417      	add	r7, r2
 80128ac:	f8ca 1000 	str.w	r1, [sl]
 80128b0:	b1ed      	cbz	r5, 80128ee <__gethex+0x12a>
 80128b2:	f1bb 0f00 	cmp.w	fp, #0
 80128b6:	bf0c      	ite	eq
 80128b8:	2506      	moveq	r5, #6
 80128ba:	2500      	movne	r5, #0
 80128bc:	4628      	mov	r0, r5
 80128be:	b005      	add	sp, #20
 80128c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128c4:	2500      	movs	r5, #0
 80128c6:	462c      	mov	r4, r5
 80128c8:	e7b0      	b.n	801282c <__gethex+0x68>
 80128ca:	2c00      	cmp	r4, #0
 80128cc:	d1c7      	bne.n	801285e <__gethex+0x9a>
 80128ce:	4627      	mov	r7, r4
 80128d0:	e7c7      	b.n	8012862 <__gethex+0x9e>
 80128d2:	464e      	mov	r6, r9
 80128d4:	462f      	mov	r7, r5
 80128d6:	2501      	movs	r5, #1
 80128d8:	e7c3      	b.n	8012862 <__gethex+0x9e>
 80128da:	2400      	movs	r4, #0
 80128dc:	1cb1      	adds	r1, r6, #2
 80128de:	e7cc      	b.n	801287a <__gethex+0xb6>
 80128e0:	2401      	movs	r4, #1
 80128e2:	e7fb      	b.n	80128dc <__gethex+0x118>
 80128e4:	fb03 0002 	mla	r0, r3, r2, r0
 80128e8:	e7ce      	b.n	8012888 <__gethex+0xc4>
 80128ea:	4631      	mov	r1, r6
 80128ec:	e7de      	b.n	80128ac <__gethex+0xe8>
 80128ee:	4629      	mov	r1, r5
 80128f0:	eba6 0309 	sub.w	r3, r6, r9
 80128f4:	3b01      	subs	r3, #1
 80128f6:	2b07      	cmp	r3, #7
 80128f8:	dc0a      	bgt.n	8012910 <__gethex+0x14c>
 80128fa:	9801      	ldr	r0, [sp, #4]
 80128fc:	f7fd ff6a 	bl	80107d4 <_Balloc>
 8012900:	4604      	mov	r4, r0
 8012902:	b940      	cbnz	r0, 8012916 <__gethex+0x152>
 8012904:	4602      	mov	r2, r0
 8012906:	21e4      	movs	r1, #228	@ 0xe4
 8012908:	4b5b      	ldr	r3, [pc, #364]	@ (8012a78 <__gethex+0x2b4>)
 801290a:	485c      	ldr	r0, [pc, #368]	@ (8012a7c <__gethex+0x2b8>)
 801290c:	f7ff fec0 	bl	8012690 <__assert_func>
 8012910:	3101      	adds	r1, #1
 8012912:	105b      	asrs	r3, r3, #1
 8012914:	e7ef      	b.n	80128f6 <__gethex+0x132>
 8012916:	2300      	movs	r3, #0
 8012918:	f100 0a14 	add.w	sl, r0, #20
 801291c:	4655      	mov	r5, sl
 801291e:	469b      	mov	fp, r3
 8012920:	45b1      	cmp	r9, r6
 8012922:	d337      	bcc.n	8012994 <__gethex+0x1d0>
 8012924:	f845 bb04 	str.w	fp, [r5], #4
 8012928:	eba5 050a 	sub.w	r5, r5, sl
 801292c:	10ad      	asrs	r5, r5, #2
 801292e:	6125      	str	r5, [r4, #16]
 8012930:	4658      	mov	r0, fp
 8012932:	f7fe f841 	bl	80109b8 <__hi0bits>
 8012936:	016d      	lsls	r5, r5, #5
 8012938:	f8d8 6000 	ldr.w	r6, [r8]
 801293c:	1a2d      	subs	r5, r5, r0
 801293e:	42b5      	cmp	r5, r6
 8012940:	dd54      	ble.n	80129ec <__gethex+0x228>
 8012942:	1bad      	subs	r5, r5, r6
 8012944:	4629      	mov	r1, r5
 8012946:	4620      	mov	r0, r4
 8012948:	f7fe fbc9 	bl	80110de <__any_on>
 801294c:	4681      	mov	r9, r0
 801294e:	b178      	cbz	r0, 8012970 <__gethex+0x1ac>
 8012950:	f04f 0901 	mov.w	r9, #1
 8012954:	1e6b      	subs	r3, r5, #1
 8012956:	1159      	asrs	r1, r3, #5
 8012958:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801295c:	f003 021f 	and.w	r2, r3, #31
 8012960:	fa09 f202 	lsl.w	r2, r9, r2
 8012964:	420a      	tst	r2, r1
 8012966:	d003      	beq.n	8012970 <__gethex+0x1ac>
 8012968:	454b      	cmp	r3, r9
 801296a:	dc36      	bgt.n	80129da <__gethex+0x216>
 801296c:	f04f 0902 	mov.w	r9, #2
 8012970:	4629      	mov	r1, r5
 8012972:	4620      	mov	r0, r4
 8012974:	f7ff febe 	bl	80126f4 <rshift>
 8012978:	442f      	add	r7, r5
 801297a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801297e:	42bb      	cmp	r3, r7
 8012980:	da42      	bge.n	8012a08 <__gethex+0x244>
 8012982:	4621      	mov	r1, r4
 8012984:	9801      	ldr	r0, [sp, #4]
 8012986:	f7fd ff65 	bl	8010854 <_Bfree>
 801298a:	2300      	movs	r3, #0
 801298c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801298e:	25a3      	movs	r5, #163	@ 0xa3
 8012990:	6013      	str	r3, [r2, #0]
 8012992:	e793      	b.n	80128bc <__gethex+0xf8>
 8012994:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012998:	2a2e      	cmp	r2, #46	@ 0x2e
 801299a:	d012      	beq.n	80129c2 <__gethex+0x1fe>
 801299c:	2b20      	cmp	r3, #32
 801299e:	d104      	bne.n	80129aa <__gethex+0x1e6>
 80129a0:	f845 bb04 	str.w	fp, [r5], #4
 80129a4:	f04f 0b00 	mov.w	fp, #0
 80129a8:	465b      	mov	r3, fp
 80129aa:	7830      	ldrb	r0, [r6, #0]
 80129ac:	9303      	str	r3, [sp, #12]
 80129ae:	f7ff fef4 	bl	801279a <__hexdig_fun>
 80129b2:	9b03      	ldr	r3, [sp, #12]
 80129b4:	f000 000f 	and.w	r0, r0, #15
 80129b8:	4098      	lsls	r0, r3
 80129ba:	ea4b 0b00 	orr.w	fp, fp, r0
 80129be:	3304      	adds	r3, #4
 80129c0:	e7ae      	b.n	8012920 <__gethex+0x15c>
 80129c2:	45b1      	cmp	r9, r6
 80129c4:	d8ea      	bhi.n	801299c <__gethex+0x1d8>
 80129c6:	2201      	movs	r2, #1
 80129c8:	4630      	mov	r0, r6
 80129ca:	492a      	ldr	r1, [pc, #168]	@ (8012a74 <__gethex+0x2b0>)
 80129cc:	9303      	str	r3, [sp, #12]
 80129ce:	f7ff fe14 	bl	80125fa <strncmp>
 80129d2:	9b03      	ldr	r3, [sp, #12]
 80129d4:	2800      	cmp	r0, #0
 80129d6:	d1e1      	bne.n	801299c <__gethex+0x1d8>
 80129d8:	e7a2      	b.n	8012920 <__gethex+0x15c>
 80129da:	4620      	mov	r0, r4
 80129dc:	1ea9      	subs	r1, r5, #2
 80129de:	f7fe fb7e 	bl	80110de <__any_on>
 80129e2:	2800      	cmp	r0, #0
 80129e4:	d0c2      	beq.n	801296c <__gethex+0x1a8>
 80129e6:	f04f 0903 	mov.w	r9, #3
 80129ea:	e7c1      	b.n	8012970 <__gethex+0x1ac>
 80129ec:	da09      	bge.n	8012a02 <__gethex+0x23e>
 80129ee:	1b75      	subs	r5, r6, r5
 80129f0:	4621      	mov	r1, r4
 80129f2:	462a      	mov	r2, r5
 80129f4:	9801      	ldr	r0, [sp, #4]
 80129f6:	f7fe f943 	bl	8010c80 <__lshift>
 80129fa:	4604      	mov	r4, r0
 80129fc:	1b7f      	subs	r7, r7, r5
 80129fe:	f100 0a14 	add.w	sl, r0, #20
 8012a02:	f04f 0900 	mov.w	r9, #0
 8012a06:	e7b8      	b.n	801297a <__gethex+0x1b6>
 8012a08:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012a0c:	42bd      	cmp	r5, r7
 8012a0e:	dd6f      	ble.n	8012af0 <__gethex+0x32c>
 8012a10:	1bed      	subs	r5, r5, r7
 8012a12:	42ae      	cmp	r6, r5
 8012a14:	dc34      	bgt.n	8012a80 <__gethex+0x2bc>
 8012a16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012a1a:	2b02      	cmp	r3, #2
 8012a1c:	d022      	beq.n	8012a64 <__gethex+0x2a0>
 8012a1e:	2b03      	cmp	r3, #3
 8012a20:	d024      	beq.n	8012a6c <__gethex+0x2a8>
 8012a22:	2b01      	cmp	r3, #1
 8012a24:	d115      	bne.n	8012a52 <__gethex+0x28e>
 8012a26:	42ae      	cmp	r6, r5
 8012a28:	d113      	bne.n	8012a52 <__gethex+0x28e>
 8012a2a:	2e01      	cmp	r6, #1
 8012a2c:	d10b      	bne.n	8012a46 <__gethex+0x282>
 8012a2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012a32:	9a02      	ldr	r2, [sp, #8]
 8012a34:	2562      	movs	r5, #98	@ 0x62
 8012a36:	6013      	str	r3, [r2, #0]
 8012a38:	2301      	movs	r3, #1
 8012a3a:	6123      	str	r3, [r4, #16]
 8012a3c:	f8ca 3000 	str.w	r3, [sl]
 8012a40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a42:	601c      	str	r4, [r3, #0]
 8012a44:	e73a      	b.n	80128bc <__gethex+0xf8>
 8012a46:	4620      	mov	r0, r4
 8012a48:	1e71      	subs	r1, r6, #1
 8012a4a:	f7fe fb48 	bl	80110de <__any_on>
 8012a4e:	2800      	cmp	r0, #0
 8012a50:	d1ed      	bne.n	8012a2e <__gethex+0x26a>
 8012a52:	4621      	mov	r1, r4
 8012a54:	9801      	ldr	r0, [sp, #4]
 8012a56:	f7fd fefd 	bl	8010854 <_Bfree>
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012a5e:	2550      	movs	r5, #80	@ 0x50
 8012a60:	6013      	str	r3, [r2, #0]
 8012a62:	e72b      	b.n	80128bc <__gethex+0xf8>
 8012a64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d1f3      	bne.n	8012a52 <__gethex+0x28e>
 8012a6a:	e7e0      	b.n	8012a2e <__gethex+0x26a>
 8012a6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d1dd      	bne.n	8012a2e <__gethex+0x26a>
 8012a72:	e7ee      	b.n	8012a52 <__gethex+0x28e>
 8012a74:	08013770 	.word	0x08013770
 8012a78:	08013607 	.word	0x08013607
 8012a7c:	0801391e 	.word	0x0801391e
 8012a80:	1e6f      	subs	r7, r5, #1
 8012a82:	f1b9 0f00 	cmp.w	r9, #0
 8012a86:	d130      	bne.n	8012aea <__gethex+0x326>
 8012a88:	b127      	cbz	r7, 8012a94 <__gethex+0x2d0>
 8012a8a:	4639      	mov	r1, r7
 8012a8c:	4620      	mov	r0, r4
 8012a8e:	f7fe fb26 	bl	80110de <__any_on>
 8012a92:	4681      	mov	r9, r0
 8012a94:	2301      	movs	r3, #1
 8012a96:	4629      	mov	r1, r5
 8012a98:	1b76      	subs	r6, r6, r5
 8012a9a:	2502      	movs	r5, #2
 8012a9c:	117a      	asrs	r2, r7, #5
 8012a9e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012aa2:	f007 071f 	and.w	r7, r7, #31
 8012aa6:	40bb      	lsls	r3, r7
 8012aa8:	4213      	tst	r3, r2
 8012aaa:	4620      	mov	r0, r4
 8012aac:	bf18      	it	ne
 8012aae:	f049 0902 	orrne.w	r9, r9, #2
 8012ab2:	f7ff fe1f 	bl	80126f4 <rshift>
 8012ab6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012aba:	f1b9 0f00 	cmp.w	r9, #0
 8012abe:	d047      	beq.n	8012b50 <__gethex+0x38c>
 8012ac0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012ac4:	2b02      	cmp	r3, #2
 8012ac6:	d015      	beq.n	8012af4 <__gethex+0x330>
 8012ac8:	2b03      	cmp	r3, #3
 8012aca:	d017      	beq.n	8012afc <__gethex+0x338>
 8012acc:	2b01      	cmp	r3, #1
 8012ace:	d109      	bne.n	8012ae4 <__gethex+0x320>
 8012ad0:	f019 0f02 	tst.w	r9, #2
 8012ad4:	d006      	beq.n	8012ae4 <__gethex+0x320>
 8012ad6:	f8da 3000 	ldr.w	r3, [sl]
 8012ada:	ea49 0903 	orr.w	r9, r9, r3
 8012ade:	f019 0f01 	tst.w	r9, #1
 8012ae2:	d10e      	bne.n	8012b02 <__gethex+0x33e>
 8012ae4:	f045 0510 	orr.w	r5, r5, #16
 8012ae8:	e032      	b.n	8012b50 <__gethex+0x38c>
 8012aea:	f04f 0901 	mov.w	r9, #1
 8012aee:	e7d1      	b.n	8012a94 <__gethex+0x2d0>
 8012af0:	2501      	movs	r5, #1
 8012af2:	e7e2      	b.n	8012aba <__gethex+0x2f6>
 8012af4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012af6:	f1c3 0301 	rsb	r3, r3, #1
 8012afa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012afc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d0f0      	beq.n	8012ae4 <__gethex+0x320>
 8012b02:	f04f 0c00 	mov.w	ip, #0
 8012b06:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012b0a:	f104 0314 	add.w	r3, r4, #20
 8012b0e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012b12:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012b16:	4618      	mov	r0, r3
 8012b18:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b1c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012b20:	d01b      	beq.n	8012b5a <__gethex+0x396>
 8012b22:	3201      	adds	r2, #1
 8012b24:	6002      	str	r2, [r0, #0]
 8012b26:	2d02      	cmp	r5, #2
 8012b28:	f104 0314 	add.w	r3, r4, #20
 8012b2c:	d13c      	bne.n	8012ba8 <__gethex+0x3e4>
 8012b2e:	f8d8 2000 	ldr.w	r2, [r8]
 8012b32:	3a01      	subs	r2, #1
 8012b34:	42b2      	cmp	r2, r6
 8012b36:	d109      	bne.n	8012b4c <__gethex+0x388>
 8012b38:	2201      	movs	r2, #1
 8012b3a:	1171      	asrs	r1, r6, #5
 8012b3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012b40:	f006 061f 	and.w	r6, r6, #31
 8012b44:	fa02 f606 	lsl.w	r6, r2, r6
 8012b48:	421e      	tst	r6, r3
 8012b4a:	d13a      	bne.n	8012bc2 <__gethex+0x3fe>
 8012b4c:	f045 0520 	orr.w	r5, r5, #32
 8012b50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b52:	601c      	str	r4, [r3, #0]
 8012b54:	9b02      	ldr	r3, [sp, #8]
 8012b56:	601f      	str	r7, [r3, #0]
 8012b58:	e6b0      	b.n	80128bc <__gethex+0xf8>
 8012b5a:	4299      	cmp	r1, r3
 8012b5c:	f843 cc04 	str.w	ip, [r3, #-4]
 8012b60:	d8d9      	bhi.n	8012b16 <__gethex+0x352>
 8012b62:	68a3      	ldr	r3, [r4, #8]
 8012b64:	459b      	cmp	fp, r3
 8012b66:	db17      	blt.n	8012b98 <__gethex+0x3d4>
 8012b68:	6861      	ldr	r1, [r4, #4]
 8012b6a:	9801      	ldr	r0, [sp, #4]
 8012b6c:	3101      	adds	r1, #1
 8012b6e:	f7fd fe31 	bl	80107d4 <_Balloc>
 8012b72:	4681      	mov	r9, r0
 8012b74:	b918      	cbnz	r0, 8012b7e <__gethex+0x3ba>
 8012b76:	4602      	mov	r2, r0
 8012b78:	2184      	movs	r1, #132	@ 0x84
 8012b7a:	4b19      	ldr	r3, [pc, #100]	@ (8012be0 <__gethex+0x41c>)
 8012b7c:	e6c5      	b.n	801290a <__gethex+0x146>
 8012b7e:	6922      	ldr	r2, [r4, #16]
 8012b80:	f104 010c 	add.w	r1, r4, #12
 8012b84:	3202      	adds	r2, #2
 8012b86:	0092      	lsls	r2, r2, #2
 8012b88:	300c      	adds	r0, #12
 8012b8a:	f7fc fec2 	bl	800f912 <memcpy>
 8012b8e:	4621      	mov	r1, r4
 8012b90:	9801      	ldr	r0, [sp, #4]
 8012b92:	f7fd fe5f 	bl	8010854 <_Bfree>
 8012b96:	464c      	mov	r4, r9
 8012b98:	6923      	ldr	r3, [r4, #16]
 8012b9a:	1c5a      	adds	r2, r3, #1
 8012b9c:	6122      	str	r2, [r4, #16]
 8012b9e:	2201      	movs	r2, #1
 8012ba0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012ba4:	615a      	str	r2, [r3, #20]
 8012ba6:	e7be      	b.n	8012b26 <__gethex+0x362>
 8012ba8:	6922      	ldr	r2, [r4, #16]
 8012baa:	455a      	cmp	r2, fp
 8012bac:	dd0b      	ble.n	8012bc6 <__gethex+0x402>
 8012bae:	2101      	movs	r1, #1
 8012bb0:	4620      	mov	r0, r4
 8012bb2:	f7ff fd9f 	bl	80126f4 <rshift>
 8012bb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012bba:	3701      	adds	r7, #1
 8012bbc:	42bb      	cmp	r3, r7
 8012bbe:	f6ff aee0 	blt.w	8012982 <__gethex+0x1be>
 8012bc2:	2501      	movs	r5, #1
 8012bc4:	e7c2      	b.n	8012b4c <__gethex+0x388>
 8012bc6:	f016 061f 	ands.w	r6, r6, #31
 8012bca:	d0fa      	beq.n	8012bc2 <__gethex+0x3fe>
 8012bcc:	4453      	add	r3, sl
 8012bce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012bd2:	f7fd fef1 	bl	80109b8 <__hi0bits>
 8012bd6:	f1c6 0620 	rsb	r6, r6, #32
 8012bda:	42b0      	cmp	r0, r6
 8012bdc:	dbe7      	blt.n	8012bae <__gethex+0x3ea>
 8012bde:	e7f0      	b.n	8012bc2 <__gethex+0x3fe>
 8012be0:	08013607 	.word	0x08013607

08012be4 <L_shift>:
 8012be4:	f1c2 0208 	rsb	r2, r2, #8
 8012be8:	0092      	lsls	r2, r2, #2
 8012bea:	b570      	push	{r4, r5, r6, lr}
 8012bec:	f1c2 0620 	rsb	r6, r2, #32
 8012bf0:	6843      	ldr	r3, [r0, #4]
 8012bf2:	6804      	ldr	r4, [r0, #0]
 8012bf4:	fa03 f506 	lsl.w	r5, r3, r6
 8012bf8:	432c      	orrs	r4, r5
 8012bfa:	40d3      	lsrs	r3, r2
 8012bfc:	6004      	str	r4, [r0, #0]
 8012bfe:	f840 3f04 	str.w	r3, [r0, #4]!
 8012c02:	4288      	cmp	r0, r1
 8012c04:	d3f4      	bcc.n	8012bf0 <L_shift+0xc>
 8012c06:	bd70      	pop	{r4, r5, r6, pc}

08012c08 <__match>:
 8012c08:	b530      	push	{r4, r5, lr}
 8012c0a:	6803      	ldr	r3, [r0, #0]
 8012c0c:	3301      	adds	r3, #1
 8012c0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c12:	b914      	cbnz	r4, 8012c1a <__match+0x12>
 8012c14:	6003      	str	r3, [r0, #0]
 8012c16:	2001      	movs	r0, #1
 8012c18:	bd30      	pop	{r4, r5, pc}
 8012c1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c1e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8012c22:	2d19      	cmp	r5, #25
 8012c24:	bf98      	it	ls
 8012c26:	3220      	addls	r2, #32
 8012c28:	42a2      	cmp	r2, r4
 8012c2a:	d0f0      	beq.n	8012c0e <__match+0x6>
 8012c2c:	2000      	movs	r0, #0
 8012c2e:	e7f3      	b.n	8012c18 <__match+0x10>

08012c30 <__hexnan>:
 8012c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c34:	2500      	movs	r5, #0
 8012c36:	680b      	ldr	r3, [r1, #0]
 8012c38:	4682      	mov	sl, r0
 8012c3a:	115e      	asrs	r6, r3, #5
 8012c3c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012c40:	f013 031f 	ands.w	r3, r3, #31
 8012c44:	bf18      	it	ne
 8012c46:	3604      	addne	r6, #4
 8012c48:	1f37      	subs	r7, r6, #4
 8012c4a:	4690      	mov	r8, r2
 8012c4c:	46b9      	mov	r9, r7
 8012c4e:	463c      	mov	r4, r7
 8012c50:	46ab      	mov	fp, r5
 8012c52:	b087      	sub	sp, #28
 8012c54:	6801      	ldr	r1, [r0, #0]
 8012c56:	9301      	str	r3, [sp, #4]
 8012c58:	f846 5c04 	str.w	r5, [r6, #-4]
 8012c5c:	9502      	str	r5, [sp, #8]
 8012c5e:	784a      	ldrb	r2, [r1, #1]
 8012c60:	1c4b      	adds	r3, r1, #1
 8012c62:	9303      	str	r3, [sp, #12]
 8012c64:	b342      	cbz	r2, 8012cb8 <__hexnan+0x88>
 8012c66:	4610      	mov	r0, r2
 8012c68:	9105      	str	r1, [sp, #20]
 8012c6a:	9204      	str	r2, [sp, #16]
 8012c6c:	f7ff fd95 	bl	801279a <__hexdig_fun>
 8012c70:	2800      	cmp	r0, #0
 8012c72:	d151      	bne.n	8012d18 <__hexnan+0xe8>
 8012c74:	9a04      	ldr	r2, [sp, #16]
 8012c76:	9905      	ldr	r1, [sp, #20]
 8012c78:	2a20      	cmp	r2, #32
 8012c7a:	d818      	bhi.n	8012cae <__hexnan+0x7e>
 8012c7c:	9b02      	ldr	r3, [sp, #8]
 8012c7e:	459b      	cmp	fp, r3
 8012c80:	dd13      	ble.n	8012caa <__hexnan+0x7a>
 8012c82:	454c      	cmp	r4, r9
 8012c84:	d206      	bcs.n	8012c94 <__hexnan+0x64>
 8012c86:	2d07      	cmp	r5, #7
 8012c88:	dc04      	bgt.n	8012c94 <__hexnan+0x64>
 8012c8a:	462a      	mov	r2, r5
 8012c8c:	4649      	mov	r1, r9
 8012c8e:	4620      	mov	r0, r4
 8012c90:	f7ff ffa8 	bl	8012be4 <L_shift>
 8012c94:	4544      	cmp	r4, r8
 8012c96:	d952      	bls.n	8012d3e <__hexnan+0x10e>
 8012c98:	2300      	movs	r3, #0
 8012c9a:	f1a4 0904 	sub.w	r9, r4, #4
 8012c9e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012ca2:	461d      	mov	r5, r3
 8012ca4:	464c      	mov	r4, r9
 8012ca6:	f8cd b008 	str.w	fp, [sp, #8]
 8012caa:	9903      	ldr	r1, [sp, #12]
 8012cac:	e7d7      	b.n	8012c5e <__hexnan+0x2e>
 8012cae:	2a29      	cmp	r2, #41	@ 0x29
 8012cb0:	d157      	bne.n	8012d62 <__hexnan+0x132>
 8012cb2:	3102      	adds	r1, #2
 8012cb4:	f8ca 1000 	str.w	r1, [sl]
 8012cb8:	f1bb 0f00 	cmp.w	fp, #0
 8012cbc:	d051      	beq.n	8012d62 <__hexnan+0x132>
 8012cbe:	454c      	cmp	r4, r9
 8012cc0:	d206      	bcs.n	8012cd0 <__hexnan+0xa0>
 8012cc2:	2d07      	cmp	r5, #7
 8012cc4:	dc04      	bgt.n	8012cd0 <__hexnan+0xa0>
 8012cc6:	462a      	mov	r2, r5
 8012cc8:	4649      	mov	r1, r9
 8012cca:	4620      	mov	r0, r4
 8012ccc:	f7ff ff8a 	bl	8012be4 <L_shift>
 8012cd0:	4544      	cmp	r4, r8
 8012cd2:	d936      	bls.n	8012d42 <__hexnan+0x112>
 8012cd4:	4623      	mov	r3, r4
 8012cd6:	f1a8 0204 	sub.w	r2, r8, #4
 8012cda:	f853 1b04 	ldr.w	r1, [r3], #4
 8012cde:	429f      	cmp	r7, r3
 8012ce0:	f842 1f04 	str.w	r1, [r2, #4]!
 8012ce4:	d2f9      	bcs.n	8012cda <__hexnan+0xaa>
 8012ce6:	1b3b      	subs	r3, r7, r4
 8012ce8:	f023 0303 	bic.w	r3, r3, #3
 8012cec:	3304      	adds	r3, #4
 8012cee:	3401      	adds	r4, #1
 8012cf0:	3e03      	subs	r6, #3
 8012cf2:	42b4      	cmp	r4, r6
 8012cf4:	bf88      	it	hi
 8012cf6:	2304      	movhi	r3, #4
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	4443      	add	r3, r8
 8012cfc:	f843 2b04 	str.w	r2, [r3], #4
 8012d00:	429f      	cmp	r7, r3
 8012d02:	d2fb      	bcs.n	8012cfc <__hexnan+0xcc>
 8012d04:	683b      	ldr	r3, [r7, #0]
 8012d06:	b91b      	cbnz	r3, 8012d10 <__hexnan+0xe0>
 8012d08:	4547      	cmp	r7, r8
 8012d0a:	d128      	bne.n	8012d5e <__hexnan+0x12e>
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	603b      	str	r3, [r7, #0]
 8012d10:	2005      	movs	r0, #5
 8012d12:	b007      	add	sp, #28
 8012d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d18:	3501      	adds	r5, #1
 8012d1a:	2d08      	cmp	r5, #8
 8012d1c:	f10b 0b01 	add.w	fp, fp, #1
 8012d20:	dd06      	ble.n	8012d30 <__hexnan+0x100>
 8012d22:	4544      	cmp	r4, r8
 8012d24:	d9c1      	bls.n	8012caa <__hexnan+0x7a>
 8012d26:	2300      	movs	r3, #0
 8012d28:	2501      	movs	r5, #1
 8012d2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8012d2e:	3c04      	subs	r4, #4
 8012d30:	6822      	ldr	r2, [r4, #0]
 8012d32:	f000 000f 	and.w	r0, r0, #15
 8012d36:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8012d3a:	6020      	str	r0, [r4, #0]
 8012d3c:	e7b5      	b.n	8012caa <__hexnan+0x7a>
 8012d3e:	2508      	movs	r5, #8
 8012d40:	e7b3      	b.n	8012caa <__hexnan+0x7a>
 8012d42:	9b01      	ldr	r3, [sp, #4]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d0dd      	beq.n	8012d04 <__hexnan+0xd4>
 8012d48:	f04f 32ff 	mov.w	r2, #4294967295
 8012d4c:	f1c3 0320 	rsb	r3, r3, #32
 8012d50:	40da      	lsrs	r2, r3
 8012d52:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012d56:	4013      	ands	r3, r2
 8012d58:	f846 3c04 	str.w	r3, [r6, #-4]
 8012d5c:	e7d2      	b.n	8012d04 <__hexnan+0xd4>
 8012d5e:	3f04      	subs	r7, #4
 8012d60:	e7d0      	b.n	8012d04 <__hexnan+0xd4>
 8012d62:	2004      	movs	r0, #4
 8012d64:	e7d5      	b.n	8012d12 <__hexnan+0xe2>

08012d66 <__ascii_mbtowc>:
 8012d66:	b082      	sub	sp, #8
 8012d68:	b901      	cbnz	r1, 8012d6c <__ascii_mbtowc+0x6>
 8012d6a:	a901      	add	r1, sp, #4
 8012d6c:	b142      	cbz	r2, 8012d80 <__ascii_mbtowc+0x1a>
 8012d6e:	b14b      	cbz	r3, 8012d84 <__ascii_mbtowc+0x1e>
 8012d70:	7813      	ldrb	r3, [r2, #0]
 8012d72:	600b      	str	r3, [r1, #0]
 8012d74:	7812      	ldrb	r2, [r2, #0]
 8012d76:	1e10      	subs	r0, r2, #0
 8012d78:	bf18      	it	ne
 8012d7a:	2001      	movne	r0, #1
 8012d7c:	b002      	add	sp, #8
 8012d7e:	4770      	bx	lr
 8012d80:	4610      	mov	r0, r2
 8012d82:	e7fb      	b.n	8012d7c <__ascii_mbtowc+0x16>
 8012d84:	f06f 0001 	mvn.w	r0, #1
 8012d88:	e7f8      	b.n	8012d7c <__ascii_mbtowc+0x16>

08012d8a <_realloc_r>:
 8012d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d8e:	4680      	mov	r8, r0
 8012d90:	4615      	mov	r5, r2
 8012d92:	460c      	mov	r4, r1
 8012d94:	b921      	cbnz	r1, 8012da0 <_realloc_r+0x16>
 8012d96:	4611      	mov	r1, r2
 8012d98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d9c:	f7fd bc8e 	b.w	80106bc <_malloc_r>
 8012da0:	b92a      	cbnz	r2, 8012dae <_realloc_r+0x24>
 8012da2:	f7fd fc19 	bl	80105d8 <_free_r>
 8012da6:	2400      	movs	r4, #0
 8012da8:	4620      	mov	r0, r4
 8012daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dae:	f000 f840 	bl	8012e32 <_malloc_usable_size_r>
 8012db2:	4285      	cmp	r5, r0
 8012db4:	4606      	mov	r6, r0
 8012db6:	d802      	bhi.n	8012dbe <_realloc_r+0x34>
 8012db8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012dbc:	d8f4      	bhi.n	8012da8 <_realloc_r+0x1e>
 8012dbe:	4629      	mov	r1, r5
 8012dc0:	4640      	mov	r0, r8
 8012dc2:	f7fd fc7b 	bl	80106bc <_malloc_r>
 8012dc6:	4607      	mov	r7, r0
 8012dc8:	2800      	cmp	r0, #0
 8012dca:	d0ec      	beq.n	8012da6 <_realloc_r+0x1c>
 8012dcc:	42b5      	cmp	r5, r6
 8012dce:	462a      	mov	r2, r5
 8012dd0:	4621      	mov	r1, r4
 8012dd2:	bf28      	it	cs
 8012dd4:	4632      	movcs	r2, r6
 8012dd6:	f7fc fd9c 	bl	800f912 <memcpy>
 8012dda:	4621      	mov	r1, r4
 8012ddc:	4640      	mov	r0, r8
 8012dde:	f7fd fbfb 	bl	80105d8 <_free_r>
 8012de2:	463c      	mov	r4, r7
 8012de4:	e7e0      	b.n	8012da8 <_realloc_r+0x1e>

08012de6 <__ascii_wctomb>:
 8012de6:	4603      	mov	r3, r0
 8012de8:	4608      	mov	r0, r1
 8012dea:	b141      	cbz	r1, 8012dfe <__ascii_wctomb+0x18>
 8012dec:	2aff      	cmp	r2, #255	@ 0xff
 8012dee:	d904      	bls.n	8012dfa <__ascii_wctomb+0x14>
 8012df0:	228a      	movs	r2, #138	@ 0x8a
 8012df2:	f04f 30ff 	mov.w	r0, #4294967295
 8012df6:	601a      	str	r2, [r3, #0]
 8012df8:	4770      	bx	lr
 8012dfa:	2001      	movs	r0, #1
 8012dfc:	700a      	strb	r2, [r1, #0]
 8012dfe:	4770      	bx	lr

08012e00 <fiprintf>:
 8012e00:	b40e      	push	{r1, r2, r3}
 8012e02:	b503      	push	{r0, r1, lr}
 8012e04:	4601      	mov	r1, r0
 8012e06:	ab03      	add	r3, sp, #12
 8012e08:	4805      	ldr	r0, [pc, #20]	@ (8012e20 <fiprintf+0x20>)
 8012e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e0e:	6800      	ldr	r0, [r0, #0]
 8012e10:	9301      	str	r3, [sp, #4]
 8012e12:	f7ff f983 	bl	801211c <_vfiprintf_r>
 8012e16:	b002      	add	sp, #8
 8012e18:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e1c:	b003      	add	sp, #12
 8012e1e:	4770      	bx	lr
 8012e20:	20000208 	.word	0x20000208

08012e24 <abort>:
 8012e24:	2006      	movs	r0, #6
 8012e26:	b508      	push	{r3, lr}
 8012e28:	f000 f834 	bl	8012e94 <raise>
 8012e2c:	2001      	movs	r0, #1
 8012e2e:	f7ef f8a6 	bl	8001f7e <_exit>

08012e32 <_malloc_usable_size_r>:
 8012e32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e36:	1f18      	subs	r0, r3, #4
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	bfbc      	itt	lt
 8012e3c:	580b      	ldrlt	r3, [r1, r0]
 8012e3e:	18c0      	addlt	r0, r0, r3
 8012e40:	4770      	bx	lr

08012e42 <_raise_r>:
 8012e42:	291f      	cmp	r1, #31
 8012e44:	b538      	push	{r3, r4, r5, lr}
 8012e46:	4605      	mov	r5, r0
 8012e48:	460c      	mov	r4, r1
 8012e4a:	d904      	bls.n	8012e56 <_raise_r+0x14>
 8012e4c:	2316      	movs	r3, #22
 8012e4e:	6003      	str	r3, [r0, #0]
 8012e50:	f04f 30ff 	mov.w	r0, #4294967295
 8012e54:	bd38      	pop	{r3, r4, r5, pc}
 8012e56:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012e58:	b112      	cbz	r2, 8012e60 <_raise_r+0x1e>
 8012e5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012e5e:	b94b      	cbnz	r3, 8012e74 <_raise_r+0x32>
 8012e60:	4628      	mov	r0, r5
 8012e62:	f000 f831 	bl	8012ec8 <_getpid_r>
 8012e66:	4622      	mov	r2, r4
 8012e68:	4601      	mov	r1, r0
 8012e6a:	4628      	mov	r0, r5
 8012e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e70:	f000 b818 	b.w	8012ea4 <_kill_r>
 8012e74:	2b01      	cmp	r3, #1
 8012e76:	d00a      	beq.n	8012e8e <_raise_r+0x4c>
 8012e78:	1c59      	adds	r1, r3, #1
 8012e7a:	d103      	bne.n	8012e84 <_raise_r+0x42>
 8012e7c:	2316      	movs	r3, #22
 8012e7e:	6003      	str	r3, [r0, #0]
 8012e80:	2001      	movs	r0, #1
 8012e82:	e7e7      	b.n	8012e54 <_raise_r+0x12>
 8012e84:	2100      	movs	r1, #0
 8012e86:	4620      	mov	r0, r4
 8012e88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012e8c:	4798      	blx	r3
 8012e8e:	2000      	movs	r0, #0
 8012e90:	e7e0      	b.n	8012e54 <_raise_r+0x12>
	...

08012e94 <raise>:
 8012e94:	4b02      	ldr	r3, [pc, #8]	@ (8012ea0 <raise+0xc>)
 8012e96:	4601      	mov	r1, r0
 8012e98:	6818      	ldr	r0, [r3, #0]
 8012e9a:	f7ff bfd2 	b.w	8012e42 <_raise_r>
 8012e9e:	bf00      	nop
 8012ea0:	20000208 	.word	0x20000208

08012ea4 <_kill_r>:
 8012ea4:	b538      	push	{r3, r4, r5, lr}
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	4d06      	ldr	r5, [pc, #24]	@ (8012ec4 <_kill_r+0x20>)
 8012eaa:	4604      	mov	r4, r0
 8012eac:	4608      	mov	r0, r1
 8012eae:	4611      	mov	r1, r2
 8012eb0:	602b      	str	r3, [r5, #0]
 8012eb2:	f7ef f854 	bl	8001f5e <_kill>
 8012eb6:	1c43      	adds	r3, r0, #1
 8012eb8:	d102      	bne.n	8012ec0 <_kill_r+0x1c>
 8012eba:	682b      	ldr	r3, [r5, #0]
 8012ebc:	b103      	cbz	r3, 8012ec0 <_kill_r+0x1c>
 8012ebe:	6023      	str	r3, [r4, #0]
 8012ec0:	bd38      	pop	{r3, r4, r5, pc}
 8012ec2:	bf00      	nop
 8012ec4:	20001c68 	.word	0x20001c68

08012ec8 <_getpid_r>:
 8012ec8:	f7ef b842 	b.w	8001f50 <_getpid>

08012ecc <_init>:
 8012ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ece:	bf00      	nop
 8012ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ed2:	bc08      	pop	{r3}
 8012ed4:	469e      	mov	lr, r3
 8012ed6:	4770      	bx	lr

08012ed8 <_fini>:
 8012ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eda:	bf00      	nop
 8012edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ede:	bc08      	pop	{r3}
 8012ee0:	469e      	mov	lr, r3
 8012ee2:	4770      	bx	lr
